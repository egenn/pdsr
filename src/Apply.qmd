---
knitr:
  opts_chunk: 
    comment: ''
    error: true
lightbox: true
---
# The Apply Family {#sec-loopfns}

The `apply` functions are some of the most widely used R functions. They replace 
longer expressions created with a `for` loop, for example.  
They can result in more compact and readable code.  

| Function   | Description
|-----------:|----------------------------------------------------------------:|
| `apply()`  | Apply function over array margins (i.e. over one or more dimensions)
| `lapply()` | Return a *list* where each element is the result of applying a function to each element of the input
| `sapply()` | Same as `lapply()`, but returns the simplest possible R object (instead of always returning a list)
| `vapply()` | Same as `sapply()`, but with a pre-specified return type: this is safer and may also be faster
| `tapply()` | Apply a function to elements of groups defined by a factor
| `mapply()` | Multivariate `sapply()`: Apply a function using the 1st elements of the inputs vectors, then using the 2nd, 3rd, etc.

```{r}
#| label: fig-apply
#| echo: false
#| out-width: 100%
#| fig-align: center
#| fig-cap: "`*apply()` function family summary (Best to read through this chapter first and then refer back to this figure)"
knitr::include_graphics("assets/R_applyfam.png")
```

## `apply()` {#apply}

::: callout-tip
`apply()` applies a function over one or more dimensions of an array of 2 
dimensions or more (this includes matrices) or a data frame:

`apply(array, MARGIN, FUN)`
:::

`MARGIN` can be an integer vector or character indicating the dimensions over 
which 'FUN' will be applied.

By convention, rows come first (just like in [indexing](#indexing)), therefore:

- `MARGIN = 1`: apply function on each ***row***
- `MARGIN = 2`: apply function on each ***column***


Let's create an example dataset:

```{r}
dat <- data.frame(Age = rnorm(50, mean = 42, sd = 8),
                  Weight = rnorm(50, mean = 80, sd = 10),
                  Height = rnorm(50, mean = 1.72, sd = 0.14),
                  SBP = rnorm(50, mean = 134, sd = 4))
head(dat)
```

Let's calculate the mean value of each column:

```{r}
dat_column_mean <- apply(dat, MARGIN = 2, FUN = mean) 
dat_column_mean
```

::: callout-tip
Hint: It is possibly easiest to think of the "MARGIN" as the 
***dimension you want to keep***.  
In the above case, we want the mean for each variable, i.e. we want to keep 
columns and collapse rows.
:::

Purely as an example to understand what `apply()` does, here is the equivalent
procedure using a for-loop. You notice how much more code is needed, and why
`apply()` and similar functions might be very convenient for many different 
tasks.

```{r}
dat_column_mean <- numeric(ncol(dat))
names(dat_column_mean) <- names(dat)

for (i in seq(dat)) {
  dat_column_mean[i] <- mean(dat[, i])
}
dat_column_mean
```

Let's create a different example dataset, where we record weight at multiple
timepoints:

```{r}
dat2 <- data.frame(ID = seq(8001, 8020),
                   Weight_week_1 = rnorm(20, mean = 110, sd = 10))
dat2[["Weight_week_3"]] <- dat2[["Weight_week_1"]] + rnorm(20, mean = -2, sd = 1)
dat2[["Weight_week_5"]] <- dat2[["Weight_week_3"]] + rnorm(20, mean = -3, sd = 1.1)
dat2[["Weight_week_7"]] <- dat2[["Weight_week_5"]] + rnorm(20, mean = -1.8, sd = 1.3)
dat2
```

Let's get the mean weight per week:

```{r}
apply(dat2[, -1], 2, mean)
```

Let's get the mean weight per individual across all weeks:

```{r}
apply(dat2[, -1], 1, mean)
```

::: callout-caution
`apply()` converts 2-dimensional objects to matrices before applying the
function. Therefore, if applied on a data.frame with mixed data types, it will
be coerced to a character matrix.

This is explained in the `apply()` documentation under "Details":

*"If X is not an array but an object of a class with a non-null dim value (such as a data frame), apply attempts to coerce it to an array via as.matrix if it is two-dimensional (e.g., a data frame) or via as.array."*
:::

Because of the above, see what happens when you use apply on the `iris` data.frame which contains 4 numeric variables and one factor:

```{r}
str(iris)
```

```{r}
apply(iris, 2, class)
```

## `lapply()` {#lapply}

::: callout-tip
`lapply()` applies a **function** on **each element of its input** and returns 
a **list** of the outputs.  
:::

Note: The 'elements' of a data frame are its columns (remember, a data frame is 
a list with equal-length elements). The 'elements' of a matrix are each cell 
one by one, by column. Therefore, unlike `apply()`, `lapply()` has a very 
different effect on a data frame and a matrix. `lapply()` is commonly used to 
iterate over the columns of a data frame.

::: callout-tip
`lapply()` is the only function of the `*apply()` family that always returns a 
list.
:::

```{r}
dat_median <- lapply(dat, median)
dat_median
```

To understand what `lapply()` does, here is the equivalent for-loop:

```{r}
dat_median <- vector("list", length = 4)
names(dat_median) <- colnames(dat)
for (i in 1:4) {
  dat_median[[i]] <- median(dat[, i])
}
dat_median
```

## `sapply()` {#sapply}

`sapply()` is an alias for `lapply()`, followed by a call to `simplify2array()`.  
(Check the source code for `sapply()` by typing `sapply` at the console).  


::: callout-note
Unlike `lapply()`, the output of `sapply()` is **variable**, when the argument `simplify` is set to `TRUE`, which is the default:  
It is the simplest R  object that can hold the data type/s resulting from the 
operations, i.e. a vector, matrix, data frame, or list.
:::

```{r}
dat_median <- sapply(dat, median)
dat_median
```

```{r}
dat_summary <- data.frame(Mean = sapply(dat, mean),
                           SD = sapply(dat, sd))
dat_summary
```

### Example: Get index of numeric variables

Let's use `sapply()` to get an index of numeric columns in dat2:

```{r}
head(dat2)
```

logical index of numeric columns:

```{r}
numidl <- sapply(dat2, is.numeric)
numidl
```

integer index of numeric columns:

```{r}
numidi <- which(sapply(dat2, is.numeric))
numidi
```

## Anonymous functions {#anonfns}

Anonymous functions are just like regular functions but they are not assigned 
to an object - i.e. they are not "named".  
They are usually passed as arguments to other functions to be used once, hence 
no need to assign them.

Anonymous functions are often used with the apply family of functions.  

Example of a simple regular function:

```{r}
squared <- function(x) {
  x^2
}
```

Since this is a short function definition, it can also be written in a single 
line without the curly braces:

```{r}
squared <- function(x) x^2
```

An anonymous function definition is just like a regular function - minus it is
not assigned:

```{r}
#| eval: false
function(x) x^2
```

Since R version 4.1 (May 2021), a compact anonymous function syntax is available,
where a single back slash replaces `function`:

```{r}
#| eval: false
\(x) x^2
```

Let's use the `squared()` function within `sapply()` to square the first four 
columns of the iris dataset. In these examples, we often wrap functions around 
`head()` which prints the first few lines of an object to avoid:

```{r}
head(dat[, 1:4])
dat_sq <- sapply(dat[, 1:4], squared)
head(dat_sq)
```

Let's do the same as above, but this time using an anonymous function:

```{r}
dat_sqtoo <- sapply(dat[, 1:4], function(x) x^2)
head(dat_sqtoo)
```

The entire anonymous function definition is passed to the `FUN` argument.

## `vapply()` {#vapply}

Much less commonly used (possibly *underused*) than `lapply()` or `sapply()`, 
`vapply()` allows you to specify what the expected output looks like - for 
example a numeric vector of length 2, a character vector of length 1.

This can have two advantages:

- It is safer against errors
- It will sometimes be a little faster

You add the argument `FUN.VALUE` which must be of the correct **type** and 
**length** of the expected result ***of each iteration***.

```{r}
vapply(dat, median, FUN.VALUE = 0.0)
```

Here, each iteration returns the median of each column, i.e. a numeric vector 
of length 1.

Therefore `FUN.VALUE` can be any numeric scalar.

For example, if we instead returned the range of each column, `FUN.VALUE` 
should be a numeric vector of length 2:

```{r}
vapply(dat, range, FUN.VALUE = rep(0.0, 2))
```

If `FUN.VALUE` does not match the returned value, we get an informative error:

```{r}
vapply(dat, range, FUN.VALUE = 0.0)
```

## `tapply()` {#tapply}

`tapply()` is one way (of many) to apply a function on **subgroups of data** 
as defined by one or more factors.

```{r}
dat[["Group"]] <- factor(sample(c("A", "B", "C"), size = 50, replace = TRUE))
head(dat)
```

```{r}
mean_Age_by_Group <- tapply(dat[["Age"]], dat[["Group"]], mean)
mean_Age_by_Group
```

The for-loop equivalent of the above is:

```{r}
# Get the group names we want to iterate over
groups <- levels(dat[["Group"]])

# Initialize an empty numeric vector 
mean_Age_by_Group <- vector("numeric", length = length(groups))

# Assign names to the initialized vector
names(mean_Age_by_Group) <- groups

# Iterate over the groups and assign the mean Age of each group to the vector
for (i in seq(groups)) {
  mean_Age_by_Group[i] <-
    mean(dat[["Age"]][dat[["Group"]] == groups[i]])
}
mean_Age_by_Group
```

## `mapply()` {#mapply}

The functions we have looked at so far work well when you iterating over 
elements of a single object.

`mapply()` allows you to execute a function that accepts two or more inputs, 
say `fn(x, z)` using the i-th element of each input, and will return:  
`fn(x[1], z[1])`, `fn(x[2], z[2])`, ..., `fn(x[n], z[n])`

Let's create a simple function that accepts two numeric arguments, and two 
vectors length 5 each:

```{r}
raise <- function(x, power) x^power
x <- 2:6
p <- 6:2
```

Use mapply to raise each `x` to the corresponding `p`:

```{r}
out <- mapply(raise, x, p)
out
```

This is only for demonstration. In practice, you would use vectorization:

```{r}
x^p
```

The equivalent for-loop is:

```{r}
out <- vector("numeric", length = 5)
for (i in seq(5)) {
  out[i] <- raise(x[i], p[i])
}
out
```

## `*apply()`ing on matrices vs. data frames

To consolidate some of what was learned above, let's focus on the difference 
between working on a matrix vs. a data frame.  
First, let's create a matrix and a data frame with the same data:

```{r}
amat <- matrix(21:70, nrow = 10)
colnames(amat) <- paste0("Feature_", 1:ncol(amat))
amat
adf <- as.data.frame(amat)
adf
```

We've seen that with `apply()` we specify the dimension to operate on and it 
works the same way on both matrices and data frames:

```{r}
apply(amat, 2, mean)
apply(adf, 2, mean)
```

However, `sapply()` (and `lapply()`, `vapply()`) acts on ***each element*** of 
the object, therefore it is not meaningful to pass a matrix to it:

```{r}
sapply(amat, mean)
```

The above returns the mean of each element, i.e. the element itself, which is 
meaningless.

Since a data frame is a list, and its columns are its elements, it works great 
for column operations on data frames:

```{r}
sapply(adf, mean)
```

If you want to use `sapply()` on a matrix, you could iterate over an integer 
sequence as shown in the previous section:

```{r}
sapply(1:ncol(amat), function(i) mean(amat[, i]))
```

This is shown to help emphasize the differences between the function and the 
data structures. In practice, you would use `apply()` on a matrix.

## Iterating over a sequence instead of an object

With `lapply()`, `sapply()` and `vapply()` there is a very simple trick that 
may often come in handy:

Instead of iterating over elements of an object, you can iterate over an integer 
index of whichever elements you want to access

This approach is closer to how we would use an integer 
sequence in a `for` loop.

It will be clearer through an example, where we get the mean of each column:

The straightforward use of `sapply()` to get the mean of every column:

```{r}
sapply(dat, function(i) mean(i))
```

Just for demonstraion, iterate over integer index of the elements:

```{r}
sapply(1:4, function(i) mean(dat[, i]))
```

Notice that in the above approach you are not passing the object (`dat`) to `lapply()`. You therefore need to access it within the anonymous function.

Equivalent to:

```{r}
for (i in 1:4) {
  mean(dat[, i])
}
```

## `replicate()` {#replicate}

`replicate()` is a wrapper around `sapply()` that is useful when you want to
repeat an expression multiple times, for example to perform a simulation study.

```{r}
replicate(5, mean(rnorm(100)))
```

This is equivalent to:

```{r}
sapply(1:5, function(i) mean(rnorm(100)))
```

## `Map()` {#map}

`Map()` is a wrapper around `mapply()` with `SIMPLIFY = FALSE`, making it more predictable (always returns a list, like `lapply()`):

```{r}
Map(function(x, y) x + y, 1:5, 6:10)
```
