---
execute: 
  warning: false
knitr:
  opts_knit:
    global.par: true
  opts_chunk: 
    comment: ''
    fig.width: 5
    fig.height: 5
---
# Crash Course {.unnumbered}
```{r}
#| echo: false
par(family = "Inter")
```
This is the online material for the UCSF DCR 'Intro to R' selective.

```{r fansi}
#| echo: false
#| output: asis
old.hooks <- fansi::set_knit_hooks(knitr::knit_hooks)
```

## Introduction & Format

This is a brief introduction to the R programming language for health data 
science.
It covers basic commands to allow you to read in data, perform common 
manipulations, plot data and run common tests.
<br><br>
[R](https://en.wikipedia.org/wiki/R_(programming_language)) is a 
[programming language](https://en.wikipedia.org/wiki/Programming_language) 
developed specifically for statistical computing and graphics.
<br><br>
It is often mis-characterized as a "statistical package", similar to SPSS, for 
example, but as a full programming language it has far more extensive 
functionality.
<br><br>
For a more thorough coverage of the topic, see the main part of this
[book](https://class.lambdamd.org/pdsr/).
<br><br>
Links to book chapters will be provided throughout these notes for those 
interested in reading up further into particular topics.
<br><br>
R can be used to perform most, if not all, operations in statistics, data science,
machine learning. This is not a crash course in statistics, data science, or 
machine learning, but an introduction to the language itself.
<br><br>
If you have any questions, write them down and make sure to ask them during 
each section's Q&A.

## Data pipelines

This is only a generic, high-level example of a data pipeline.

Each of the nodes in the diagram may contain a number of sub-steps, dependent on the
data and the goal(s) of the analysis.

```{r}
#| label: fig-datapipeline
#| echo: false
#| out-width: 66%
#| fig-align: center
#| fig-cap: Example high-level data pipeline
knitr::include_graphics("./assets/DataPipeline.png")
```

::: callout-important
Within a single project, you may need to create multiple variations of your data
pipeline, since different questions may require different approaches that in turn
require different preprocessing.
:::

## The R language

- The **S** statistical programming language was developed in 1976 at Bell Labs by 
John Chambers and others "to turn ideas into software, quickly and faithfully”.

- **R** is an [open source](https://en.wikipedia.org/wiki/Open_source) implementation of 
S developed by Ross Ihaka and Robert Gentleman at the University of Auckland, New Zealand; 
initial version released in 1995.

- Supported by the 
[R Foundation for Statistical Computing](https://www.r-project.org/foundation/), 
developed by the 
[R Core Team and the contributions of many others](https://www.r-project.org/contributors.html).

- Official part of the [Free Software Foundation’s](https://www.fsf.org) 
[GNU project](https://www.gnu.org/) available under 
[GNU GPL v2](https://www.gnu.org/licenses/old-licenses/gpl-2.0.html).

- Latest version [4.3.3 released 2024-02-29](https://cloud.r-project.org/) (as of writing)

## Free Open Source Software

**[Free Open Source Software (FOSS)](https://en.wikipedia.org/wiki/Free_and_open-source_software)**
is software that is "free" and "open source" - what does that really mean?

**[What is Free Software?](https://www.fsf.org/about/what-is-free-software)**

> "Free software is software that gives you, the user, the freedom to share, 
>  study and modify it. We call this free software because the user is free."
> 
> `r tufte::quote_footer('--- Free Software Foundation')`

**[What is Open Source Software](https://opensource.com/resources/what-open-source)**

> "Open source software is software with source code that anyone can 
> inspect, modify, and enhance."
>
> `r tufte::quote_footer('--- opensource.com')`

**Why is FOSS important?**
<br><br>
There are many advantage to FOSS, in general. Some of those, that are highly 
relevant in biomedical research and clinical applications include the promotion
of **inclusion**, **transparency**, and **trustworthiness.**

## Integrated Development Environments (IDEs) for R

An [Integrated Development Environment (IDE)](https://en.wikipedia.org/wiki/Integrated_development_environment)
is a software application that allows you to write and run code.
<br><br>
Two popular and powerful IDEs for R are:

- [RStudio](https://posit.co/products/open-source/rstudio/)
- [Visual Studio Code](https://code.visualstudio.com/) with the [R Extension](https://github.com/REditorSupport/vscode-R)

## The R core language & package ecosystem

R boasts extensive quantitative and statistical functionality in the base 
system.

This functionality is extended through a vast ecosystem of external packages.

- **CRAN**: The Comprehensive R Archive Network (https://cran.r-project.org/): 
[20510 packages](https://cran.r-project.org/web/packages/)
- **Bioconductor**: Bioinformatics-related packages and more 
(https://www.bioconductor.org/): 
[2266 packages](https://bioconductor.org/about/release-announcements/)
- **GitHub**: The largest source code host (>200M repositories; https://github.com/): 
Hosts most if not all of the above and a lot more. Also hosts a copy of the entire CRAN.

## Reading in Data

We shall use a heart failure dataset as an example. It is freely available at 
the [UCI repository](https://archive.ics.uci.edu/):

[Heart Failure Clinical Records Dataset](https://archive.ics.uci.edu/ml/machine-learning-databases/00519/heart_failure_clinical_records_dataset.csv)
<br><br>
You can either download it to a local folder or read it directly from the internet. 
For this exercise, download it to a local folder of your choice.

### CSV

Assuming you have downloaded the file to your local disk under "/Data/UCI", you can
read it into R using the `read.csv()` command:

```{r}
#| eval: false
dat <- read.csv("/Data/UCI/heart_failure_clinical_records_dataset.csv")
```

An important optional argument of the `read.csv()` command is `na.strings`: it lets you
define which string(s) should be considered as missing data. Some common strings used to 
indicated missing data are the empty string `""` or `NA`.
<br><br>
The above file does not contain any missing data, so the following is only an example of
how you would define the `na.strings` argument if you wanted to read in a file that 
includes missing data coded either by an empty string ("") or `NA`:

```{r}
#| eval: false
dat <- read.csv("/Data/UCI/heart_failure_clinical_records_dataset.csv",
                na.strings = c("", "NA"))
```

`read.csv()` can also read files directly from the internet:

```{r}
dat <- read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/00519/heart_failure_clinical_records_dataset.csv")
```

::: callout-tip
If reading directly from the internet, you may get an SSL error (especially on Windows
systems). In that case, you can either download the file using a browser and reading it 
from disk, or you can try installing/updating your OpenSSL library.
:::

The `head()` function prints the first few lines of an object:

```{r}
head(dat)
```

The `read.csv()` function read the contents of the CSV file into an R object known
as a `data.frame`. This is essentially a table like a spreadsheet, where each row
represents a case (e.g. a subject, patient, etc.) and each column represents a
variable (e.g. Patient ID, Age, Sex, Dx, etc.)

### XLSX

To read in XLSX files, you need to install an external package. Multiple packages can
read such files, including 
[`openxlsx`](https://cran.r-project.org/web/packages/openxlsx/) and 
[`readxl`](https://cran.r-project.org/web/packages/readxl/).

To install an external package, use the `install.packages()` command:

```{r}
#| eval: false
install.packages('openxlsx')
```

To use the package, you need to load it into your R session using the `library()` command:

```{r}
#| eval: false
library(openxlsx)
```

```{r}
#| eval: false
dat <- read.xlsx("/Data/UCI/heart_failure_clinical_records_dataset.xlsx")
```

Alternatively, you can use the `openxlsx::` prefix to call the function directly, without
loading the package into your session:

```{r}
#| eval: false
dat <- openxlsx::read.xlsx("/Data/UCI/heart_failure_clinical_records_dataset.xlsx")
```

::: callout-note
If you want to try the above command, open the CSV file using Excel and save it as
an XLSX file.
:::

Read more about reading in data in @sec-basedataio.

## Inspect & summarize data

Get data dimensions:

```{r}
dim(dat)
```

Look at the data structure, including data types:

```{r}
str(dat)
```

Get summary of dataset:

```{r}
summary(dat)
```

## Data types

A vector in R is a collection of items of the same type (e.g. numbers or characters)
of any length, including 1 (i.e. there is no distinction between a scalar and a vector).
<br><br>
Data types in R are essentially different types of vectors.
<br><br>
R includes a number of builtin data types. Some of the most common are:

- **numeric** (e.g. 1.2, 5.9, 11.4)
- **character** (e.g. "SF", "SD")
- **logical** (e.g. "TRUE", "FALSE")

To create a new vector you can use the assignment operator `<-` or `=`.

```{r}
a <- 4
```

You can print the contents of an object just by typing its name in the console:

```{r}
a
```

is the same as:

```{r}
print(a)
```

A comment begins with `#`. Anything placed after this will not be executed.
**Use comments to document every step in your code.**

Use `c()` to combine multiple values:

```{r}
b <- c(3, 5, 7)
```

```{r}
b
```

To create a character vector, use single or double quotes around each element:

```{r}
dept <- c("ED", "Neuro", "Peds")
```

```{r}
dept
```

::: callout-note
Learn more about R data types in @sec-datatypes.
:::

## Data Structures

R includes multiple different data structures. Think of a data structure as a
container that holds one or more vectors of data.

The data.frame is one of the most common data structures for statistics, because
it can hold vectors of different kinds, e.g. numeric, categorical, and character.

::: callout-note
Learn more about R data structures in @sec-datastructures.
:::

### Factors

Factors in R are used to store categorical variables and therefore have many 
important uses in statistics / data science / machine learning.
<br><br>
Let's convert binary categorical variables in our dataset to factors:

```{r}
dat$anaemia <- factor(dat$anaemia)
dat$diabetes <- factor(dat$diabetes)
dat$high_blood_pressure <- factor(dat$high_blood_pressure)
dat$sex <- factor(dat$sex)
dat$smoking <- factor(dat$smoking)
dat$DEATH_EVENT <- factor(dat$DEATH_EVENT)
```

(Cross)Tabulate counts of factor levels with `table()`:

```{r}
table(dat$anaemia)
```

```{r}
table(dat$anaemia, dat$diabetes)
```

::: callout-note
Learn more about factors in @sec-factors.
:::

## Working with data.frames

### Indexing

To index a data.frame means to select one or more rows and one or more rows. You do this
using bracket notation, where the index of rows is followed by the index of columns.

For example, to index the first 10 rows and first 3 columns:

```{r}
dat[1:10, 1:3]
```

To index all rows or all columns, leave the corresponding index empty.

For example, index all rows of the first column:

```{r}
dat[, 1]
```

Index all columns of the 12th row:

```{r}
dat[12, ]
```

Another way to select a column of a data.frame is by name.

Note, we wrap the indexing of the data.frame around `head()` to avoid printing the
entire column.

```{r}
head(dat[, "age"])
```

or using the `$` notation:

```{r}
head(dat$age)
```

::: callout-note
Learn more about data.frames in @sec-dfbasics.
:::

## Functions in R

R includes a very large number of functions in the base language, which allow
you to do a whole lot of data cleaning & manipulation, plotting, and modeling.
<br><br>
A function is called by typing its name, followed by a parenthesis with or without
arguments.
<br><br>
For example, to get the mean of the `b` vector from above:

```{r}
mean(b)
```

::: callout-note
Learn how to write your own functions in @sec-functions.
:::

## Summarize data

A lot of statistical functionality is built in to the language. You can easily get
summary statistics of variables using functions like `mean()`, `median()`, `range()`,
`max()`, `min()`.

### Continuous variables

```{r}
mean(dat$age)
median(dat$age)
min(dat$age)
max(dat$age)
summary(dat$age)
```

### Categorical variables

The `table()` function gives you the counts for each level/unique value of a variable:

```{r}
table(dat$sex)
table(dat$smoking)
```

## Aggregate data

R includes a powerful function called `aggregate()` that allows you to aggregate
data based on one or more variables.
<br><br>
As a simple example, let's calculate the mean age by sex:

```{r}
aggregate(age ~ sex, data = dat, FUN = mean)
```

::: callout-note
Learn more about data aggregation in Chapter @sec-aggregate.
:::

## Plots

R has powerful and extensive support for graphics built in to the core language.

Here, we look at how to produce some common and important plot types:

### Histogram

Draw a histogram using `hist(x)`

```{r}
hist(dat$age, col = "lightseagreen")
```

### Boxplot

Draw a boxplot using `boxplot(x)`

```{r}
boxplot(dat$ejection_fraction, col = "lightseagreen")
```

You can use a simple formula notation to draw boxplots grouped by a categorical
variable using `~` symbol:`continuous variable ~ grouping variable`

```{r}
boxplot(dat$serum_sodium ~ dat$smoking, col = "lightseagreen")
```

### Scatter plot

Draw a scatter plot using `plot(x, y)`

```{r}
plot(dat$age, dat$serum_sodium, col = "lightseagreen")
```

```{r}
plot(dat$age, dat$serum_sodium, col = "lightseagreen")
```

::: callout-note
Learn more about plotting in Chapters @sec-basegraphics, @sec-colors, @sec-ggplot2, and
@sec-plotly.
:::

## Hypothesis Testing

### T-test

Are the means of two groups significantly different?
We use a simple formula notation as with the boxplot above to split values by group:

```{r}
t.test(dat$serum_sodium ~ dat$sex)
```


### Chi-squared test

Test for association between two categorical variables:

```{r}
chisq.test(dat$smoking, dat$DEATH_EVENT)
```

```{r}
smoking_sex <- chisq.test(dat$smoking, dat$sex)
smoking_sex
```

You can print the observed frequencies:

```{r}
smoking_sex$observed
```

and the expected frequencies:

```{r}
smoking_sex$expected
```

## Saving data

### CSV

You can write R objects to CSV file using `write.csv()'. These can be read 
directly into any program or language that can handle data.

```{r eval = FALSE}
write.csv(dat, "~/Data/dat.csv")
```

### RDS

You can also directly save any R object as an "RDS" file. These can be read into
R. The advantage is that they are compressed and therefore may take a lot less space,
and will maintain any type conversion you have performed. 

```{r eval = FALSE}
saveRDS(dat, "~/Data/dat.rds")
```

::: callout-note
Learn more about data.frames in Chapter @sec-basedataio.
:::

## Builtin Documentation

After you've successfully installed R and RStudio, one of the first things to know is 
how to access and search the builtin documentation.  

### Get help on a specific item

If you know the name of what you're looking for (an R function most commonly, but 
possibly also the name of a dataset, or a package itself), just type `?` followed by 
the name of said function, dataset, etc. in the R prompt:

```{r}
#| eval: false
?sample
```

In RStudio, the above example will bring up the documentation for the `sample` function 
in the dedicated "Help" window, commonly situated at the bottom right (but can be moved 
by the user freely). If you are running R directly at the system shell, the same 
information is printed directly at the console.  
Try running the above example on your system.

### Search the docs

If you do not know the name of what you are looking for, you can use double question 
marks, `??`, followed by your query (this is short for the `help.search` command that 
provides a number of arguments you can look up using `?help.search`):

```{r}
??bootstrap
```

## Introduction to Programming

**Everyone can code**
<br><br>
Everyone can learn how to program.
Whether it takes you a minute or a longer to learn how to write the code
neessary to perform a certain task, you *can* master it. Do not compare 
yourself to others.
<br><br>
As with most things: a) motivation is key and b) you get good with practice.
<br><br>
You are here because, presumably, you have important questions to answer using data.
<br><br>
Knowing how to code even a little can give you the power to work with your own data 
without depending fully on someone else. At the same time, it makes collaborating with
other scientists, clinicians, statisticians, etc. much more effective & efficient.
<br><br>
You don't learn to code by reading books or slides, you learn to code by doing.
Ideally, work on data you are interested in, trying to answer questions you care
about.
<br><br>
Learning to code can be exciting and frustrating. It's similar to learning to
play an instrument - like the guitar. At first, it may seem unnatural and
annoying, but you can get better at it rather quickly and it's very rewarding 
and satisfying.
<br><br>
It is important to be able to **read** ***and*** **write** code.
<br><br>
**Coding requires logic & creativity**
<br><br>
Programming is based on logic and learning to code helps structure your thoughts,
your experiments, your reasoning.
<br><br>
Programming languages are human constructs. They were built to answer important needs.
They develop with time, as needs evolve. Many design choices are explained historically,
a few may be more arbitrary.
<br><br>
**Everything is a series of simple, manageable steps**
<br><br>
Remember this: the shortest and simplest piece of code up to the longest and most complex
is made of a sequence of relatively simple steps.
<br><br>
Always be clear about what you want to achieve first, then break it down step-by-step
in code. Each step is relatively easy to figure out and **check** that it is working
as desired. A common mistake is to write multiple steps in one go, and then have 
a hard time figuring out where an error occurs or why.
<br><br>
To get from A to B using code there are virtually always multiple different paths.
That can be confusing or perhaps frustrating, but it is also exciting.
Programming to the uninitiated may seem a a rigid exercise but it is highly creative.
Remember that there objective and subjective differences to consider when designing
a code to take you from A to B. Suppose you have two approaches that have the same input 
and produce the same output. An objective difference would be how fast each completes the
task and how many lines of code or number of function calls it requires. A subjective
difference would be the programming style / syntax used / whether the code is 
"elegant" - a pretty broad topic.
<br><br>
**Errors happen often but they are not all the same**
<br><br>
Errors in code happen all the time, it is part of the process. But, not all errors
are the same.
<br>
There are errors that:
<br><br>

- **stop execution** of code and **produce an error message**. This is the best case 
scenario because it can't go unnoticed and you are forced to address them.
- **do not stop execution** of code but **produce a warning**. These warnings are very
 often ignored. They may be serious or trivial, but must be investigated.
- **do not stop execution** and **produce no warnings**. This is the worst kind of error
since it is silent. These can be common and the only way to recognize them is
to check the output. 
<br>
*Always read all error & warning messages.*
<br><br>
**Details matter (a lot)**
<br><br>
A lot of mistakes occur, especially in the beginning, because a variable or function name 
is misspelled.
<br><br>
**Always check yourself**
<br><br>
Remember: the most important thing is to ensure you produce correct results at 
each step. Don't place writing smart or elegant code above writing correct code. 
Spend time reviewing your code. If possible, have one or more other people review your 
code.
<br><br>
**Document everything**
<br><br>
Make a habit from the very beginning to always use comments in your code to 
explain what you are trying to achieve and why. You will often need to revisit 
your code after some time has passed. Life will be very hard if it's not clear 
what is happening and why. 
<br><br>
Programming is largely a team sport. A lot of code is written collaboratively
or is used by people other than the author. Again, comprehensive documentation 
is super important.
<br><br>
**Help is at your fingertips**
<br><br>
Whether you are just starting out or you are a seasoned programmer, you have
many sources of information to help you troubleshoot or learn new skills.
<br><br>

- Use the built-in documentation! Builtin help files, written by the code author,
are almost always the best place to start. Their quality will vary, but they
are often sufficient to learn how to use a function properly.
- Programming is largely an online activity. All documentation and source code
(of open source projects) is available online. Most errors or difficulties you 
encounter have been encountered many times before by others. A very large number
of Q&A sites, blogs, forums are a web search away. Copy-pasting an error message 
into a search engine will often result in multiple hits.
