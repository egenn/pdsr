---
execute:
  cache: true
knitr:
  opts_chunk: 
    comment: ''
---
# Aggregate {#sec-aggregate}

R includes a number of commands to apply functions on splits of your data.
`aggregate()` is a powerful tools to perform such "group-by" operations.
<br><br>
The function accepts either:

- a formula as the first argument and a data.frame passed to the `data` argument
- an R objects (vector, data.frame, list) as the first argument and one or more factors passed to the `by` argument 

We shall see how to perform each operation below with 
each approach. 
<br><br>
The formula interface might be easier to work with 
interactively on the console. 
Note that while you *can* programmatically create a formula, it is easier to use
vector inputs when calling `aggregate()` programmatically. 
<br><br>
For this example, we shall use the penguin data from the **palmerpenguins**
package:

```{r}
library(palmerpenguins)
str(penguins)
```


## Single variable by single grouping

Note that the formula method defaults to na.action = na.omit

Using the formula interface:

```{r}
aggregate(bill_length_mm ~ species,
          data = penguins,
          mean, na.rm = TRUE)
```

Using R objects directly:

```{r}
aggregate(penguins$bill_length_mm,
          by = list(penguins$species),
          mean, na.rm = TRUE)
```

Note that, unlike the formula notation, if your input is a vector which is
unnamed, the output columns are also unnamed.

If instead of passing a vector, you pass a data.frame or list with one or more
named elements, the output includes the names:

```{r}
aggregate(penguins["bill_length_mm"],
          by = penguins["species"],
          mean, na.rm = TRUE)
```

By creating a list instead of indexing the given data.frame also allows you to 
set custom names:

```{r}
aggregate(list(`Bill length` = penguins$bill_length_mm),
          by = list(Species = penguins$species),
          mean, na.rm = TRUE)
```

## Multiple variables by single grouping

Formula notation:

```{r}
aggregate(cbind(bill_length_mm, flipper_length_mm) ~ species,
          data = penguins,
          mean)
```

Objects:

```{r}
aggregate(penguins[, c("bill_length_mm", "flipper_length_mm")],
          by = list(Species = penguins$species),
          mean, na.rm = TRUE)
```

## Single variable by multiple groups

Formula notation:

```{r}
aggregate(bill_length_mm ~ species + island, data = penguins, mean)
```

Objects:

```{r}
aggregate(penguins["bill_length_mm"],
          by = list(Species = penguins$species, 
                    Island = penguins$island),
          mean, na.rm = TRUE)
```

## Multiple variables by multiple groupings

Formula notation:

```{r}
aggregate(cbind(bill_length_mm, flipper_length_mm) ~ species + island,
          data = penguins, mean)
```

Objects:

```{r}
aggregate(penguins[, c("bill_length_mm", "flipper_length_mm")],
          by = list(Species = penguins$species, 
                    Island = penguins$island),
          mean, na.rm = TRUE)
```

## Using `with()`

R's `with()` allows you to use expression of the form `with(data, expression)`.
`data` can be a data.frame, list, or environment, and within the expression you can refer to any 
elements of `data` directly by their name.

For example, `with(df, expression)` means you can use the data.frame's
column names directly within the expression without the need to use `df[["column_name"]]` or 
`df$column_name`:

```{r}
with(penguins,
     aggregate(list(`Bill length` = bill_length_mm),
               by = list(Species = species),
               mean, na.rm = TRUE))
```

## See also

- [`tapply()`](Apply.qmd#tapply) for an alternative methods of applying function on 
subsets of a single variable (probably faster).
- For large datasets, it is recommended to use [data.table](DataTable.qmd) for 
fast group-by data summarization.
