---
knitr:
  opts_chunk:
    comment: ""
    cache: true
---
# Base Data I/O {#sec-basedataio}

```{r}
#| echo: false
#| out.width: 80%
#| fig-cap: "Common Data Input/Output commands in R. See next section for reading and writing XLSX files."
#| fig-align: "center"
knitr::include_graphics("assets/R_dataio.png")
```

Tabular data typically consists of rows and columns, where the rows correspond
to different cases (e.g. patients) and the columns correspond to different
variables a.k.a. covariates a.k.a. features. Such data can be stored in
multiple different file formats.

This includes **plain text** files, often in a 
[delimited format](https://en.wikipedia.org/wiki/Delimiter-separated_values){target="_blank"}, and **binary** files.

Common delimited format files includes comma- and tab-separated values 
([CSV](https://en.wikipedia.org/wiki/Comma-separated_values){target="_blank"}, 
[TSV](https://en.wikipedia.org/wiki/Tab-separated_values){target="_blank"}).

Binary file formats can be either open (e.g. R's RDS format) or 
proprietary (e.g. Microsoft's XLS).

R includes built-in support for reading and writing multiple file formats, 
including delimited format files and its own binary RDS and RData files.

Third party packages add support for working with virtually any file type.  

## CSV

### Read local CSV

`read.table()` is the core function that reads data from formatted text files 
in R, where cases correspond to lines and variables to columns. Its many 
arguments allow to read different formats.
<br><br>
`read.csv()` is an alias for `read.table()` that defaults to commas as 
separators and dots for decimal points. (Run `read.csv` in the console to print 
its source read the documentation with `?read.table`).
<br><br>
Some important arguments for `read.table()` listed here with their default 
values for `read.csv()`:

* `sep = ","`: Character that separate entries. Default is a comma; use `sep = "\t"` for tab-separated files (default setting in `read.delim()`)
* `dec = "."`: Character for the decimal point. Default is a dot; in some cases 
where a comma is used as the decimal point, the entry separator `sep` may be a 
semicolon (default setting in `read.csv2()`)
* `na.strings = "NA"`: Character vector of strings to be coded as "NA"
* `colClasses = NA`: Either a character vector defining each column's type 
(e.g. `c("character", "numeric", "numeric")` recycled as necessary *or* a named 
vector defining specific columns' types (e.g. `c(ICD9 = "character", 
Sex = "factor", SBP = "numeric", DOB = "Date")`). Unspecified columns are
automatically determined. Note: Set a column to `"NULL"` (with quotes) to exclude 
that column.
* `stringsAsFactors = TRUE`: Will convert all character vectors to factors

```{r}
#| eval: false
men <-  read.csv("../Data/pone.0204161.s001.csv")
```

::: callout-important
***Windows users***: When working in Windows, system paths should use either single forward slashes (`/`) 
or double backslashes (`\\`). The customary Windows path separator, a single backslash (`\`),
will not work in R.

For example, use  
`C:/Users/username/Data/dat.rds` or `C:\\Users\\username\\Data\\dat.rds`,  
**NOT** `C:\Users\username\Data\dat.rds`.
:::

### Read CSV from the web

`read.csv()` can directly read an online file. In the second example below, we 
also define that missing data is coded with `?`  using the `na.strings` 
argument:

```{r}
#| eval: false
hf <- read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/00519/heart_failure_clinical_records_dataset.csv"
```

The above file is read directly from the UCI ML repository
(See [data repositories](https://rtemis.lambdamd.org/resources.html#datasets)). 

### Read zipped data from the web 

#### using `gzcon()` and `read.csv()`

`read.table()` /`read.csv()` also accepts a "connection" as input.  
Here we define a connection to a zipped file by nesting `gzcon()` and `url()`:

```{r}
#| eval: false
con <- gzcon(url("https://github.com/EpistasisLab/pmlb/raw/master/datasets/breast_cancer_wisconsin/breast_cancer_wisconsin.tsv.gz"),
             text = TRUE)
```

We read the connection and specify the file is tab-separated, or call 
`read.delim()`:

```{r}
#| eval: false
bcw <- read.csv(con, header = TRUE, sep = "\t")

#same as
bcw <- read.delim(con, header = TRUE)
```

### Write to CSV

Use the `write.csv()` function to write an R object (usually data frame or 
matrix) to a CSV file. Setting `row.names = FALSE` is usually a good idea. 
(Instead of storing data in rownames, it's usually best to create a new column.)

```{r}
#| eval: false
write.csv(iris, "../Data/iris.csv", row.names = FALSE)
```

Note that in this case we did not need to save row names (which are just 
integers 1 to  150 and would add a useless extra column in the output)

## RDS

### Read single R object from an RDS file

To load an object saved in an RDS file, you read it with `readRDS()` and must
assign it to an object:

```{r}
#| eval: false
iris_fromFile <- readRDS("iris.rds")
all(iris == iris_fromFile)
```

To read an RDS file directly from a web server, you surround the URL with
`url()`:

```{r}
#| eval: false
dat <- readRDS(
         url("https://rtemis.org/pdsr/data/synth2208.rds")
       )
```

### Write single R object to an RDS file

You can write any single R object as an RDS file so that you can recover it 
later, share it, etc. Remember that since a list can contain any number of 
objects of any type, you can save essentially any collection of objects in an 
RDS file.

For multiple objects, see also the `save.image()` command below.

```{r}
#| eval: false
saveRDS(bcw, "bcw.rds")
```

## RData

### Write multiple R objects to an RData file

You can use the `save()` function to save multiple R objects to a single .RData
file:

```{r}
#| eval: false
mat1 <- sapply(seq_len(10), function(i) rnorm(500))
mat2 <- sapply(seq_len(10), function(i) rnorm(500))
save(mat1, mat2, file = "./mat.RData")
```

Note: we will learn how to use `sapply()` later under 
[Loop functions](#sec-loopfns)

To load the variables in the RData file you saved, use the `load()` command:

```{r}
#| eval: false
load("./mat.RData")
```

Note that `load()` adds the objects to your workspace using their original 
names. You do not assign them to a new object, unlike with the `readRDS()` call 
above.

### Write your entire workspace to an RData file

You can save your entire workspace to a RData file using the `save.image()` 
function:

```{r}
#| eval: false
save.image("workspace_2022-08-10.RData")
```

### Load .Rdata

Same as above, to re-load the workspace saved in the `.RData` file, use the 
`load()` command:

```{r}
#| eval: false
load("workspace_2022-08-10.RData")
```

## System commands

Get working directory with `getwd()`:

```{r}
#| eval: false
getwd()
```

Set the working directory with `setwd()`:

```{r}
#| eval: false
setwd("/Data/")
```

You can set a different working directory with `setwd()`.

List files in current directory:

```{r}
#| eval: false
dir()
```

You can send operating system commands using `system()`:

```{r}
system("uname -a")
```

Note: See issue [here](https://stackoverflow.com/questions/27388964/rmarkdown-not-outputting-results-of-system-command-to-html-file){target="_blank"}.

## Read other common tabular data third-party formats

| File type          | File Extension          | `package::function()`   |
| ------------------:|------------------------:|:------------------------|
| JSON               | `.json`                 | `jsonlite::read_json()` |
| Stata data         | `.dta`                  | `haven::read_dta()`     |
| SPSS data          | `.por`, `.sav`, `.zsav` | `haven::read_spss()`    |
| SAS transport file | `.xpt`                  | `haven::read_xpt()`     |
| Matlab data        | `.mat`                  | `rmatio::read.mat()`    |
| Apache Arrow       | `.arrow`                | `arrow::read_arrow()`   |
| Apache Arrow       | `.feather`              | `arrow::read_feather()` |
| Apache Arrow       | `.parquet`              | `arrow::read_parquet()` |
| Weka ARFF          | `.arff`                 | `farff::readARFF()`     |


## See also

- [fast data I/O with data.table](dtDataIO.qmd)

## Resources

- [R Data Import/Export](https://cran.r-project.org/doc/manuals/r-release/R-data.html#XML){target="_blank"}
by the R Core Team.
