---
knitr:
  opts_chunk:
    comment: ""
---
# Working with Data frames {#sec-dfbasics}

Core data.frame operations:

+-------------------------+--------------------------------------------------------+
| Operation               | Functions                                              |
+========================:+:=======================================================+
| **Filter**              | - `[`                                                  |
|                         | - `subset(x)`                                          |
+-------------------------+--------------------------------------------------------+
| **Find duplicate rows** | - Get index of duplicated: `duplicated(x)`             |
|                         | - Keep only unique rows: `unique(x)`                   | 
+-------------------------+--------------------------------------------------------+
| **Select**              | - `[`; `[[`; `$`;                                      |
|                         | - `subset(df, select=)`                                |
+-------------------------+--------------------------------------------------------+
| **Add column(s)**       | - `$`, `[`, `[[`                                       |
|                         | - `cbind(x1, x2)`                                      |
|                         | - `transform(x, new=)`                                 |
+-------------------------+--------------------------------------------------------+
| **Add row(s)**          | - `rbind(...)`                                         |
+-------------------------+--------------------------------------------------------+
| **Reshape**             | - Long-to-Wide: `reshape(direction = "wide")`          |   
|                         | - Wide-to-Long: `reshape(direction = "long")`          |
+-------------------------+--------------------------------------------------------+
| **Join**                | - Inner: `merge(x, y, all=FALSE)`                      |
|                         | - Outer: `merge(x, y, all=TRUE)`                       |
|                         | - Left: `merge(x, y, all.x=TRUE)`                      |
|                         | - Right: `merge(x, y, all.y=TRUE)`                     |
+-------------------------+--------------------------------------------------------+

## Synthetic Data

```{r}
set.seed(2022)
n <- 10
dat <- data.frame(
  PID = 8001:8010,
  Sex = sample(c("Male", "Female"), size = n, replace = TRUE),
  Age = rnorm(n, mean = 58, sd = 12),
  Height = rnorm(n, mean = 178, sd = 10),
  Weight = rnorm(n, mean = 80, sd = 12),
  Group = sample(c("A", "B"), size = n, replace = TRUE)
)
```

## Filter

Filter & select operations are performed by indexing rows and cases, 
respectively.

## Column and row names

Let's start with a simple example data.frame:

```{r}
df <- data.frame(PID = c(111:119),
                 Hospital = c("UCSF", "HUP", "Stanford",
                             "Stanford", "UCSF", "HUP", 
                             "HUP", "Stanford", "UCSF"),
                Age = c(22, 34, 41, 19, 53, 21, 63, 22, 19),
                Sex = c(1, 1, 0, 1, 0, 0, 1, 0, 0))
df
```

The optional `row.names` argument (see `data.frame` usage in the R 
documentation) can be used to define row names at the time of the data frame 
creation. It accepts either:

- a single integer or a character specifying a column of the data.frame being 
created whose values should be used as row names, or 
- a vector of values (character or integer) of the row names to be used

For example, we can use the "PID" column:

```{r}
df <- data.frame(PID = c(111:119),
                 Hospital = c("UCSF", "HUP", "Stanford",
                             "Stanford", "UCSF", "HUP", 
                             "HUP", "Stanford", "UCSF"),
                Age = c(22, 34, 41, 19, 53, 21, 63, 22, 19),
                Sex = c(1, 1, 0, 1, 0, 0, 1, 0, 0),
                row.names = "PID")
```

:::{.callout-note}
It is recommended to **not** use/depend on row names to identify or index 
data.frames, and instead include a column of case IDs.
:::

We can get column names and row names with `colnames()` and `rownames()`, 
respectively:

```{r}
colnames(df)
rownames(df)
```

To set new column or row names use the form:

`colnames(df) <- new.colnames` 

`rownames(df) <- new.rownames` 

where `new.colnames` and `new.rownames` is a character vector.

You can rename all columns/rows or use indexing to replace specific names:

Rename all rows:

```{r}
rownames(df) <- paste0("Patient_", 1:9)
df
```

Rename first two columns:

```{r}
colnames(df)[1:2] <- c("Center", "Age_at_Dx")
df
```

## Delete columns or rows

To delete a data.frame column, set it to [NULL](#replacing-with-null):

```{r}
df$Sex <- NULL
df
```

To delete a data.frame row, you can "index it out".  

For example, to remove the third and fifths rows of the above data.frame using 
an integer index:

```{r}
df <- df[-c(3, 5), ]
df
```

You can similarly exclude a row using a logical index. Logical indexing occurs 
usually following some filtering condition. 

For example, exclude patients under 20 years old:

```{r}
df <- df[!df$Age < 20, ]
df
```

## `subset()`

`subset()` allows you to 

- **filter** cases that meet certain conditions using the `subset` argument
- **select** columns using the `select` argument  

(`head()` returns the first few lines of a data frame. We use it to avoid 
printing too many lines)

```{r}
head(iris)
iris_sl.gt.med <- subset(iris, Sepal.Length > median(Sepal.Length))
```

Note: You can use the column name Sepal.Length directly, i.e. unquoted and you 
don't need to use `iris$Sepal.Length`.

This is called Non-Standard Evaluation (NSE).

```{r}
x <- data.frame(one = 1:10,
                two = rnorm(10),
                group = c(rep("alpha", 4),  rep("beta", 6)))
subset(x, subset = two > 0, select = two)
subset(x, two > 0, -one)
subset(x, two > 0, two:one)
subset(x, two > 0, two:group)
```

## `split()`

Split a data frame into multiple data frames by groups defined by a factor:

```{r}
x_by_group <- split(x, x$group)
x_by_group
```

## `with()`

Within a `with()` expression, you can access list elements or data.frame 
columns without quoting or using the `$` operator:

```{r}
with(x, one + two)
with(x, x[group == "alpha", ])
with(x, x[two > 0, ])
```

## Feature transformation with `transform()`

Make up some data:

```{r}
dat <- data.frame(Sex = c(0, 0, 1, 1, 0),
                  Height = c(1.5, 1.6, 1.55, 1.73, 1.8),
                  Weight = c(55, 70, 69, 76, 91))
```

```{r}
dat <- transform(dat, BMI = Weight/Height^2)
dat
```

`transform()` is probably not used too often, because it is trivial to do the 
same with direct assignment:

```{r}
dat$BMI <- dat$Weight/dat$Height^2
```

but can be useful when adding multiple variables and/or used in a [pipe](#pipe):

```{r}
dat |> 
  subset(Sex == 0) |> 
  transform(DeltaWeightFromMean = Weight - mean(Weight),
            BMI = Weight/Height^2,
            CI = Weight/Height^3)
```

## Identify and remove duplicated row with `duplicated()` and `unique()`

When applied on a data.frame, the `duplicated()` function returns a logical index specifying the 
location of duplicated rows - specifically, a logical index of rows which are the duplicate of 
another row further up the data.frame. This means that if rows 20 and 23 are identical, 
`duplicated()` will return `TRUE` for row 23.

On the other hand, `unique()` will remove duplicate rows from a data.frame.

```{r}
x <- data.frame(ID = c(203, 808, 909, 707, 808),
                Age = c(23, 44, 33, 42, 44))
```

```{r}
duplicated(x)
```

```{r}
unique(x)
```

## See also

- See the [data frame section](#dataframestruc) for an introduction to data
frames.
