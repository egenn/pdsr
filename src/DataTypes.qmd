---
knitr:
  opts_chunk:
    comment: ""
lightbox: true
---
# Data Types & Vectors {#sec-datatypes}

## Basic concepts: Data types

Most programming languages, including all languages used for data analysis, like R, Python,
and Julia, have a set of data types for holding different kinds of data, like numbers or text.

Any time you are working with data, you have to ensure your variables are represented using the 
correct data type.
<br><br>

::: {.inv}

```{r}
#| label: fig-datatypes
#| echo: false
#| out-width: 70%
#| fig-align: center
#| fig-cap: Common data types in R.
knitr::include_graphics("assets/R_datatypes.webp")
```

:::

## Base types

The simplest and most fundamental object in R is the vector: a one-dimensional 
collection of elements of the same data type, e.g. numbers, characters, etc.
(known as an "atomic" vector).
<br><br>
For example, a numeric vector may consist of elements `12, 14, 20`, and a 
character vector may consist of elements `"x", "y", "apple", "banana"`.
<br><br>
Vectors can exist as stand-alone objects, or they can exist within other data 
structures, e.g. data.frames, lists, etc.
<br><br>
This chapter covers different atomic vectors, and the next covers data 
structures (@sec-datastructures).
<br><br>
R includes a number of builtin data types. These are defined by R - users cannot define their own data types.
<br><br>
Users can, however, define their own classes (@sec-classes).
<br><br>
The main/most common data types in R are:

- **numeric**, including **integer** and [**double**](https://en.wikipedia.org/wiki/Double-precision_floating-point_format)
- **character**
- **logical** (i.e. TRUE, FALSE, or NA, a.k.a. [Boolean](https://en.wikipedia.org/wiki/Boolean_data_type))

Other data types include environments and closures i.e. functions 
(@sec-functions).

## Assignment

Use `<-` for all assignments:

```{r}
x <- 3
# You can add comments within code blocks using the usual "#" prefix
```

::: callout-note
In [RStudio](https://rstudio.com/), the keyboard shortcut for the assignment 
operator `<-` is `Option -` (macOS) or `Alt -` (Windows).
:::

Typing the name of an object, e.g.

```{r}
x
```

is equivalent to printing it, e.g.

```{r}
print(x)
```

You can also place any assignment in parentheses and this will perform the 
assignment and print the object:

```{r}
(x <- 3)
```

::: callout-note
You can use either `<-` or `=` for assignment. 
However, many R syntax guides advise to use `<-` for assignment and `=` for passing
arguments to functions.
:::

You can assign the same value to multiple objects - this can be useful when 
initializing variables.

```{r}
x <- z <- init <- 0
x
z
init
```

Excitingly, R allows assignment in the opposite direction as well:

```{r}
10 -> x
x
```

We shall see later that the `->` assignment can be convenient at the end of a 
[pipe](https://class.lambdamd.org/progdatscir/functions.html#the-pipe-operator).

You can even do the following, which is fun, if not particularly useful:

```{r}
x <- 7 -> z
x
z
```

::: callout-note
It's good practice to use clear and descriptive names for all objects you 
create.

For multi-word names, snake case is a good option:

`admission_date, age_at_onset, etc.`
:::

::: callout-caution
Avoid naming new objects using names of built-in commands.
For example, avoid assigning your data to an object named `data`, since that
could conflict with the built-in function `data()`.
::: 

## Create vectors with `c()` 

Use `c()` to **c**ombine multiple values into a vector:

```{r}
x <- c(-12, 3.5, 104)
x
```

## Get the type of a vector using `typeof()`

```{r}
typeof(x)
```

## Common vector types

Let's create some example vectors of the most common data types:

### Integer {#integervectors}

Numeric vector default to double;

```{r}
v <- c(12, 14, 23)
v
typeof(v)
```

To create an integer vector, you can follow numbers by an "L";
```{r}
vi <- c(12L, 14L, 23L)
vi
typeof(vi)
```

Alternatively you can coerce a double to integer using `as.integer()`;

```{r}
vi <- as.integer(c(12, 14, 23))
vi
typeof(vi)
```

### Double {#doublevectors}

```{r}
vd <- c(1.3, 2.8, 3.6)
vd
typeof(vd)
```

### Character {#charactervectors}

A character vector consists of one or more elements, each of which consists of 
one or more actual characters, i.e. it is **not** a vector of single 
characters. (The length of a character vector is the number of individual 
elements, and is not related to the number of characters in each element)

```{r}
vc <- c("a", "d", "s")
vc
typeof(vc)
```

### Logical {#logicalvectors}

Logical vectors typically consist of `TRUE` and `FALSE` values, but may also consist of `NA` (missing value). One important use of logical vectors is in indexing (@sec-indexing).

When you are writing code, use `TRUE` and `FALSE`.  
During interactive work, you can abbreviate to `T` and `F`.

```{r}
vl <- c(TRUE, FALSE, FALSE)
vl
typeof(vl)
```

## Initialize vectors {#initvectors}

Initializing a vector or other data structure is the process by which you create
an object of a certain size with some initial values, e.g. all zeros or all 
[`NA`](#na), in order to replace with other values later.

This is usually computationally more efficient than starting with a small object
and appending to it multiple times.
<br><br>
You can create / initialize vectors of specific type with the `vector` command 
and specifying a `mode` or directly by calling the relevant function:

```{r}
(xl <- vector(mode = "logical", length = 10))
(xd <- vector(mode = "double", length = 10))
(xn <- vector(mode = "numeric", length = 10)) # same as "double"
(xi <- vector(mode = "integer", length = 10))
(xc <- vector(mode = "character", length = 10))
```

These are aliases of the `vector` command above (print their source code to see 
for yourself)

```{r}
(xl <- logical(10))
(xd <- double(10))
(xn <- numeric(10)) # same as double
(xi <- integer(10))
(xc <- character(10))
```

## Explicit coercion

We can explicitly convert vector of one type to a different type using `as.*` 
functions:

```{r}
x <- c(1.2, 2.3, 3.4)
as.logical(x)
as.double(x)
as.numeric(x)
as.integer(x)
as.character(x)
```

Logical vectors are converted to 1s and 0s as expected, where TRUE becomes 1 and FALSE becomes 0, e.g.

```{r}
x <- c(TRUE, TRUE, FALSE)
as.numeric(x)
```

Note that when converting from numeric to logical, 
**anything other than zero is TRUE**:

```{r}
x <- seq(-2, 2, by = 0.5)
x
as.logical(x)
```

Not all conversions are possible.  
There is no meaningful/consistent way to convert a character vector to numeric.  
The following outputs NA values and prints a helpful warning message.

```{r}
x <- c("mango", "banana", "tangerine")
as.numeric(x)
```

## Implicit coercion

Remember, the language generally tries to make life easier. Sometimes this 
means it will automatically coerce one class to another to allow requested 
operations.
<br><br>
For example, you can get the sum of a logical vector.  
It will automatically be converted to numeric as we saw earlier.

```{r}
x <- c(TRUE, TRUE, FALSE)
sum(x)
```

On the other hand, you cannot sum a [factor](#factors), for example.  
You get an error with an explanation:

```{r}
#| error: true
x <- factor(c("mango", "banana", "mango"))
sum(x)
```

::: callout-caution
Many errors in R occur because a variable is, or gets coerced to, the wrong 
type or class (see @sec-datastructures) by accident.
That's why it is essential to be able to:

- check the type of a variable using `typeof()` or `class()`
- convert (coerce) between types or classes using `as.*` functions
::: 

## `NA`: Missing value {#na}

Missing values in any data type - logical, integer, double, or character - are coded using `NA`.  
To check for the presence of `NA` values, use `is.na()`:

```{r}
x <- c(1.2, 5.3, 4.8, NA, 9.6)
x
is.na(x)
```

```{r}
x <- c("mango", "banana", NA, "sugar", "ackee")
x
is.na(x)
```

```{r}
x <- c(TRUE, TRUE, FALSE, TRUE, FALSE, FALSE, NA)
x
is.na(x)
```

`is.na()` works similarly on matrices:

```{r}
x <- matrix(1:20, nrow = 5)
x[4, 3] <- NA
is.na(x)
```

::: callout-note
Note that `is.na()` returns a response for each element 
(i.e. is [vectorized](#vectorization)) in contrast to `is.numeric()`, 
`is.logical()`, etc. The latter are checking the type of 
an object, while the former is checking individual elements. 
::: 

`anyNA()` is a very useful function to check if there is one ore more missing values in an object, e.g.

```{r}
anyNA(x)
```

::: callout-note
Operation on `NA` values results in `NA`.
:::

```{r}
x <- c(1.2, 5.3, 4.8, NA, 9.6)
x*2
```

Multiple functions that accept as input an object with multiple values (a 
vector, a matrix, a data.frame, etc.) will return `NA` if *any* element is `NA`:

```{r}
mean(x)
median(x)
sd(x)
min(x)
max(x)
range(x)
```

First, make sure `NA` values represent legitimate missing data and not some 
error. Then, decide how you want to handle it.

In all of the above commands you can pass `na.rm = TRUE` to ignore `NA` values:

```{r}
mean(x, na.rm = TRUE)
median(x, na.rm = TRUE)
sd(x, na.rm = TRUE)
min(x, na.rm = TRUE)
max(x, na.rm = TRUE)
range(x, na.rm = TRUE)
```

More generally, you can use `na.exclude()` to exclude NA values from R objects. 
This can be very useful for function that do not include a `na.rm` or similar 
argument to handle `NA` values.

```{r}
x <- c(1, 2, NA, 4)
na.exclude(x)
```

On a data.frame, `na.exclude()` excludes rows with any `NA`s:

```{r}
df <- data.frame(a = c(1, 2, NA, 4),
                 b = c(11, NA, 13, 14))
na.exclude(df)
```

<!-- @sec-missingdata describes some approaches to handling missing data in the context of statistics or machine learning. -->

## `NA` types {#natypes}

In the above examples, `NA` was used in vectors of different types. In reality, `NA`
is a logical constant of length 1 that gets coerced to the type of the vector it is
placed in. To specify `NA` of a specific type, use the appropriate `NA_*` constant:

- `NA_integer_`
- `NA_real_`
- `NA_complex_`
- `NA_character_`

See `?NA` for more details. These can be useful when you want to initialize a 
vector/matrix/array of a specific type with `NA` values (for example, see (#initmatrix)).

## `NaN`: Not a number

`NaN` is a special case of `NA` and can be the result of undefined mathematical 
operations:

```{r}
a <- log(-4)
```

Note that `class()` returns "numeric":

```{r}
class(a)
```

To test for `NaN`s, use:

```{r}
is.nan(a)
```

`NaN`s are also `NA`:

```{r}
is.na(a)
```

But the opposite is not true:

```{r}
is.nan(NA)
```

::: callout-note
`NaN` can be considered a subtype of `NA`, 
as such: `is.na(NaN)` is `TRUE`, 
but `is.nan(NA)` is `FALSE`.
:::

## `NULL`: The empty object

The `NULL` object represents an empty object.

::: callout-note
`NULL` means empty, ***not missing***, and is therefore entirely different from `NA`.
:::

`NULL` shows up, for example, when initializing a list:

```{r}
a <- vector("list", length = 4)
a
```

and it can be replaced normally:

```{r}
a[[1]] <- 3
a
```

### Replacing with NULL

You cannot replace one or more elements of a vector/matrix/array with `NULL` 
because `NULL` has length 0 and replacement requires object of equal length:

```{r}
#| error: true
a <- 11:15
a
a[1] <- NULL
```

However, in lists, and therefore also data frames (see Chapter @sec-dfbasics), replacing an 
element with `NULL` ***removes that element***:

```{r}
al <- list(alpha = 11:15,
           beta = rnorm(10),
           gamma = c("mango", "banana", "tangerine"))
al
al[[2]] <- NULL
al
```

Finally, `NULL` is often used as the default value in a function's argument. 
The function definition must then determine what the default behavior/value 
should be.

## Named vectors

While not very common, you can name the elements of a vector. You can do so either when creating
the vector or after the fact:

First, create a vector without names, in this example, a character vector:

```{r}
v <- c("UCSF", "Stanford", "Penn")
v
```

Now, create a named vector and notice how the element names are displayed above the element values
when the vector is printed:

```{r}
site <- c(SiteA = "UCSF", SiteB = "Stanford", SiteC = "Penn")
site
```

Note that the `v` has no names, therefore the following returns `NULL`:

```{r}
names(v)
```

while `site` has names:

```{r}
names(site)
```

If we wanted to add the names of the elements of `v`, we can do so like this:

```{r}
names(v) <- c("SiteA", "SiteB", "SiteC")
v
```

Similarly, if we wanted to change/replace the names of `site`, we can do so like this:

```{r}
names(site) <- c("Site_1", "Site_2", "Site_3")
site
```

Lastly, if we wanted to remove the names of `site`, we can replace them with `NULL`:

```{r}
names(site) <- NULL
site
```

## Initialize - coerce - test vectors

The following summary table lists the functions to *initialize*, 
*coerce* (=convert), and *test* the main different vector types:
<br><br>

| **Initialize** | **Coerce**        | **Test**          |
|---------------:|------------------:|------------------:|
| `logical(n)`   | `as.logical(x)`   | `is.logical(x)`   |
| `integer(n)`   | `as.integer(x)`   | `is.integer(x)`   |
| `double(n)`    | `as.double(x)`    | `is.double(x)`    |
| `character(n)` | `as.character(x)` | `is.character(x)` |

::: callout-caution
The usage of the terms `double` and `numeric` across functions is unfortunately inconsistent in R.  

- `double()` is the same as `numeric()`: They both initialize a vector of type **double**.  
- `as.double()` is the same as `as.numeric()`: They both coerce to type **double**.  
*BUT*  
- `is.double()` is NOT the same as `is.numeric()`
- `is.numeric()` is TRUE for both **integer** and **double** types. It is useful when you want to check if a variable is a number, regardless of whether it is an integer or double.  
- `is.double()` is TRUE only for type double
- `is.integer()` is TRUE only for type integer.

Therefore, to promote clarity, prefer using `double()` instead of `numeric()` and `as.double()` 
instead of `as.numeric()`.
:::
