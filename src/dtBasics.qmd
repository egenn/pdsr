---
knitr:
  opts_chunk: 
    comment: ''
    error: true
---
# **data.table** basics {#sec-dtbasics}

```{r}
#| label: fig-datatable
#| echo: false
#| out-width: 50%
#| fig-align: center
#| fig-cap: data.table significantly enhances the base R data.frame
knitr::include_graphics("assets/R_data.table.png")
```

## `data.table` extends the functionality of `data.frame`

Some of the ways in which a `data.table` differs from a `data.frame`:  

- Many operations can be performed within a `data.table`'s "frame" (`dt[i, j, by]`):
filter cases, select columns & *operate* on columns, group-by operations
- Access column names directly without quoting
- Many operations can be performed ***"in-place"*** (i.e. with ***no assignment***)
- Working on large datasets (e.g. millions of rows) can be orders of magnitude faster with a  `data.table` than a `data.frame`.

`data.table` operations remain as close as possible to `data.frame` operations, 
trying to extend rather than replace `data.frame` functionality.

**data.table** includes thorough and helpful error messages that often point to 
a solution. This includes common mistakes new users may make when trying 
commands that would work on a `data.frame` but not on a `data.table`.

### Load the `data.table` package

```{r}
library(data.table)
```

## Create a `data.table`

### By assignment: `data.table()`

Let's create a `data.frame` and a `data.table` to explore side by side.

```{r}
df <- data.frame(A = 1:5,
                 B = c(1.2, 4.3, 9.7, 5.6, 8.1),
                 C = c("a", "b", "b", "a", "a"))
class(df)
df
```

`data.table()` syntax is similar to `data.frame()` (differs in some arguments)

```{r}
dt <- data.table(A = 1:5,
                 B = c(1.2, 4.3, 9.7, 5.6, 8.1),
                 C = c("a", "b", "b", "a", "a"))
class(dt)
dt
```

Notice how a `data.table` object also inherits from `data.frame`. This means 
that if a method does not exist for `data.table`, the method for `data.frame` 
will be used (See [classes and generic functions](#classes)).
<br><br>
As part of improving efficiency, data.tables do away with row names. Instead of 
using row names, you should use a dedicated column or column with a row identifier/s
(e.g. "ID"). this is advisable when working with data.frames as well.
<br><br>
A rather convenient option is to have data.tables print each column's class 
below the column name. You can pass the argument `class = TRUE` to `print()` or 
set the global option `datatable.print.class` using `options()`

```{r}
options(datatable.print.class = TRUE)
dt
```

Same as with a data.frame, to automatically convert strings to factors, you can 
use the `stringsAsFactors` argument:

```{r}
dt2 <- data.table(A = 1:5,
                  B = c(1.2, 4.3, 9.7, 5.6, 8.1),
                  C = c("a", "b", "b", "a", "a"),
                  stringsAsFactors = TRUE)
dt2
```

### By coercion: `as.data.table()`

```{r}
dat <- data.frame(A = 1:5,
                  B = c(1.2, 4.3, 9.7, 5.6, 8.1),
                  C = c("a", "b", "b", "a", "a"),
                  stringsAsFactors = TRUE)
dat
dat2 <- as.data.table(dat)
dat2
```

### By coercion ***in-place***: `setDT()`

`setDT()` converts a list or data.frame into a `data.table` ***in-place***. This means
the object passed to `setDT()` is changed and you do not need to assign the output to a 
new object.

```{r}
dat <- data.frame(A = 1:5,
                  B = c(1.2, 4.3, 9.7, 5.6, 8.1),
                  C = c("a", "b", "b", "a", "a"))
class(dat)
```

```{r}
setDT(dat)
class(dat)
```

You can similarly convert a `data.table` to a `data.frame`, in-place:

```{r}
setDF(dat)
class(dat)
```

## Display `data.table` structure with `str()`

`str()` works the same (and you should keep using it!)

```{r}
str(df)
```

```{r}
str(dt)
```

## Combine `data.tables`

`cbind()` and `rbind()` work on `data.table`s the same as on `data.frame`s:

```{r}
dt1 <- data.table(a = 1:5)
dt2 <- data.table(b = 11:15)
cbind(dt1, dt2)
rbind(dt1, dt1)
```

## Set column names ***in-place***

```{r}
dta <- data.table(
  ID = sample(8000:9000, size = 10),
  A = rnorm(10, mean = 47, sd = 8),
  W = rnorm(10, mean = 87, sd = 7)
)
dta
```
Use the syntax:

`setnames(dt, old, new)`

to change the column names of a data.table in-place.

Changes all column names:

```{r}
setnames(dta, names(dta), c("Patient_ID", "Age", "Weight"))
dta
```

Change subset of names:

```{r}
old_names <- c("Age", "Weight")
setnames(dta, old_names, paste0(old_names, "_at_Admission"))
dta
```

`old` argument can also be integer index of column(s).

For example, change the name of the first column:

```{r}
setnames(dta, 1, "Hospital_ID")
dta
```

## Filter rows

There are many similarities and some notable differences in how indexing works 
in a `data.table` vs. a `data.frame`.

Filtering rows with an integer or logical index is largely the same in a 
`data.frame` and a `data.table`, but in a `data.table` you can omit the comma 
to select all columns:

```{r}
df[c(1, 3, 5), ]
dt[c(1, 3, 5), ]
dt[c(1, 3, 5)]
```

Using a variable that holds a row index, whether integer or logical:

```{r}
rowid <- c(1, 3, 5)
df[rowid, ]
dt[rowid, ]
dt[rowid]
```

```{r}
rowbn <- c(T, F, T, F, T)
df[rowbn, ]
dt[rowbn, ]
dt[rowbn]
```

### Conditional filtering

As a reminder, there are a few ways to conditionally filter cases in a data.frame:

```{r}
df[df$A > mean(df$A) & df$B > mean(df$B), ]
subset(df, A > mean(A) & B > mean(B))
with(df, df[A > mean(A) & B > mean(B), ])
```

`data.table` allows you to refer to column names directly and unquoted, which 
makes writing filter conditions easier/more compact:

```{r}
dt[A > mean(A) & B > mean(B)]
```

The `data.table` package also includes an S3 method for `subset()` that works 
the same way as with a `data.frame`:

```{r}
subset(dt, A > mean(A) & B > mean(B))
```

As another example, exclude cases based on missingness in a specific column:

```{r}
adf <- as.data.frame(sapply(1:5, function(i) rnorm(10)))
adf |> head()
adf[1, 3] <- adf[3, 4] <- adf[5, 3] <- adf[7, 3] <- NA
adt <- as.data.table(adf)
```

```{r}
adf[!is.na(adf$V3), ]
adt[!is.na(V3)]
```

## Select columns

### By position(s)

Selecting a single column in `data.table` does not drop to a vector, similar to 
using `drop = FALSE` in a data.frame:

```{r}
df[, 1]
df[, 1, drop = FALSE]
dt[, 1]
```

Double bracket indexing of a single column works the same on a `data.frame` and 
a `data.table`, returning a vector:

```{r}
df[[2]]
dt[[2]]
```
A vector of column positions returns a smaller `data.table`, similar to how it 
returns a smaller `data.frame` :

```{r}
df[, c(1, 2)]
dt[, c(1, 2)]
```

### By name(s)

In `data.table`, you access column names directly without quoting or using the 
`$` notation:

```{r}
df[, "B"]
df$B
dt[, B]
```

Because of this, `data.table` requires a slightly different syntax to use 
a variable as a column index which can contain integer positions, logical 
index, or column names. While on a data.frame you can do pass an index vector directly:

```{r}
colid <- c(1, 2)
colbn <- c(FALSE, TRUE, TRUE)
colnm <- c("A", "C")
df[, colid]
df[, colbn]
df[, colnm]
```

To do the same in a `data.table`, you must prefix the index vector with two dots:

```{r}
dt[, ..colid]
dt[, ..colbn]
dt[, ..colnm]
```

Think of working inside the `data.table` frame (i.e. within the "[...]") like 
an environment: you have direct access to the variables, i.e. columns within it. If you 
want to refer to variables outside the `data.table`, you must prefix their names
with `..` (similar to how you access the directory above your current working 
directory in the system shell).
<br><br>

::: callout-important
Always read error messages carefully, no matter what function or package you are using.
In the case of `data.table`, the error messages are very informative and often point to
the solution.
:::

See what happens if you try to use the data.frame syntax by accident:

```{r}
dt[, colid]
```

<br><br>
Selecting a single column by name returns a **vector**:

```{r}
dt[, A]
```

Selecting one or more columns by name enclosed in `list()` or `.()` (which, in 
this case, is short for `list()`), always returns a **`data.table`**:

```{r}
dt[, .(A)]
dt[, .(A, B)]
```

### `.SD` & `.SDcols`

`.SDcols` is a special symbol that can be used to select columns of a data.table 
as an alternative to `j`. It can accept a vector of integer positions or column names.
`.SD` is another special symbol that can be used in `j` and refers to either the entire 
data.table, or the subset defined by `.SDcols`, if present. The following can be used to
select columns:

```{r}
dt[, .SD, .SDcols = colid]
```

One of the main uses of .SD is shown below in combination with `lapply()`.

## Add new column ***in-place***

Use `:=` assignment to add a new column in the existing `data.table`.

```{r}
dt[, AplusB := A + B]
dt
```

Note how `dt` was modified even though we did not run 
`dt <- dt[, AplusB := A + B]`

## Add multiple columns ***in-place***

You can define multiple new column names using a character vector of new column 
names on the left of `:=` and a list on the right.

```{r}
dt[, c("AtimesB", "AoverB") := list(A*B, A/B)]
```

We can use `lapply()` since it always returns a list:

```{r}
vnames <- c("A", "B")
dt[, paste0("log", vnames) := lapply(.SD, log), .SDcols = vnames]
dt
```

You can also use `:=` in a little more awkward syntax:

```{r}
dt[, `:=`(AminusB = A - B, AoverC = A / B)]
dt
```

## Convert column type

### Assignment by reference with `:=`

Use any base R coercion function (`as.*`) to convert a column in-place using 
the `:=` notation

```{r}
dt[, A := as.numeric(A)]
dt
```

### Delete columns in-place with `:=`

To delete a column, use `:=` to set it to NULL:

```{r}
dt[, AoverB := NULL]
dt
```

Delete multiple columns

```{r}
dt[, c("logA", "logB") := NULL]
```

Or:

```{r}
dt[, `:=`(AplusB = NULL, AminusB = NULL)]
dt
```

### Fast loop-able assignment with `set()`

`data.table`'s `set()` is a loop-able version of the `:=` operator. Use it in 
a for loop to operate on multiple columns.

Syntax: `set(dt, i, j, value)`

* `dt` the data.table to operate on
* `i` optionally define which rows to operate on. `i = NULL` to operate on all rows
* `j` column names or index to be assigned `value`
* `value` values to be assigned to `j` by reference

As a simple example, transform the first two columns in-place by squaring:

```{r}
for (i in 1:2) {
  set(dt, i = NULL, j = i, value = dt[[i]]^2)
}
```

## Summarize

You can apply one or multiple summary functions on one or multiple columns.
Surround the operations in `list()` or `.()` to output a *new* data.table 
holding the outputs of the operations, i.e. the input data.table remains unchanged.

```{r}
A_summary <- dt[, .(A_max = max(A), A_min = min(A), A_sd = sd(A))]
A_summary
```

Example: Get the standard deviation of all numeric columns:

```{r}
numid <- sapply(dt, is.numeric)
dt_mean <- dt[, lapply(.SD, sd), .SDcols = numid]
dt_mean
```

If your function returns more than one value, the output will have multiple 
rows:

```{r}
dt_range <- dt[, lapply(.SD, range), .SDcols = numid]
dt_range
```

## Set order

You can set the row order of a data.table in-place based on one or multiple columns'
values using `setorder()`

```{r}
dt <- data.table(PatientID = sample(1001:9999, size = 10),
                 Height = rnorm(10, mean = 175, sd = 14),
                 Weight = rnorm(10, mean = 78, sd = 10),
                 Group = factor(sample(c("A", "B"), size = 10, replace = TRUE)))
dt
```

Let's set the order by PatientID:

```{r}
setorder(dt, PatientID)
dt
```

Let's re-order, always in-place, by group and then by height:

```{r}
setorder(dt, Group, Height)
dt
```

## Group-by operations

Up to now, we have learned how to use the `data.table` frame `dat[i, j]` to 
filter cases in `i` or add/remove/transform columns in-place in `j`. 
`dat[i, j, by]` allows to perform operations separately on groups of cases.

```{r}
dt <- data.table(A = 1:5,
                 B = c(1.2, 4.3, 9.7, 5.6, 8.1),
                 C = rnorm(5),
                 Group = c("a", "b", "b", "a", "a"))
dt
```

### Group-by summary

As we've seen, using `.()` or `list()` in `j`, returns a new `data.table`:

```{r}
dt[, .(mean_A_by_Group = mean(A)), by = Group]
dt[, list(median_B_by_Group = median(B)), by = Group]
```

### Group-by operation and assignment

Making an assignment with `:=` in `j`, adds a column in-place. If you combine such an
assignment with a group-by operation, the same value will be assigned to all cases of the 
group:

```{r}
dt[, mean_A_by_Group := mean(A), by = Group]
dt
```

## Apply functions to columns

Any function that returns a list can be used in `j` to return a new 
data.table - therefore lapply is perfect for getting summary on multiple 
columns. This is another example where you have to use the `.SD` notation:

```{r}
dt1 <- as.data.table(sapply(1:3, \(i) rnorm(10)))
dt1
setnames(dt1, names(dt1), c("Alpha", "Beta", "Gamma"))
dt1[, lapply(.SD, mean)]
```

You can specify which columns to operate on using the `.SDcols` argument:

```{r}
dt2 <- data.table(A = 1:5,
                  B = c(1.2, 4.3, 9.7, 5.6, 8.1),
                  C = rnorm(5),
                  Group = c("a", "b", "b", "a", "a"))
dt2
dt2[, lapply(.SD, mean), .SDcols = 1:2]
# same as
dt2[, lapply(.SD, mean), .SDcols = c("A", "B")]
cols <- c("A", "B")
dt2[, lapply(.SD, mean), .SDcols = cols]
```

You can combine `.SDcols` and `by`:

```{r}
dt2[, lapply(.SD, median), .SDcols = c("B", "C"), by = Group]
```

Create multiple new columns from transformation of existing and store with 
custom prefix:

```{r}
dt1
dt1[, paste0(names(dt1), "_abs") := lapply(.SD, abs)]
dt1
```

```{r}
dt2
cols <- c("A", "C")
dt2[, paste0(cols, "_groupMean") := lapply(.SD, mean), .SDcols = cols, by = Group]
dt2
```

## Row-wise operations

```{r}
dt <- data.table(a = 1:5, b = 11:15, c = 21:25, 
                 d = 31:35, e = 41:45)
dt
```

To operate row-wise, we can use `by = 1:nrow(dt)`.
For example, to add a column, in-place, with row-wise sums of variables b 
through d:

```{r}
dt[, bcd.sum := sum(.SD[, b:d]), by = 1:nrow(dt)]
dt
```

## Watch out for `data.table` error messages

For example

## Resources

- [Introduction to data.table](https://cran.r-project.org/web/packages/data.table/vignettes/datatable-intro.html)
- [Using .SD for Data Analysis](https://cran.r-project.org/web/packages/data.table/vignettes/datatable-sd-usage.html)
