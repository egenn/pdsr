{
  "hash": "b988922347ee100fce910fb930a843ee",
  "result": {
    "engine": "knitr",
    "markdown": "# Handling Missing data {#sec-missingdata}\n\n\n\n\n\n\n::: {.cell}\n\n:::\n\n<STYLE type='text/css' scoped>\nPRE.fansi SPAN {padding-top: .25em; padding-bottom: .25em};\n</STYLE>\n\n\n\n\n\n\nMissing data is a very common issue in statistics and data science.\n\nData may be missing for a variety of reasons. We often characterize the type of missingness using the following three types [@mack2018managing]:\n\n1. **Missing completely at random (MCAR)**: \"The fact that the data are missing is independent of the observed and unobserved data\"\n2. **Missing at random (MAR)**: \"The fact that the data are missing is systematically related to the observed but not the unobserved data\"\n3. **Missing not at random (MNAR)**: \"The fact that the data are missing is systematically related to the unobserved data\"\n\n## Check for missing data\n\nYou can use your favorite base R commands to check for missing data, count NA elements by row, by column, total, etc.\n\nLet's load the `PimaIndiansDiabetes2` dataset from the **mlbench** package and make a copy of it to variable `dat`. Remember to check the class of a new object you didn't create yourself with `class()`, check its dimensions, if applicable, with `dim()`, and a get a summary of its structure including data types with `str()`:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(\"PimaIndiansDiabetes2\", package = \"mlbench\")\ndat <- PimaIndiansDiabetes2\nclass(dat)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"data.frame\"\n```\n\n\n:::\n\n```{.r .cell-code}\ndim(dat)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 768   9\n```\n\n\n:::\n\n```{.r .cell-code}\nstr(dat)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t768 obs. of  9 variables:\n $ pregnant: num  6 1 8 1 0 5 3 10 2 8 ...\n $ glucose : num  148 85 183 89 137 116 78 115 197 125 ...\n $ pressure: num  72 66 64 66 40 74 50 NA 70 96 ...\n $ triceps : num  35 29 NA 23 35 NA 32 NA 45 NA ...\n $ insulin : num  NA NA NA 94 168 NA 88 NA 543 NA ...\n $ mass    : num  33.6 26.6 23.3 28.1 43.1 25.6 31 35.3 30.5 NA ...\n $ pedigree: num  0.627 0.351 0.672 0.167 2.288 ...\n $ age     : num  50 31 32 21 33 30 26 29 53 54 ...\n $ diabetes: Factor w/ 2 levels \"neg\",\"pos\": 2 1 2 1 2 1 2 1 2 2 ...\n```\n\n\n:::\n:::\n\n\n\n\n\n\nCheck if there are any missing values in the data.frame with `anyNA()`:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanyNA(dat)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\n\n\n\nThe above suggests there is one or more `NA` values in the dataset.\n\nWe can create a logical index of NA values using `is.na()`. Remember that the output of `is.na()` is a logical matrix with the same dimensions as the dataset:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nna_index <- is.na(dat)\ndim(na_index)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 768   9\n```\n\n\n:::\n\n```{.r .cell-code}\nhead(na_index)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  pregnant glucose pressure triceps insulin  mass pedigree   age diabetes\n1    FALSE   FALSE    FALSE   FALSE    TRUE FALSE    FALSE FALSE    FALSE\n2    FALSE   FALSE    FALSE   FALSE    TRUE FALSE    FALSE FALSE    FALSE\n3    FALSE   FALSE    FALSE    TRUE    TRUE FALSE    FALSE FALSE    FALSE\n4    FALSE   FALSE    FALSE   FALSE   FALSE FALSE    FALSE FALSE    FALSE\n5    FALSE   FALSE    FALSE   FALSE   FALSE FALSE    FALSE FALSE    FALSE\n6    FALSE   FALSE    FALSE    TRUE    TRUE FALSE    FALSE FALSE    FALSE\n```\n\n\n:::\n:::\n\n\n\n\n\n\nOne way to count missing values is with `sum(is.na())`. Remember that a logical array is coerced to an integer array for mathematical operations, where `TRUE` becomes 1 and `FALSE` becomes 0. Therefore, calling `sum()` on a logical index counts the number of `TRUE` elements (and since we are applying it on the index of `NA` values, it counts the number of elements with missing values):\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(is.na(dat))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 652\n```\n\n\n:::\n:::\n\n\n\n\n\n\nThere are 652 `NA` values in total in the data.frame.\n\nLet's count the number of missing values per feature, i.e. per column, using `sapply()`:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsapply(dat, function(i) sum(is.na(i)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\npregnant  glucose pressure  triceps  insulin     mass pedigree      age \n       0        5       35      227      374       11        0        0 \ndiabetes \n       0 \n```\n\n\n:::\n:::\n\n\n\n\n\n\nThe features `insulin` and `triceps` have the most NA values.\n\nLet's count the number of missing values per case, i.e. per row:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsapply(1:nrow(dat), function(i) sum(is.na(dat[i, ])))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  [1] 1 1 2 0 0 2 0 3 0 3 2 2 2 0 0 3 0 2 0 0 0 2 2 1 0 0 2 0 0 2 1 0 0 2 1 0 2\n [38] 1 1 0 0 2 1 0 2 1 2 1 1 4 0 0 0 0 0 1 0 0 2 0 4 2 2 0 2 1 1 2 0 0 0 0 2 0\n [75] 1 2 2 1 3 1 1 4 0 1 2 0 1 0 0 1 2 0 0 2 0 0 1 0 0 0 2 2 2 0 2 0 2 0 0 0 0\n[112] 0 0 2 0 2 2 2 1 0 0 1 0 2 2 0 0 0 0 2 0 2 0 1 0 0 0 0 2 0 2 1 0 2 0 2 1 0\n[149] 2 1 0 2 0 0 2 1 0 0 0 0 1 0 0 1 2 0 1 2 2 0 2 0 2 0 0 0 2 0 2 2 2 0 1 2 2\n[186] 1 0 0 0 0 2 0 2 3 1 0 2 0 0 0 1 2 1 0 0 1 0 2 0 1 1 1 1 0 0 0 0 0 1 2 0 2\n[223] 3 0 0 0 2 1 0 0 2 0 0 2 0 2 0 1 1 2 1 0 2 0 0 1 2 0 0 1 2 2 0 1 0 1 1 1 0\n[260] 0 0 3 1 1 2 0 3 1 2 3 1 0 2 0 2 0 1 0 2 0 2 0 0 2 2 0 0 0 0 0 0 0 0 0 2 0\n[297] 0 0 0 2 3 0 0 2 2 0 0 0 0 0 1 0 0 0 1 0 0 2 0 2 0 1 1 0 1 0 0 2 0 0 1 0 3\n[334] 2 0 0 3 2 0 2 0 0 2 2 2 0 0 3 0 2 2 2 1 0 2 2 0 2 0 0 0 2 1 2 0 0 2 1 0 0\n[371] 0 1 0 0 0 0 0 0 2 0 0 1 0 0 0 0 1 1 0 0 0 2 0 0 2 0 0 1 2 1 2 2 0 1 2 0 2\n[408] 2 2 0 1 0 0 0 0 0 1 1 2 0 0 0 0 1 0 0 4 0 0 0 3 0 0 2 1 3 1 2 1 2 1 0 0 2\n[445] 1 0 0 0 0 0 0 2 0 3 0 1 2 0 0 0 0 2 0 1 2 0 0 0 3 0 1 1 1 2 2 1 0 0 0 1 0\n[482] 1 0 0 3 0 0 0 1 2 0 1 1 0 4 2 2 0 0 0 0 1 2 0 1 2 0 0 0 2 1 0 2 2 0 0 0 2\n[519] 2 0 0 0 4 2 2 1 0 0 0 2 0 2 0 3 0 3 2 2 0 0 0 0 1 0 0 0 0 0 0 1 1 0 2 0 0\n[556] 0 1 2 1 2 2 0 0 0 2 0 0 0 0 0 2 2 0 0 0 0 0 2 2 1 1 1 1 2 0 1 2 2 0 3 1 0\n[593] 2 0 0 0 2 0 2 0 1 3 1 0 3 1 0 0 0 0 0 0 0 1 0 2 2 0 1 3 0 1 2 0 2 0 2 2 2\n[630] 1 2 0 2 0 2 2 2 0 0 0 0 2 2 3 0 0 0 0 0 1 0 0 0 2 0 0 0 0 2 0 2 1 0 0 1 0\n[667] 1 1 0 0 0 1 0 0 2 2 2 2 2 0 0 1 0 2 3 0 2 1 0 0 2 2 0 0 2 0 0 3 0 2 0 1 1\n[704] 3 0 1 4 0 2 0 0 0 1 0 2 0 0 1 0 1 1 0 0 0 2 1 0 1 2 2 0 2 0 0 2 1 0 1 0 2\n[741] 0 0 0 2 0 0 1 0 0 2 2 0 1 0 1 0 1 2 2 2 0 1 2 0 1 0 2 1\n```\n\n\n:::\n:::\n\n\n\n\n\n\nIf we wanted to get the row with the most missing values, we can use `which.max()`:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwhich.max(sapply(1:nrow(dat), function(i) sum(is.na(dat[i, ]))))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 50\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(is.na(dat[50, ]))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n:::\n\n\n\n\n\n\nRow 50 has 4 missing values.\n\n### Visualize\n\nIt may be helpful to visualize missing data to get a quick impression of missingness. The [**rtemis**](https://rtemis.lambdamd.org/) package includes the function `mplot3_missing()`:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rtemis)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n  .:rtemis 0.97.53 ðŸŒŠ aarch64-apple-darwin20\n```\n\n\n:::\n\n```{.r .cell-code}\nmplot3_missing(dat)\n```\n\n::: {.cell-output-display}\n![](MissingData_files/figure-pdf/unnamed-chunk-11-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\n\n\nMissing data is shown in magenta by default. The row below the image shows total `NA` values per column\n\n### Summarize\n\nGet number of missing values per column:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsapply(dat, function(i) sum(is.na(i)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\npregnant  glucose pressure  triceps  insulin     mass pedigree      age \n       0        5       35      227      374       11        0        0 \ndiabetes \n       0 \n```\n\n\n:::\n:::\n\n\n\n\n\n\n`rtemis::check_data()` includes information on missing data:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck_data(dat)\n```\n\n<PRE class=\"fansi fansi-output\"><CODE>  <span style='color: #87D7FF; font-weight: bold;'>dat</span>: A data.table with <span style='color: #87D7FF; font-weight: bold;'>768</span> rows and <span style='color: #87D7FF; font-weight: bold;'>9</span> columns\n<span style='font-weight: bold;'>\n  Data types</span>\n  * <span style='font-weight: bold;'>8</span> numeric features\n  * <span style='font-weight: bold;'>0</span> integer features\n  * <span style='font-weight: bold;'>1</span> factor, which is not ordered\n  * <span style='font-weight: bold;'>0</span> character features\n  * <span style='font-weight: bold;'>0</span> date features\n<span style='font-weight: bold;'>\n  Issues</span>\n  * <span style='font-weight: bold;'>0</span> constant features\n  * <span style='font-weight: bold;'>0</span> duplicate cases\n  * <span style='color: #FF8700; font-weight: bold;'>5</span> features include &#039;NA&#039; values; <span style='color: #FF8700; font-weight: bold;'>652</span> &#039;NA&#039; values total\n    * <span style='color: #FF8700; font-weight: bold;'>5</span> numeric\n<span style='font-weight: bold;'>\n  Recommendations</span>\n<span style='color: #FF8700; font-weight: bold;'>  * Consider imputing missing values or use complete cases only</span> \n</CODE></PRE>\n:::\n\n\n\n\n\n\n## Handle missing data\n\nDifferent approaches can be used to handle missing data:\n\n-   Do nothing - if your algorithm(s) can handle missing data (decision trees!)\n-   **Exclude** data: Use complete cases only\n-   **Fill in** (make up) data: Replace or Impute\n    -   Replace with median/mean\n    -   Predict missing from present\n        -   Single imputation\n        -   Multiple imputation\n\n### Do nothing\n\nAlgorithms like decision trees and ensemble methods that use decision trees like random forest and gradient boosting can handle missing data, depending on the particular implementation. For example, `rpart::rpart()` which is used by `rtemis::s_CART()` has no trouble with missing data in the predictors:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat.cart <- s_CART(dat)\n```\n\n<PRE class=\"fansi fansi-output\"><CODE><span style='color: #555555;'>07-30-24 17:42:40 </span>Hello, egenn<span style='color: #555555;'> [s_CART]\n</span>\n<span style='color: #555555;'>07-30-24 17:42:40 </span>Imbalanced classes: using Inverse Frequency Weighting<span style='color: #555555;'> [prepare_data]\n</span>\n<span style='color: #555555;'>.:</span><span style='font-weight: bold;'>Classification Input Summary</span>\nTraining features: <span style='font-weight: bold;'>768 x 8 \n</span> Training outcome: <span style='font-weight: bold;'>768 x 1 \n</span> Testing features: Not available\n  Testing outcome: Not available\n\n<span style='color: #555555;'>07-30-24 17:42:40 </span>Training CART...<span style='color: #555555;'> [s_CART]\n</span>\n<span style='color: #555555;'>.:</span><span style='font-weight: bold;'>CART Classification Training Summary</span>\n<span style='font-weight: bold;'>                   Estimated</span> \n<span style='font-weight: bold;'>        Reference</span>  <span style='color: #87D7FF; font-weight: bold;'>neg  pos  </span>\n<span style='color: #87D7FF; font-weight: bold;'>              neg</span>  350  150\n<span style='color: #87D7FF; font-weight: bold;'>              pos</span>   31  237\n\n                   <span style='color: #87D7FF; font-weight: bold;'>Overall  </span>\n      Sensitivity  0.7000 \n      Specificity  0.8843 \nBalanced Accuracy  0.7922 \n              PPV  0.9186 \n              NPV  0.6124 \n               F1  0.7946 \n         Accuracy  0.7643 \n              AUC  0.8310 \n      Brier Score  0.1691 \n\n  Positive Class:  <span style='color: #87D7FF; font-weight: bold;'>neg</span> \n<span style='color: #555555;'>07-30-24 17:42:40 Completed in 0.01 minutes (Real: 0.48; User: 0.44; System: 0.03) [s_CART]\n</span>\n</CODE></PRE>\n:::\n\n\n\n\n\n\n### Use complete cases only\n\nR's builtin `complete.cases()` function returns, as the name suggests, a logical index of cases (i.e. rows) that have no missing values, i.e. are complete.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(dat)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 768   9\n```\n\n\n:::\n\n```{.r .cell-code}\nindex_cc <- complete.cases(dat)\nclass(index_cc)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"logical\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlength(index_cc)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 768\n```\n\n\n:::\n\n```{.r .cell-code}\nhead(index_cc)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE FALSE FALSE  TRUE  TRUE FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\ndat_cc <- dat[index_cc, ]\ndim(dat_cc)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 392   9\n```\n\n\n:::\n:::\n\n\n\n\n\n\nWe lost 376 cases in the above example. That's quite a few, so, for this dataset, we probably want to look at options that do not exclude cases.\n\n### Replace with a fixed value\n\nWe can manually replace missing values with the mean or median in the case of a continuous variable, or with the mode in the case of a categorical feature.\\\nFor example, to replace the first feature's missing values with the mean:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npressure_mean <- mean(dat$pressure, na.rm = TRUE)\ndat_im <- dat\ndat_im$pressure[is.na(dat_im$pressure)] <- pressure_mean\n```\n:::\n\n\n\n\n\n\n`rtemis::preprocess()` can replace missing values with mean (for numeric features) and the mode (for factors) for all columns:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_pre <- preprocess(dat, impute = TRUE, impute.type = \"meanMode\")\n```\n\n<PRE class=\"fansi fansi-output\"><CODE><span style='color: #555555;'>07-30-24 17:42:40 </span>Hello, egenn<span style='color: #555555;'> [preprocess]\n07-30-24 17:42:40 </span>Imputing missing values using mean and get_mode...<span style='color: #555555;'> [preprocess]\n07-30-24 17:42:40 Completed in 1.7e-05 minutes (Real: 1e-03; User: 0.00; System: 0.00) [preprocess]\n</span>\n</CODE></PRE>\n:::\n\n\n\n\n\n\nVerify there are no missing data by rerunning `check_data()`:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck_data(dat_pre)\n```\n\n<PRE class=\"fansi fansi-output\"><CODE>  <span style='color: #87D7FF; font-weight: bold;'>dat_pre</span>: A data.table with <span style='color: #87D7FF; font-weight: bold;'>768</span> rows and <span style='color: #87D7FF; font-weight: bold;'>9</span> columns\n<span style='font-weight: bold;'>\n  Data types</span>\n  * <span style='font-weight: bold;'>8</span> numeric features\n  * <span style='font-weight: bold;'>0</span> integer features\n  * <span style='font-weight: bold;'>1</span> factor, which is not ordered\n  * <span style='font-weight: bold;'>0</span> character features\n  * <span style='font-weight: bold;'>0</span> date features\n<span style='font-weight: bold;'>\n  Issues</span>\n  * <span style='font-weight: bold;'>0</span> constant features\n  * <span style='font-weight: bold;'>0</span> duplicate cases\n  * <span style='font-weight: bold;'>0</span> missing values\n<span style='font-weight: bold;'>\n  Recommendations</span>\n<span style='color: #55FF55; font-weight: bold;'>  * Everything looks good</span> \n</CODE></PRE>\n:::\n\n\n\n\n\n\nYou may want to include a \"missingness\" column that indicates which cases were imputed to include in your model. You can create this simply by running:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npressure_missing = factor(as.integer(is.na(dat$pressure)))\n```\n:::\n\n\n\n\n\n\n`preprocess()` includes the option `missingness` to add indicator columns after imputation:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_pre <- preprocess(\n    dat, \n    impute = TRUE, \n    impute.type = \"meanMode\",\n    missingness = TRUE\n)\n```\n\n<PRE class=\"fansi fansi-output\"><CODE><span style='color: #555555;'>07-30-24 17:42:40 </span>Hello, egenn<span style='color: #555555;'> [preprocess]\n07-30-24 17:42:40 </span>Created missingness indicator for glucose...<span style='color: #555555;'> [preprocess]\n07-30-24 17:42:40 </span>Created missingness indicator for pressure...<span style='color: #555555;'> [preprocess]\n07-30-24 17:42:40 </span>Created missingness indicator for triceps...<span style='color: #555555;'> [preprocess]\n07-30-24 17:42:40 </span>Created missingness indicator for insulin...<span style='color: #555555;'> [preprocess]\n07-30-24 17:42:40 </span>Created missingness indicator for mass...<span style='color: #555555;'> [preprocess]\n07-30-24 17:42:40 </span>Imputing missing values using mean and get_mode...<span style='color: #555555;'> [preprocess]\n07-30-24 17:42:40 Completed in 6.7e-05 minutes (Real: 4e-03; User: 4e-03; System: 0.00) [preprocess]\n</span>\n</CODE></PRE>\n\n```{.r .cell-code}\nhead(dat_pre)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  pregnant glucose pressure  triceps  insulin mass pedigree age diabetes\n1        6     148       72 35.00000 155.5482 33.6    0.627  50      pos\n2        1      85       66 29.00000 155.5482 26.6    0.351  31      neg\n3        8     183       64 29.15342 155.5482 23.3    0.672  32      pos\n4        1      89       66 23.00000  94.0000 28.1    0.167  21      neg\n5        0     137       40 35.00000 168.0000 43.1    2.288  33      pos\n6        5     116       74 29.15342 155.5482 25.6    0.201  30      neg\n  glucose_missing pressure_missing triceps_missing insulin_missing mass_missing\n1               0                0               0               1            0\n2               0                0               0               1            0\n3               0                0               1               1            0\n4               0                0               0               0            0\n5               0                0               0               0            0\n6               0                0               1               1            0\n```\n\n\n:::\n:::\n\n\n\n\n\n\n#### Add new level \"missing\"\n\nOne option to handle missing data in categorical variables, is to introduce a new level of \"missing\" to the factor, instead of replacing with the mode, for example. If we bin a continuous variable to convert to categorical, the same can then also be applied.\n\nSince no factors have missing values in the current dataset we create a copy and replace some data with `NA`:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat2 <- dat\ndat2$diabetes[sample(1:NROW(dat2), size = 35)] <- NA\nsum(is.na(dat2$diabetes))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 35\n```\n\n\n:::\n\n```{.r .cell-code}\nlevels(dat2$diabetes)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"neg\" \"pos\"\n```\n\n\n:::\n:::\n\n\n\n\n\n\nReplace `NA` values with new level `missing`:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_pre2 <- preprocess(dat2, factorNA2missing = TRUE)\n```\n\n<PRE class=\"fansi fansi-output\"><CODE><span style='color: #555555;'>07-30-24 17:42:40 </span>Hello, egenn<span style='color: #555555;'> [preprocess]\n07-30-24 17:42:40 </span>Converting 1 factor&#039;s NA values to level &#039;missing&#039;...<span style='color: #555555;'> [preprocess]\n07-30-24 17:42:40 Completed in 0.00 minutes (Real: 0.00; User: 1e-03; System: 0.00) [preprocess]\n</span>\n</CODE></PRE>\n\n```{.r .cell-code}\nanyNA(dat_pre2$diabetes)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\nlevels(dat_pre2$diabetes)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"neg\"     \"pos\"     \"missing\"\n```\n\n\n:::\n:::\n\n\n\n\n\n\n### Last observation carried forward (LOCF)\n\nIn longitudinal / timeseries data, we may want to replace missing values with the last observed value. This is called last observation carried forward (LOCF). As always, whether this procedure is appropriate depend the reasons for missingness. The `zoo` and `DescTools` packages provide commands to perform LOCF.\n\nSome simulated data. We are missing blood pressure measurements on Saturdays and Sundays:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat <- data.frame(\n     Day = rep(c(\"Mon\", \"Tues\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"), times = 3),\n     SBP = sample(105:125, size = 7 * 3, replace = TRUE)\n)\ndat$SBP[dat$Day == \"Sat\" | dat$Day == \"Sun\"] <- NA\ndat\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    Day SBP\n1   Mon 121\n2  Tues 122\n3   Wed 122\n4   Thu 118\n5   Fri 110\n6   Sat  NA\n7   Sun  NA\n8   Mon 121\n9  Tues 106\n10  Wed 115\n11  Thu 105\n12  Fri 117\n13  Sat  NA\n14  Sun  NA\n15  Mon 113\n16 Tues 114\n17  Wed 112\n18  Thu 108\n19  Fri 109\n20  Sat  NA\n21  Sun  NA\n```\n\n\n:::\n:::\n\n\n\n\n\n\nThe **zoo** package includes the `na.locf()`.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat$SBPlocf <- zoo::na.locf(dat$SBP)\ndat\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    Day SBP SBPlocf\n1   Mon 121     121\n2  Tues 122     122\n3   Wed 122     122\n4   Thu 118     118\n5   Fri 110     110\n6   Sat  NA     110\n7   Sun  NA     110\n8   Mon 121     121\n9  Tues 106     106\n10  Wed 115     115\n11  Thu 105     105\n12  Fri 117     117\n13  Sat  NA     117\n14  Sun  NA     117\n15  Mon 113     113\n16 Tues 114     114\n17  Wed 112     112\n18  Thu 108     108\n19  Fri 109     109\n20  Sat  NA     109\n21  Sun  NA     109\n```\n\n\n:::\n:::\n\n\n\n\n\n\nSimilar functionality is included in **DescTools**' `LOCF()` function:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nDescTools::LOCF(dat$SBP)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 121 122 122 118 110 110 110 121 106 115 105 117 117 117 113 114 112 108 109\n[20] 109 109\n```\n\n\n:::\n:::\n\n\n\n\n\n\n### Replace missing values with estimated values\n\n#### Single imputation\n\nYou can use non-missing data to predict missing data in an iterative procedure [@buuren2010mice; @stekhoven2012missforest]. The **`missRanger`** package uses the optimized (and parallel-capable) package **`ranger`** [@wright2015ranger] to iteratively train random forest models for imputation.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(missRanger)\ndat <- iris\nset.seed(2020)\ndat[sample(1:150, size = 5), 1] <- dat[sample(1:150, size = 22), 4] <- dat[sample(1:150, size = 18), 4] <- NA\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_rfimp <- missRanger(dat, num.trees = 100)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nMissing value imputation by random forests\n\n  Variables to impute:\t\tSepal.Length, Petal.Width\n  Variables used to impute:\tSepal.Length, Sepal.Width, Petal.Length, Petal.Width, Species\n\niter 1\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |===================================                                   |  50%\n  |                                                                            \n  |======================================================================| 100%\niter 2\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |===================================                                   |  50%\n  |                                                                            \n  |======================================================================| 100%\niter 3\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |===================================                                   |  50%\n  |                                                                            \n  |======================================================================| 100%\niter 4\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |===================================                                   |  50%\n  |                                                                            \n  |======================================================================| 100%\n```\n\n\n:::\n\n```{.r .cell-code}\nhead(dat_rfimp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1     5.100000         3.5          1.4         0.2  setosa\n2     4.900000         3.0          1.4         0.2  setosa\n3     4.732533         3.2          1.3         0.2  setosa\n4     4.600000         3.1          1.5         0.2  setosa\n5     5.000000         3.6          1.4         0.2  setosa\n6     5.400000         3.9          1.7         0.4  setosa\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck_data(dat_rfimp)\n```\n\n<PRE class=\"fansi fansi-output\"><CODE>  <span style='color: #87D7FF; font-weight: bold;'>dat_rfimp</span>: A data.table with <span style='color: #87D7FF; font-weight: bold;'>150</span> rows and <span style='color: #87D7FF; font-weight: bold;'>5</span> columns\n<span style='font-weight: bold;'>\n  Data types</span>\n  * <span style='font-weight: bold;'>4</span> numeric features\n  * <span style='font-weight: bold;'>0</span> integer features\n  * <span style='font-weight: bold;'>1</span> factor, which is not ordered\n  * <span style='font-weight: bold;'>0</span> character features\n  * <span style='font-weight: bold;'>0</span> date features\n<span style='font-weight: bold;'>\n  Issues</span>\n  * <span style='font-weight: bold;'>0</span> constant features\n  * <span style='color: #FF8700; font-weight: bold;'>1</span> duplicate case\n  * <span style='font-weight: bold;'>0</span> missing values\n<span style='font-weight: bold;'>\n  Recommendations</span>\n<span style='color: #FF8700; font-weight: bold;'>  * Consider removing the duplicate case</span> \n</CODE></PRE>\n:::\n\n\n\n\n\n\nNote: The default method for `preprocess(impute = TRUE)` is to use `missRanger`.\n\n#### Multiple imputation\n\nMultiple imputation creates multiple estimates of the missing data. It is more statistically valid for small datasets, especially when the goal is to get accurate estimates of a summary statistics, but may not be practical for larger datasets. It is not usually considered an option for machine learning (where duplicating cases may add bias and complexity in resampling). The package `mice` is a popular choice for multiple imputation in R.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(mice)\ndat_mice <- mice(dat)\n```\n:::\n",
    "supporting": [
      "MissingData_files/figure-pdf"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}