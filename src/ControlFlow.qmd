---
execute:
  cache: true
knitr:
  opts_chunk: 
    comment: ''
---
# Control Flow {#sec-controlflow}

Code is often executed non-linearly (i.e. not line-by-line). Control flow (or flow 
of control) operations define the order in which code segments are executed.
<br><br>
Execution is often conditional (using `if - else` or `switch()`).
<br><br>
Segments of code may be repeated a defined number of times (`for`-loop) or as 
long as certain conditions are met (`while`-loop). Any loop can be cut
short if needed.
<br><br>
Control flow operations form some of the fundamental building blocks of 
programs. Each operation is very simple - combine enough of them and you can 
build up to arbitrary complexity.
<br><br>

* **`if`** [Condition] [Expression] **`else`** [Alternate Expression]
* **`for`** [Variable in Sequence] do [Expression]
* **`while`** [Condition] do [Expression]
* **`repeat`** [Expression] until **`break`**`
* **`break`** - break out of **`for`**, **`while`**or **`repeat`**loop
* **`next`** - skip current iteration and proceed to next

::: callout-tip
To access the documentation for `if`, `for`, `while`, or `repeat`, surround the command with 
backticks, e.g. `` ?`if` ``. Alternatively, you can use `help("if")`.
:::

## Conditionals 

### `if` - `else`

Consider a [systolic blood pressure](https://www.ucsfhealth.org/medical-tests/blood-pressure-measurement) 
measurement:

```{r}
SBP <- 146 # mmHg
if (SBP <= 120) {
  cat("SBP is normal")
} else {
  cat("SBP is high")
}
```

### `if` - `else if` - `else`

Consider a single [blood sodium](https://www.ucsfhealth.org/medical-tests/sodium-blood-test) result

```{r}
Na <- 142 # mEq/L
Na
if (Na > 145) {
  result <- "Hypernatremia"
} else if (Na < 135) {
  result <- "Hyponatremia"
} else {
  result <- "Normal"
}
result
```

### Conditional assignment with `if` - `else`

You can directly assign the output of an `if` statement to an object.

```{r}
Na <- 142 # mEq/L
result <- if (Na > 145) {
  "Hypernatremia"
} else if (Na < 135) {
  "Hyponatremia"
} else {
  "Normal"
}
```

### Conditional assignment with `ifelse()`

`ifelse()` is [vectorized](#vectorization) and can be a great, compact 
method of conditional assignment.

Consider a vector of [blood bilirubin levels](https://www.ucsfhealth.org/medical-tests/bilirubin-blood-test):

```{r}
conjBil <- sample(runif(100, min = 0, max = 0.5), size = 20)
conjBil
```

```{r}
conjBil_bin <- ifelse(conjBil > 0.3, "Hyperbilirubinemia", "Normal")
conjBil_bin
```

The values assigned to the "yes" and "no" conditions can be a vector of the
same length as the first argument.

Consider an arbitrary numeric example:

```{r}
a <- 1:10
y <- ifelse(a > 5, 11:20, 21:30)
y
```

So what did this do?

It is equivalent to an `if-else` statement within a `for`-loop:

```{r}
idl <- a > 5
yes <- 11:20
no <- 21:30
out <- vector("numeric", length = 10)
for (i in seq(a)) {
  if (idl[i]) {
    out[i] <- yes[i]
  } else {
    out[i] <- no[i]
  }
}
out
```

i.e.

* Create a logical index using `test`
* for each element `i` in `test`:
    * if the element `i` is TRUE, return `yes[i]`, else `no[i]`

For another example, lets take integers `1:11` and square the odd ones and cube 
the even ones. We use the modulo operation `%%` to test if each element is odd 
or even:

```{r}
x <- 1:11
xsc <- ifelse(x %% 2 == 0, c(1:11)^3, c(1:11)^2)
xsc
```

### Conditional assignment with multiple options using `switch()`

Instead of using multiple `if` - `else if` statements, we can build a more 
compact call using `switch`, which is best suited for options that are of type 
character, rather than numeric.

```{r}
Department <- sample(letters[seq(5)], size = 1)
Department
output <- switch(Department, # 1. Some expression
  a = "Outpatient",          # 2. The possible values of the expression, unquoted
  b = "Emergency",           #    followed by the `=` and the conditional output
  c = "Cardiology",
  d = "Neurology",
  e = "Oncology",
  "Unknown Department"        # 3. An optional last argument is the default
                              #    value, if there is no match above
)
output
```

## Loops

### `for` loops {#forloops}

::: callout-tip
Use `for` loops to repeat execution of a block of code a certain number of 
times.
:::

The for loop syntax is `for (var in vector) expression`.

The `expression` is usually surrounded by curly brackets and can include any 
number of lines, any amount of code:

```{r}
for (i in 1:3) {
  cat("This is item", i, "\n")
}
```

The loop executes for `length(vector)` times.  
At iteration `i`, `var = vector[i]`.  
You will often use the value of `var` inside the loop - but you don't have to:

```{r}
for (i in seq(10)) {
  cat(i^2, "\n")
}
```

`letters` is a built-in constant that includes all 26 lowercase letters of the 
Roman alphabet; `LETTERS` similarly includes all 26 uppercase letters.

```{r}
for (letter in letters[1:5]) {
  cat(letter, "is a letter!\n")
}
```

#### Working on data within a for loop {#fordata}

A common scenario involves working on a data object, whether a vector, matrix, 
list, data.frame, and performing an operation on each elements, one at a time. 
While a lot of these operations are often performed using 
[loop functions](#loopfns) instead, for-loops can also be used.

You can start by initializing an object of the appropriate class and dimensions 
to hold the output. Then, each iteration of the for loop will assign its output 
to the corresponding element/s of this object.

In the following example we transform the `mtcars` built-in dataset's features 
to [z-scores](#zscore). The built-in command `scale()` will do this for quickly 
and conveniently, this is for demonstration purposes:

First, initialize the output to be the desired class and dimensions:

```{r}
class(mtcars)
dim(mtcars)
mtcars_z <- data.frame(matrix(0, nrow = 32, ncol = 11))
colnames(mtcars_z) <- colnames(mtcars)
```

or, it is simpler to just make a copy of `mtcars` to be overwritten by the 
for loop later:

```{r}
mtcars_z <- mtcars
```

Standardization involves subtracting the mean and dividing by the standard 
deviation.

Here is the for loop - we iterate through each column and assign the 
transformed data:

```{r}
for (i in 1:ncol(mtcars)) {
  mtcars_z[, i] <- (mtcars[, i] - mean(mtcars[, i])) / sd(mtcars[, i])
}
```

Let's compare to the output of the `scale()` command by print the first 3 rows 
and columns of each:

```{r}
mtcars_z2 <- as.data.frame(scale(mtcars))
mtcars_z[1:3, 1:3]
mtcars_z2[1:3, 1:3]
```

Note that we wrapped `scale()` around `as.data.frame()` because it outputs a 
matrix.

```{r}
all.equal(mtcars_z, mtcars_z2)
```

#### Nested `for` loops

```{r}
a <- matrix(1:9, nrow = 3)
for (i in seq(3)) {
  for (j in seq(3)) {
    cat("  a[", i, ",", j, "] is ", a[i, j], "\n", sep = "")
  }
}
```

#### Printing within a `for` loop

In the R console objects get printed just by typing their name:

```{r}
a <- 4
a
# same as
print(a)
```

This "automatic printing" does not happen within a `for` loop, so you simply 
use `print()` (or `cat()` as preferred):

The following loop does not print out anything:

```{r}
a <- 0
for (i in 1:4) {
  a <- a + i^2
  a
}
```

but this does:

```{r}
a <- 0
for (i in 1:4) {
  a <- a + i^2
  print(a)
}
```

### `while` loops

```{r}
a <- 10
while (a > 0) {
  a <- a - 1
  cat("a is equal to", a, "\n")
}
cat("when all is said and done, a is", a)
```

### `break` stops execution of a loop:

```{r}
for (i in seq(10)) {
  if (i == 5) break
  cat(i, "squared is", i^2, "\n")
}
```

### `next` skips the current iteration:

```{r}
for (i in seq(7)) {
  if (i == 5) next
  cat(i, "squared is", i^2, "\n")
}
```

### `repeat` loops

A `repeat` block initiates an infinite loop and you **must** use `break` to 
exit. They are less commonly used.

```{r}
i <- 10
repeat {
  i <- i - 1
  if (i == 0) break
  cat("i is", i, "\n")
}
```

::: callout-note
Any number of control flow operations can be combined and nested as needed.
:::
