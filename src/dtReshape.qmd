---
knitr:
  opts_chunk:
    comment: ""
lightbox: true
---
# Reshaping {#sec-dtreshape}

```{r}
library(data.table)
options(datatable.print.class = TRUE)
```

## Long to wide using `dcast()` {#dcast}

### Example 1: key-value pairs

Using the same example seen in @sec-dfreshape:

```{r}
dat_long <- data.frame(
    Account_ID = c(8001, 8002, 8003, 8004, 8001, 8002, 8003, 8004, 
            8001, 8002, 8003, 8004, 8001, 8002, 8003, 8004), 
    Age = c(67.8017038366664, 42.9198507293701, 46.2301756642422, 
            39.665983196671, 67.8017038366664, 42.9198507293701, 
            46.2301756642422, 39.665983196671, 67.8017038366664, 
            42.9198507293701, 46.2301756642422, 39.665983196671, 
            67.8017038366664, 42.9198507293701, 46.2301756642422, 
            39.665983196671), 
    Admission = c("ED", "Planned", "Planned", "ED", "ED", "Planned", 
            "Planned", "ED", "ED", "Planned", "Planned", "ED", "ED", "Planned", 
            "Planned", "ED"), 
    Lab_key = c("RBC", "RBC", "RBC", "RBC", "WBC", "WBC", "WBC", "WBC", 
            "Hematocrit", "Hematocrit", "Hematocrit", "Hematocrit", 
            "Hemoglobin", "Hemoglobin", "Hemoglobin", "Hemoglobin"), 
    Lab_value = c(4.63449321082268, 3.34968550627897, 4.27037213597765, 
            4.93897736897793, 8374.22887757195, 7612.37380499927, 
            8759.27855519425, 6972.28096216548, 36.272693147236, 
            40.5716317809522, 39.9888624177955, 39.8786884058422, 
            12.6188444991545, 12.1739747363806, 15.1293426442183, 
            14.8885696185238)
)
dat_long_dt <- as.data.table(dat_long)
dat_long_dt
```

`data.table`'s long to wide procedure is defined with a convenient formula 
notation:

```{r}
dat_long2wide_dt <- dcast(dat_long_dt,
                          Account_ID + Age + Admission ~ Lab_key,
                          value.var = "Lab_value")
dat_long2wide_dt
```

Instead of listing all variables you can use `...`, which corresponds to all
variables not otherwise mentioned in the formula or in `value.var`:

```{r}
dcast(dat_long_dt,
      ... ~ Lab_key,
      value.var = "Lab_value")
```

### Example 2: Timepoints

Another simple synthetic dataset:

```{r}
dt_long <- data.table(
        ID = c(1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L), 
        Timepoint = factor(
                c(1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L),
                labels = c("Timepoint_A", "Timepoint_B", "Timepoint_C")
        ), 
        Score = c(11L, 12L, 13L, 14L, 21L, 22L, 23L, 24L, 51L, 52L, 53L, 54L)
)
dt_long
```

Using `dcast()` again to convert to wide format:

```{r}
dt_long
dcast(dt_long, ID ~ Timepoint,
      value.var = "Score")
```

### `dcast()` + aggregate

If your `ID ~ Timepoint` combination does not define a unique row in your input 
dataset, you need to specify an aggregate function.

For example, suppose you have four subjects with IDs "A", "B", "C", "D" who had 
a couple variables measured 3 times in the AM and 3 times in the PM.

```{r}
dt_long2 <- data.table(ID = rep(LETTERS[1:4], each = 6),
                      Timepoint = rep(c("AM", "PM"), length.out = 24, each = 3),
                      Var1 = rnorm(24, mean = 10),
                      Var2 = rnorm(24, mean = 20))

dt_long2[sample(24, size = 4), Var1 := NA]
dt_long2[sample(24, size = 4), Var2 := NA]
dt_long2
```

To convert the above data.table to wide format and get mean AM 
and PM values using the `fun.aggregate` argument:

```{r}
dcast(dt_long2,
      ID ~ Timepoint,
      value.var = c("Var1", "Var2"),
      fun.aggregate = mean, na.rm = TRUE)
```

You can apply multiple aggregating functions by passing a list to 
`fun.aggregate`:

```{r}
dcast(dt_long2,
      ID ~ Timepoint,
      value.var = c("Var1", "Var2"),
      fun.aggregate = list(mean, max, min), na.rm = TRUE)
```

Note how `na.rm = TRUE` was successfully applied to all aggregating functions


## Wide to long: `melt()` {#melt}

### Example 1: Timepoints

```{r}
dt_wide <- data.table(
        ID = 1:4,
        Timepoint_A = 11:14,
        Timepoint_B = 21:24,
        Timepoint_C = 51:54)
dt_wide
```

Use `melt()` to convert from wide to long format:

```{r}
dt_long <- melt(
        dt_wide, 
        id.vars = "ID",
        measure.vars = 2:4, # defaults to all non-id columns
        variable.name = "Timepoint",
        value.name = c("Score"))
dt_long
```

### Example 2: Key-value pairs

Using the same synthetic data as in @sec-dfreshape:

```{r}
set.seed(2022)
dt_wide <- data.table(
  Account_ID = c(8001, 8002, 8003, 8004),
  Age = rnorm(4, mean = 57, sd = 12),
  RBC = rnorm(4, mean = 4.8, sd = 0.5),
  WBC = rnorm(4, mean = 7250, sd = 1500),
  Hematocrit = rnorm(4, mean = 40.2, sd = 4),
  Hemoglobin = rnorm(4, mean = 13.6, sd = 1.5),
  Admission = sample(c("ED", "Planned"), size = 4, replace = TRUE)
)
dt_wide
```

Convert from wide to long format using `melt()` again:
```{r}
dt_long <- melt(dt_wide,
                id.vars = c(1:2, 7),
                measure.vars = 3:6,
                variable.name = "Lab_key",
                value.name = "Lab_value")
dt_long
```

or using column names:

```{r}
dt_long <- melt(dt_wide,
                id.vars = c("Account_ID", "Age", "Admission"),
                measure.vars = c("RBC", "WBC", "Hematocrit", "Hemoglobin"),
                variable.name = "Lab_key",
                value.name = "Lab_value")
dt_long
```

If desired, you can set the ID column as the key, which will sort the
data.table by its values:

```{r}
setorder(dt_long, "Account_ID")
dt_long
```

## See also

- [base reshape](#sec-dfreshape)
- [tidyr reshape](#sec-tidyrreshape)

## Resources

- [Efficient reshaping using data.tables](https://cran.r-project.org/web/packages/data.table/vignettes/datatable-reshape.html)
