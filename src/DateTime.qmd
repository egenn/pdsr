---
knitr:
  opts_chunk:
    comment: ""
    error: true
---
# Date and Time {#datetime}

```{r}
#| echo: false
knitr::opts_chunk$set(fig.width = 5, fig.height = 5,
                      comment = NA, cache = TRUE)
```

R includes support for working with date and time data. There are three builtin classes:  

- **`Date`**: Represents **date** information (not time)
- **`POSIXct`**: Represents **date & time** information as the signed number of seconds 
since January 1, 1970 ([Unix Time a.k.a. POSIX time a.k.a. Epoch time](https://en.wikipedia.org/wiki/Unix_time))
- **`POSIXlt`**: Represents **date & time** information as a named list 
(See `base::DateTimeClasses`)

The **data.table** package includes the following classes:

- **`IDate`**: Similar to the base `Date` class, but with a more efficient internal 
representation.
- **`ITime`**: Represents **time** information as the integer number of seconds since
midnight.

::: callout-info
data.table's `fread()` can automatically detect some date and date-time formats and
will convert them to `IDate` and `POSIXct` respectively.
:::

Background info: 
[Portable Operating System Interface (POSIX)](https://en.wikipedia.org/wiki/POSIX) is a 
set of standards for maintaining compatibility among operating systems.

## Date format specifications

This list serves as a reference for formatting functions later in the chapter.<br><br>

- **`%Y`**: Year with century, (0-9999 accepted) e.g. `2020`
- **`%y`**: 2-digit year, e.g. `22`
- **`%m`**: Month, 01-12, e.g. `03`
- **`%d`**: Day, 01-31, e.g. `04`
- **`%H`**: Hours, 00-23, e.g. `13`
- **`%I`**: Hours, 01-12, e.g. `01`
- **`%M`**: Minutes, 00-59, e.g. `38`
- **`%S`**: Seconds, 00-61 (sic!) allowing for up to two leap seconds, e.g. `54`

There are many more specifications available, see the Details section in the 
documentation for `strptime()`.
<br><br>
Note that some conversions are 
[locale](https://en.wikipedia.org/wiki/Locale_(computer_software))-specific, i.e. will
not work the same across systems.
<br><br>
Regarding the ambiguous `%y`, the documentation states:
"`%y`   Year without century (00–99). On input, values 00 to 68 are prefixed by 20 and 69 to 99 by 19 – that is the behaviour specified by the 2018 POSIX standard, but it does also say ‘it is expected that in a future version the default century inferred from a 2-digit year will change’."

## Date objects

### Character to Date: `as.Date()`

You can create a `Date` object from a character:

```{r}
x <- as.Date("1981-02-12")
x
class(x)
```

The `tryFormats` argument defines which format(s) are recognized.
<br><br>
The default is `tryFormats = c("%Y-%m-%d", "%Y/%m/%d")`, i.e. will recognize dates of 
the form "2020-11-16" or "2020/11/16".
<br><br>
Let's see what happens if a date format is *not* recognized.
Consider the 16th of November, 2021 written as follows:

```{r}
z <- "11.09.21"
```

Results in an error if passed to `as.Date()`:

```{r}
zt <- as.Date(z)
```

Passing the appropriate format, will allow the date to be read correctly:

```{r}
zt <- as.Date(z, tryFormats = "%m.%d.%y")
```

You can convert to data.table's IDate class using `as.IDate()`:

```{r}
library(data.table)
xi <- as.IDate("1981-02-12")
xi
class(xi)
```

`as.IDate()` supports extra arguments just like base `as.Date()`.
Using the same example as above, we can specify the same `tryFormats` argument:

```{r}
zi <- as.IDate(z, tryFormats = "%m.%d.%y")
zi
class(zi)
```

::: callout-important
It's always safest to specify the format of your date string explicitly.
:::

###  Get current date & time

Get current date:

```{r}
today <- Sys.Date()
today
class(today)
```

Get current date and time:

```{r}
now <- Sys.time()
now
class(now)
```

Get local timezone:

```{r}
Sys.timezone()
```

### Math on Dates

::: callout-info
The reason we use special date and date-time classes is because they allow us to 
perform mathematical operations on them.
:::

For example, we can subtract date objects to get time intervals:

```{r}
start_date <- as.Date("2020-09-15")
time_diff <- Sys.Date() - start_date
time_diff
class(time_diff)
```

::: callout-important
Note: While you can use the subtraction operator `-`, it is advised you use the 
`difftime()` function to perform subtraction on dates instead, because it allows you to 
specify units.
:::

```{r}
timepoint1 <- as.Date("2020-01-07")
timepoint2 <- as.Date("2020-02-03")
difftime(timepoint2, timepoint1, units = "weeks")
difftime(timepoint2, timepoint1, units = "days")
difftime(timepoint2, timepoint1, units = "hours")
difftime(timepoint2, timepoint1, units = "mins")
difftime(timepoint2, timepoint1, units = "secs")
```

::: callout-tip
Why is there no option for "months" or "years" in units?

Because, unlike seconds, minutes, hours, days, and weeks,
months and years do not have fixed length,
i.e. literally a month or a year are not "units" of time.
<br><br>
You can always get a difference in days and divide by 
[365.2422](https://pumas.nasa.gov/sites/default/files/examples/04_21_97_1.pdf){target="_blank"}.

:::

```{r}
DOB <- as.Date("1969-08-04")
Age <- difftime(Sys.Date(), DOB, units = "days")
Age
```
`difftime()` outputs objects of class `difftime`:

```{r}
class(Age)
```

::: callout-caution
If you convert the output of `difftime()` using an appropriate mathematical operation,
e.g. division, the units will remain, even though they are no longer correct.
Use `as.numeric()` to convert the difftime object to a regular numeric vector and
remove the units which are no longer valid.
:::

Note that the units remain after a mathematical operation:

```{r}
Age <- Age / 365.2422
Age
```

Eliminate them by converting to numeric:

```{r}
Age <- as.numeric(difftime(Sys.Date(), DOB, units = "days") / 365.2422)
Age
```

### mean/median Date

```{r}
x <- as.Date(c(5480, 5723, 5987, 6992), origin = "1970-01-01")
x
```

```{r}
mean_date <- mean(x)
mean_date
class(mean_date)
```

```{r}
median_date <- median(x)
median_date
class(median_date)
```

To verify the median, we can do a mathematical operations using multiplication, 
subtraction, and addition, and the result is still a Date(!):

```{r}
median_date_too <- x[2] + 0.5 * (x[3] - x[2])
```

### Sequence of dates

You can create a sequence of dates using `seq()`.  
If an integer is passed to `by`, the unit is assumed to be days:

```{r}
start_date <- as.Date("2020-09-14")
end_date <- as.Date("2020-12-07")
seq(from = start_date, to = end_date, by = 7)
```

Unlike mathematical operations like `difftime()` which require strict units of time, 
`seq()` can work with months and years.

Argument `by` can be one of:

"day", "week", "month", "quarter", "year".

The above is therefore equivalent to:

```{r}
seq(from = start_date, to = end_date, by = "week")
```

As with numeric sequences, you can also define the `length.out` argument:

```{r}
start_date <- as.Date("2020-01-20")
seq(from = start_date, by = "year", length.out = 4)
```

An integer can be provided as part of character input to `by`:

```{r}
start_date <- as.Date("2020-01-20")
end_date <- as.Date("2021-01-20")
seq(start_date, end_date, by = "2 months")
```

## Date-Time objects

### Character to Date-Time: `as.POSIXct()`, `as.POSIXlt()`: 

As always, it can be very informative to look at the source code. Many of these 
functions call each other internally.

Read `strptime()`'s documentation for conversion specifications. These define the order
 and format of characters to be read as year, month, day, hour, minute, and second 
 information.

For example, the international ISO 8601 standard is defined as:  
`"%Y-%m-%d %H:%M:%S"`  

```{r}
dt <- "2020-03-04 13:38:54"
dt
class(dt)
```

Use `attributes()` to see the difference between the `POSIXct` and `POSIXlt` classes:

```{r}
dt_posixct <- as.POSIXct(dt)
dt_posixct
class(dt_posixct)
str(dt_posixct)
attributes(dt_posixct)
```

```{r}
dt_posixlt <- as.POSIXlt(dt)
dt_posixlt
class(dt_posixlt)
str(dt_posixlt)
dt_posixlt$year
attributes(dt_posixlt)
```

You can compose a large number of combinations of specification to match your data.

```{r}
dt2 <- c("03.04.20 01:38.54 pm")
dt2_posix <- as.POSIXct(dt2, format = "%m.%d.%y %I:%M.%S %p")
dt2_posix
```

## `format()` Date

`format()` operates on Date and POSIX objects to convert between representations

Define Date in US format:

```{r}
dt_us <- as.Date("07-04-2020", format = "%m-%d-%Y")
dt_us
```

Convert to European format:

```{r}
dt_eu <- format(dt_us, "%d.%m.%y")
dt_eu
```

## `format()` POSIXct

```{r}
dt <- as.POSIXct("2020-03-04 13:38:54")
dt
```

```{r}
format(dt, "%m/%d/%Y @ %H:%M:%S")
```

::: callout-tip
To get the relevant R documentation pages, use `?format.Date` and `?format.POSIXct`.
To learn more about S3 classes and methods, see @sec-classes.
:::

## Extract partial date information

R includes convenient functions to extract particular seasonal information

- **weekdays()**: Get name of day of the week
- **months()**: Get name of month
- **quarters()**: Get quarter
- **julian()**: Get number of days since a specific origin

```{r}
x <- as.Date(c(18266, 18299, 18359, 18465), origin = "1970-01-01")
x
```
```{r}
weekdays(x)
months(x)
quarters(x)
julian(x)
julian(x, origin = as.Date("2020-01-01"))
```

## Timezones

R supports timezones. You can see the current timezone using `Sys.timezone()`:

```{r}
Sys.timezone()
```

Get current date and time:

```{r}
now <- Sys.time()
now
```

Get a list of all available timezones:

```{r}
OlsonNames()
```

Set to a different timezone:

```{r}
Sys.setenv(TZ = "America/New_York")
```

Note how setting the timezone changes how the date and time are printed:

```{r}
now
```

Use `format()`'s `tz` argument to convert date & time to different timezones.

```{r}
format(now, tz = "Europe/London")
format(now, tz = "Africa/Nairobi")
format(now, tz = "Asia/Tokyo")
format(now, tz = "Australia/Sydney")
```

Note that the output of `format()` is not `POSIXct` or `POSIXlt`, but a character:

```{r}
class(now)
class(format(now, tz = "Europe/London"))
```

The timezone is not part of the `POSIXct` object itself:

```{r}
attributes(now)
```

The `print()` method for datetime objects calls `format()` internally.

## See also

- [Handling Dates with **lubridate**](lubridate.qmd)
