---
knitr:
  opts_chunk:
    comment: ""
    error: true
---
# Date and Time {#datetime}

```{r}
#| echo: false
knitr::opts_chunk$set(fig.width = 5, fig.height = 5,
                      comment = NA, cache = TRUE)
```

R includes support for working with date and time data. There are three builtin classes:  

- **`Date`**: Represents **date** information (not time)
- **`POSIXct`**: Represents **date & time** information as the signed number of seconds 
since January 1, 1970 ([Unix Time a.k.a. POSIX time a.k.a. Epoch time](https://en.wikipedia.org/wiki/Unix_time))
- **`POSIXlt`**: Represents **date & time** information as a named list 
(See `base::DateTimeClasses`)

`POSIXct` is more efficient and faster than `POSIXlt` and therefore is the recommended structure
for date-time data. At the same time, `POSIXlt` can be convenient for extracting individual components using the `$` operator.

The **data.table** package includes the following classes:

- **`IDate`**: Similar to the base `Date` class, but with a more efficient internal 
representation.
- **`ITime`**: Represents **time** information as the integer number of seconds since
midnight.

::: callout-info
data.table's `fread()` can automatically detect some date and date-time formats and
will convert them to `IDate` and `POSIXct` respectively.
:::

## Date format specifications

This list serves as a reference for formatting functions later in the chapter.<br><br>

- **`%Y`**: Year with century, (0-9999 accepted) e.g. `2020`
- **`%y`**: 2-digit year, e.g. `22`
- **`%m`**: Month, 01-12, e.g. `03`
- **`%d`**: Day, 01-31, e.g. `04`
- **`%H`**: Hours, 00-23, e.g. `13`
- **`%I`**: Hours, 01-12, e.g. `01`
- **`%M`**: Minutes, 00-59, e.g. `38`
- **`%S`**: Seconds, 00-61 (sic!) allowing for up to two leap seconds, e.g. `54`

There are many more specifications available, see the Details section in the 
documentation for `strptime()`.
<br><br>
Note that some conversions are 
[locale](https://en.wikipedia.org/wiki/Locale_(computer_software))-specific, i.e. will
not work the same across systems.
<br><br>
Regarding the ambiguous `%y`, the documentation states:
"`%y`   Year without century (00–99). On input, values 00 to 68 are prefixed by 20 and 69 to 99 by 19 – that is the behaviour specified by the 2018 POSIX standard, but it does also say ‘it is expected that in a future version the default century inferred from a 2-digit year will change’."

## POSIX standard

[Portable Operating System Interface (POSIX)](https://en.wikipedia.org/wiki/POSIX) is a 
set of standards for maintaining compatibility among operating systems. We recommend using the POSIX standard for date, `"%Y-%m-%d"`, and date-time, `"%Y-%m-%d %H:%M:%S"`, formats whenever possible.

## Date objects

### Character to Date: `as.Date()`

You can create a `Date` object from a character using `as.Date()`:

```{r}
x <- as.Date("1981-02-12")
x
class(x)
```

The `tryFormats` argument defines which format(s) are recognized.
<br><br>
The default is `tryFormats = c("%Y-%m-%d", "%Y/%m/%d")`, i.e. will recognize dates of 
the form "2020-11-16" or "2020/11/16".
<br><br>
Let's see what happens if a date format is *not* recognized.
Consider the 16th of November, 2021 written as follows:

```{r}
z <- "11.09.21"
```

When passed to `as.Date()`, it will result to an error, because it is not in a recognized format:

```{r}
zt <- as.Date(z)
```

Defining format will allow the date to be read correctly:

```{r}
zt <- as.Date(z, tryFormats = "%m.%d.%y")
zt
```

You can convert to data.table's IDate class using `as.IDate()`:

```{r}
library(data.table)
xi <- as.IDate("1981-02-12")
xi
class(xi)
```

`as.IDate()` supports extra arguments just like base `as.Date()`.
Using the same example as above, we can specify the same `tryFormats` argument:

```{r}
zi <- as.IDate(z, tryFormats = "%m.%d.%y")
zi
class(zi)
```

::: callout-important
It's always safest to specify the format of your date string explicitly.
:::

###  Get current date or date & time

Get current date:

```{r}
today <- Sys.Date()
today
class(today)
```

Get current date and time:

```{r}
now <- Sys.time()
now
class(now)
```

Get local timezone:

```{r}
Sys.timezone()
```

### Math on Dates

::: callout-info
The reason we use special date and date-time classes is because they allow us to 
perform mathematical operations on them.
:::

For example, we can subtract date objects to get time intervals:

```{r}
start_date <- as.Date("2020-09-15")
time_diff <- Sys.Date() - start_date
time_diff
class(time_diff)
```

::: callout-important
Note: While you can use the subtraction operator `-`, it is advised you use the 
`difftime()` function to perform subtraction on dates instead, because it allows you to 
specify units.
:::

```{r}
timepoint1 <- as.Date("2020-01-07")
timepoint2 <- as.Date("2020-02-03")
difftime(timepoint2, timepoint1, units = "weeks")
difftime(timepoint2, timepoint1, units = "days")
difftime(timepoint2, timepoint1, units = "hours")
difftime(timepoint2, timepoint1, units = "mins")
difftime(timepoint2, timepoint1, units = "secs")
```

::: callout-tip
Why is there no option for "months" or "years" in units?

Unlike seconds, minutes, hours, days, and weeks, months and years do not have fixed length. Months can contain 28-31 days and years can contain 365 or 366 days and therefore cannot be used as units of time.
<br><br>
You can always get a difference in days and divide by 
[365.2422](https://pumas.nasa.gov/sites/default/files/examples/04_21_97_1.pdf){target="_blank"} or some other approximation.

:::

```{r}
DOB <- as.Date("1969-08-04")
Age <- difftime(Sys.Date(), DOB, units = "days")
Age
```

`difftime()` outputs objects of class `difftime`:

```{r}
class(Age)
```

::: callout-caution
If you convert the output of `difftime()` using an appropriate mathematical operation,
e.g. division, the units will remain, *even though they are no longer correct*.
Use `as.numeric()` to convert the difftime object to a regular numeric vector and
remove the units which are no longer valid.
:::

Note that the units (in this case, "days") remain after a mathematical operation.
For example, if you wanted to convert the age to years, you would want to **avoid** this:

```{r}
Age_years <- Age / 365.2422
Age_years
```

The output is still of class `difftime` with units "days".

```{r}
class(Age_years)
```

Instead, eliminate the units by converting the `difftime` object to numeric:

```{r}
Age_years <- as.numeric(Age) / 365.2422
Age_years
```

```{r}
class(Age_years)
```

### mean/median Date

```{r}
x <- as.Date(c(5480, 5723, 5987, 6992), origin = "1970-01-01")
x
```

```{r}
mean_date <- mean(x)
mean_date
class(mean_date)
```

```{r}
median_date <- median(x)
median_date
class(median_date)
```

To verify the median, we can do a mathematical operations using multiplication, 
subtraction, and addition, and the result is still a Date(!):

```{r}
median_date_too <- x[2] + 0.5 * (x[3] - x[2])
```

### Sequence of dates

We have previously used `seq()` to create numeric sequences. When applied on Date
objects, it will create sequences of dates.
Note that when `seq()` is applied on a Date object and an integer is passed to the `by` argument, the unit is assumed to be days:

```{r}
start_date <- as.Date("2020-09-14")
end_date <- as.Date("2020-12-07")
seq(from = start_date, to = end_date, by = 7)
```

Conveniently, unlike mathematical operations like `difftime()` which require strict units of time,
`seq()` can work with months and years.

Argument `by` can also be one of:

"day", "week", "month", "quarter", "year", or combination of an integer and one of these strings:

"3 days", "2 weeks", "6 months", "4 years", etc.

Therefore, `by = 7` is equivalent to `by = "7 days"`.

```{r}
seq(from = start_date, to = end_date, by = "7 days")
```

and also to `by = week` or `by = "1 week"`:

```{r}
seq(from = start_date, to = end_date, by = "week")
```

As another example, create a sequence of dates every 2 months:

```{r}
start_date <- as.Date("2020-01-20")
end_date <- as.Date("2021-01-20")
seq(start_date, end_date, by = "2 months")
```

As with numeric sequences, you can also define the `length.out` argument:

```{r}
start_date <- as.Date("2020-01-20")
seq(from = start_date, by = "year", length.out = 4)
```

## Date-Time objects

`POSIXct` and `POSIXlt` are two classes for representing date-time objects in R.

### Character to Date-Time: `as.POSIXct()` & `as.POSIXlt()`: 

We start by creating a character string representing date and time:

```{r}
dt <- "2020-03-04 13:38:54"
dt
class(dt)
```

We can then use `as.POSIXct()`  and `as.POSIXlt()` to convert the character string to `POSIXct` and `POSIXlt` date-time objects, respectively:

```{r}
dt_posixct <- as.POSIXct(dt)
dt_posixct
class(dt_posixct)
str(dt_posixct)
```

:::callout-info
`POSIXct` stores date-time information as the number of seconds since January 1, 1970.
This becomes apparent when converting the object to numeric.
:::

```{r}
as.numeric(dt_posixct)
```

```{r}
dt_posixlt <- as.POSIXlt(dt)
dt_posixlt
class(dt_posixlt)
str(dt_posixlt)
dt_posixlt$year
```

:::callout-info
`POSIXlt` stores date-time information as a named list with components for year, month, day, hour, minute, second, etc. The year component is stored as the number of years since 1900.
Confusingly, converting the object to numeric will give the number of seconds since January 1, 1970,
just like `POSIXct`.
:::

```{r}
dt_posixlt$year
dt_posixlt$year + 1900
as.numeric(dt_posixlt)
```

You can use `attributes()` to see the difference between the `POSIXct` and `POSIXlt` classes:

```{r}
attributes(dt_posixct)
attributes(dt_posixlt)
```

One of the advantages of `POSIXlt` is that you can access individual components
using the `$` operator:

```{r}
dt_posixlt$year + 1900  # year, stored as years since 1900
dt_posixlt$mon  # month is 0-indexed (0 = January, ..., 11 = December)
dt_posixlt$mday # day of month
dt_posixlt$hour # hour
dt_posixlt$min  # minute
dt_posixlt$sec  # second
```

Both functions feature a `format` argument, which defines the order and format of characters to be read as year, month, day, hour, minute, and second information.

:::callout-important
You can learn more about the format syntax by reading `strptime()`'s documentation.
:::

For example, the international [ISO 8601 standard](https://en.wikipedia.org/wiki/ISO_8601) is defined as `"%Y-%m-%d %H:%M:%S"` .

You can use any combination of specifications to match your data. For example, consider the following date-time string:

```{r}
dt2 <- c("03.04.20 01:38.54 pm")
```

The correct format for this would be as follows:

```{r}
dt2_posix <- as.POSIXct(dt2, format = "%m.%d.%y %I:%M.%S %p")
dt2_posix
```

## `format()` Date

`format()` operates on Date and POSIX objects to convert between representations

Define Date in US format:

```{r}
dt_us <- as.Date("07-04-2020", format = "%m-%d-%Y")
dt_us
```

Convert to European format (i.e. day followed by month):

```{r}
dt_eu <- format(dt_us, "%d.%m.%y")
dt_eu
```

## `format()` POSIXct

```{r}
dt <- as.POSIXct("2020-03-04 13:38:54")
dt
```

```{r}
format(dt, "%m/%d/%Y @ %H:%M:%S")
```

::: callout-tip
To get the relevant R documentation pages, use `?format.Date` and `?format.POSIXct`.
To learn more about S3 classes and methods, see @sec-classes.
:::

## Extract partial date information

R includes convenient functions to extract particular seasonal information

- **weekdays()**: Get name of day of the week
- **months()**: Get name of month
- **quarters()**: Get quarter
- **julian()**: Get number of days since a specific origin

```{r}
x <- as.Date(c(18266, 18299, 18359, 18465), origin = "1970-01-01")
x
```
```{r}
weekdays(x)
months(x)
quarters(x)
julian(x)
julian(x, origin = as.Date("2020-01-01"))
```

## Timezones

R supports timezones. You can see the current timezone using `Sys.timezone()`:

```{r}
Sys.timezone()
```

Get current date and time:

```{r}
now <- Sys.time()
now
```

You can get a list of all available timezones using `OlsonNames()`.
There are `r length(OlsonNames())` available timezones.
Let's print the first 20:

```{r}
OlsonNames()[1:20]
```

You can use `Sys.setenv()` to set the timezone temporarily within an R session:

```{r}
Sys.setenv(TZ = "America/New_York")
```

Note how setting the timezone changes how the date and time are printed:

```{r}
now
```

:::callout-important
Setting the timezone using `Sys.setenv()` affects the current R session.
To set the timezone permanently, you need to set the `TZ` environment variable
in your operating system.
:::

Use `format()`'s `tz` argument to convert date & time to different timezones.

```{r}
format(now, tz = "Europe/London")
format(now, tz = "Africa/Nairobi")
format(now, tz = "Asia/Tokyo")
format(now, tz = "Australia/Sydney")
```

Note that the output of `format()` is not `POSIXct` or `POSIXlt`, but a character:

```{r}
class(now)
class(format(now, tz = "Europe/London"))
```

The timezone is not part of the `POSIXct` object itself:

```{r}
attributes(now)
```

The `print()` method for datetime objects calls `format()` internally.

## Mixing Date and Date-Time objects

:::callout-important
Do not perform mathematical operations between Date and POSIXct/lt objects.
You may get a warning (not an error) and incorrect results.
:::

```{r}
x_date <- as.Date("2020-11-16")
y_datetime <- as.POSIXct("2020-11-18 15:30:00")
x_date
y_datetime
```

The following produces a warning and an incorrect result:

```{r}
y_datetime - x_date
```

In this case, you could convert the POSIXct object to Date first, effectively stripping the time information:

```{r}
as.Date(y_datetime) - x_date
```

Note that if you convert the Date object to POSIXct first, the time will be set to midnight (00:00:00), which may not be what you want:

```{r}
y_datetime - as.POSIXct(x_date)
```

## See also

- [Handling Dates with **lubridate**](lubridate.qmd)
