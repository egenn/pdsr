---
knitr:
  opts_chunk:
    comment: ""
---
# Strings {#sec-strings}

In programming, "strings" refer to collections of characters, i.e. text data. In R, 
text is usually stored as objects of class "character" (See @sec-datatypes). In 
statistics/machine learning/data science, we come across text in a few different ways.  

The following are all character vectors:

- Character variables: each element could include a single word or multiple words, e.g.
patient name, diagnosis, department name, medication, or entire paragraphs of text, e.g.
clinical examination notes, test reports, etc.
- Column names of a data.frame or data.table
- Factor level names

Some important string operations include:

- Creating character vectors
- Formatting strings
- Searching for patterns in strings
- Replacing patterns in strings

## Creating character vectors

[Reminder](#charactervectors): To initialize, coerce, and test character vectors, use:

* `character()`: **Initialize** empty character vector.
* `as.character()`: **Coerce** vector to character vector.
* `is.character()`: **Test** if object is character.

Initialize character vector:

```{r}
x <- character(10)
x
```

Coerce to character:

```{r}
v <- c(10, 20, 22, 43)
x <- as.character(v)
x
```

Test object is character vector:

```{r}
x <- c("PID", "Age", "Sex", "Handedness")
is.character(x)
```

### `cat()`: Concatenate and **print**

`cat()` concatenates its inputs and prints to screen (console) or to file.

`cat()` returns `NULL` invisibly, i.e. is not used to assign values. It is useful for printing informative content to the console.

It can concatenate strings along with the output of expressions:

```{r}
sbp <- 130
temp <- 98.4
cat("The blood pressure was", sbp, "and the temperature was", temp, "\n")
```

The `sep` arguments defaults to a single space (" ") and defines the separator between
the concatenated items. We often use `sep = ""` to avoid spaces, but have to manually add them 
where needed:

```{r}
weight <- 74
height <- 1.78
cat("The weight is ", weight, " and the height is ", height, 
    " giving a BMI of ", signif(weight/height^2, 3), ".\n", sep = "")
```

Use the `file` argument to write to a text file. The `append` argument allows 
using multiple consecutive `cat()` calls to append to the same file.

:::{.callout-note}
if you use `cat()` on a factor, it will print the integer index of the
factor levels.
:::

```{r}
cat(head(iris[["Species"]]), "\n")
```

If you want to print the factor levels themselves, use `as.character()`
on the factor:

```{r}
cat(as.character(head(iris[["Species"]])), "\n")
```

### `paste()`: Concatenate character vectors

In its simplest form, `paste()` acts like `as.character()`:

```{r}
v <- c(10, 20, 22, 43)
paste(v)
```

But, its main job is to combine strings.

It can combine two or more strings into one:

```{r}
first <- "Jane"
last <- "Artiste"
ID <- "8001"
paste(ID, last, first)
```

The `sep` argument defaults to a single space (" ") and defines the separator:

```{r}
paste(ID, last, first, sep = " | ")
```

`paste()` is [vectorized](#sec-vectorization), which means it can combine character 
vectors elementwise:

```{r}
id <- c("001", "010", "018", "020", "021", "051")
dept <- c("Emergency", "Cardiology", "Neurology",
         "Anesthesia", "Surgery", "Psychiatry")
paste(id, dept)
```

::: callout-tip
`paste0()` is an alias for the commonly used `paste(..., sep = "")`
:::

```{r}
paste0(id, dept)
```

As with other vectorized operations, value recycling can be very convenient. In the 
example below, the shorter vector (i.e. "Feature", a character vector of length 1) is
recycled to match the length of the longest vector (1:10).

```{r}
paste0("Feature_", 1:10)
```

The argument `collapse` helps output a *single* character object after 
combining with some string:

```{r}
paste0("Feature_", 1:10, collapse = ", ")
```

## C-style string formatting with `sprintf()`

`sprintf()` is a very powerful function for formatting strings. It is based on the C
programming language's `printf()` function. It allows you to create formatted strings
using format specifiers.

The general syntax is `sprintf(fmt, ...)`, where `fmt` is a character string containing format specifiers, and `...` are the values to be formatted.  

For example, to format a number with two decimal places:

```{r}
SBP <- 125.6783
sprintf("The systolic blood pressure is %.2f", SBP)
```

You can format any number of values:

```{r}
age <- 37
gender <- "female"
temperature <- 38.9452
sprintf("A %d-year-old %s with a temperature of %.1f C", age, gender, temperature)
```

### `sprintf()` common format specifiers

| Specifier | Description                          | Example               | With Width/Precision |
|-----------|--------------------------------------|-----------------------|----------------------|
| `%s`      | String                              | `"Hello"`             | `%10s` (right-pad to width 10) |
| `%d`      | Integer                             | `42`                  | `%5d` (right-pad to width 5), `%05d` (zero-pad) |
| `%f`      | Floating-point number               | `3.14159`             | `%8.2f` (width 8, 2 decimals) |
| `%.nf`    | Floating-point with `n` decimals    | `3.14` (for `n=2`)    | Use `%w.nf` for width `w` |
| `%e`      | Scientific notation                  | `1.23e+04`            | `%12.3e` (width 12, 3 decimals) |
| `%g`      | General format (auto `%e` or `%f`)  | `3.14` or `1e+05`     | `%10.3g` |
| `%x`      | Hexadecimal representation          | `2a` (for `42`)       | `%04x` (zero-pad to width 4) |
| `%%`      | Literal percent sign                | `%`                   | N/A |

**Width and precision modifiers:**

- **Width** (e.g., `%10s`, `%5d`): Minimum field width. Right-aligns by default, pads with spaces.
- **Left-align** (e.g., `%-10s`): Use negative width to left-align.
- **Zero-padding** (e.g., `%05d`): For numbers, pad with zeros instead of spaces.
- **Precision** (e.g., `%.2f`): Number of decimal places for floats, or max characters for strings.

::: callout-tip
**`sprintf()` vs `paste()`**:
- Use `paste()` for simple concatenation with default spacing
- Use `sprintf()` when you need precise control over formatting (decimal places, padding, alignment)
:::

### Padding and alignment

`sprintf()` can produce precisely formatted strings with padding and alignment.

#### Right-aligned with padding

You can specify a minimum width for each field by adding a number between `%` and the format specifier. If the value is shorter than the specified width, it will be padded with spaces on the left (right-aligned).

```{r}
sprintf("Patient: %5s, Age: %3d", "ID001", 42)
```

```{r}
sprintf("Patient: %10s, Age: %10d", "ID10", 7)
```

#### Left-aligned (use negative width)

Use a negative width to left-align the value within the specified width:

```{r}
sprintf("Patient: %-5s, Age: %-3d", "ID001", 48)
```

```{r}
sprintf("Patient: %-10s, Age: %-10d", "ID10", 7)
```

#### Zero-padding

Some times, you may want to pad numbers, usually integers, with leading zeros. You can do this by adding a `0` before the width specifier. For example, this can be useful when formatting IDs:

```{r}
sprintf("Patient ID: %05d", 42)
```

### Vectorization

`sprintf()` is vectorized, which means it can format multiple values at once. Each format specifier corresponds to an element in the provided vectors.

```{r}
ids <- c("82", "179", "8804")
ages <- c(45.12398, 32.98763, 67.23432)
sprintf("Patient %04s is %.1f years old", ids, ages)
```

```{r}
patient_id <- c("P001", "P002", "P003")
fasting_blood_glucose <- c(95.3, 74, 142.9)
status <- c("Normal", "Normal", "High")

sprintf("Patient %s: Fasting Blood Glucose = %5.1f mg/dL [%s]", 
        patient_id, fasting_blood_glucose, status)
```

## Common string utilities

### Get number of characters in element with `nchar()`: 

`nchar()` counts the number of characters in each **element** of a character vector:

```{r}
x <- c("a", "bb", "ccc")
nchar(x)
```

### Extract/replace substring with `substr()`: 

`substr()` allows you to get and set individual (literal) characters from a 
character vector, by position.

For example, extract the first three characters of each character element as:

```{r}
x <- c("001Emergency", "010Cardiology", "018Neurology", 
       "020Anesthesia", "021Surgery", "051Psychiatry")
substr(x, start = 1, stop = 3)
```

Neither `start` nor `stop` need to be valid character positions.

For example, if you want to get all characters from the fourth one to the last 
one, you can specify a very large `stop` as:

```{r}
substr(x, 4, 99)
```

If you start with too high an index, you end up with empty strings:

```{r}
substr(x, 20, 24)
```

**Note:** `substring()` is also available, with similar syntax to `substr()`: 
(first, last) instead of (start, stop). It is available for compatibility with S 
- check its source code to see how it's an alias for `substr()`.

To replace the first three letters, use:

```{r}
x <- c("Jan_1987")
x
```

```{r}
substr(x, 1, 3) <- "Feb"
x
```

Note that if the replacement is longer, it is "cropped" to the length of the 
substring being replaced:

```{r}
substr(x, 1, 3) <- "April"
x
```

### Split strings with `strsplit()`: 

`strsplit()` allows you to split a character vector's elements based on any 
character or [regular expression](#regex).

For example, extract individual words by splitting a sentence on each space character:

```{r}
x <- "This is one sentence"
strsplit(x, " ")
```

```{r}
x <- "14,910"
strsplit(x, ",")
```

As with all functions, you can compose multiple string operations in complex ways, and as
with all function compositions remember to build and test them step-by-step.

```{r}
x <- c("1,950", "2,347")
x
```

```{r}
lapply(strsplit(x, ","), \(i) 
  paste(i, c("thousand", "dollars"), collapse = " and "))
```

## String formatting

### Change case with `toupper()` and `tolower()`

```{r}
features <- c("id", "age", "sex", "sbp", "dbp", "hct", "urea", "creatinine")
features
```

```{r}
features_upper <- toupper(features)
features_upper
```

```{r}
features_lower <- tolower(features_upper)
features_lower
```

### Convert to Title Case

The `tools` package comes with the base R installation, but is not loaded at startup,
because it contains rather specialized functions for package development, administration,
and documentation. However, it includes the `toTitleCase()` function, which can be handy
for formatting variable names, e.g. before plotting, etc.

```{r}
features <- c("full name", "admission type", "attending name", "date of admission")
tools::toTitleCase(features)
```

### Abbreviate

`abbreviate()` allows reducing character vector elements to short, unique 
abbreviations of a minimum length (defaults to 4). For example,

```{r}
x <- c("Emergency", "Cardiology", "Surgery", "Anesthesia", 
       "Neurology", "Psychiatry", "Clinical Psychology")
abbreviate(x)
abbreviate(x, minlength = 4)
abbreviate(x, minlength = 5)
```

## Pattern matching

A very common task in programming is to find +/- replace string patterns in a 
vector of strings.  
<br><br>
- `grep()` and `grepl()` help find strings that contain a given pattern.  
- `sub()` and `gsub()` help find and replace strings.

### `grep()`: Get **integer** index of elements that match a pattern {#grep}

```{r}
x <- c("001Age", "002Sex", "010Temp", "014SBP", 
       "018Hct", "022PFratio", "030GCS", "112SBP-DBP")
grep(pattern = "SBP", x = x)
```

`grep()`'s `value` argument, which defaults to `FALSE`, allows returning the 
matched string itself (the value of the element) instead of its integer index, e.g.

```{r}
grep("SBP", x, value = TRUE)
```

### `grepl()`: Get **logical** index of elements that match a pattern {#grepl}

`grepl()` is similar to `grep()`, but returns a logical index:

```{r}
grepl("SBP", x)
```

### `sub()`: Replace **first** match of a pattern {#sub}

```{r}
x <- c("The most important variable was PF ratio. Other significant variables are listed 
in the supplementary information.")
x
```

```{r}
sub(pattern = "variable", replacement = "feature", x = x)
```

`sub()` is vectorized and "first match" refers to each element of a character vector:

```{r}
x <- c("var 1, var 2", "var 3, var 4")
sub("var", "feat", x)
```

### `gsub()`: Replace **all** matches of a pattern {#gsub}

```{r}
x <- c("The most important variable was P/F ratio. Other significant variables are listed in the supplementary information.")
x
```

```{r}
gsub(pattern = "variable", replacement = "feature", x = x)
```

"All matches" means all matches across all elements:

```{r}
x <- c("var 1, var 2", "var 3, var 4")
gsub("var", "feat", x)
```

### Match one or more patterns

You can use a vertical bar (`|`) in the pattern string to match one of multiple patterns:

```{r}
x <- c("Emergency", "Cardiology", "Neurology", "Anesthesia", 
       "Surgery", "Psychiatry")
```

```{r}
grep("Cardio|Neuro", x, value = TRUE)
```

```{r}
grep("Emerg|Surg|Anesth", x, value = TRUE)
```

## Regular expressions {#regex}

Regular expressions allow you to perform flexible pattern matching. For 
example, you can look for a pattern specifically at the beginning or the end of 
a word, or for a variable pattern with certain characteristics.
<br><br>
Regular expressions are very powerful and heavily used. They exist in multiple 
programming languages - with many similarities and some differences in their 
syntax.
<br><br>
There are many rules in defining regular expressions and they take a little getting 
used to. You can read the R manual by typing `?base::regex`.
<br><br>
Some of the most important rules are listed below.

::: callout-tip
Start with simple literal patterns and gradually add regex features. 
It is a good idea to test each component separately before combining multiple in a complex expression.
:::

### Match a pattern at the beginning of a line/string with `^` and `\\<`

Use the caret sign `^` in the **beginning** of a pattern to only match strings 
that begin with that pattern.  

Pattern `012` matches both 2nd and 3rd elements:

```{r}
x <- c("001_xyz_993", "012_qwe_764", "029_aqw_012")
x
grep("012", x)
```

By adding `^` or `\\<`, only the 2nd element in our character vector matches:

```{r}
grep("^012", x)
grep("\\<012", x)
```

### Match a pattern at the end of a line/string with `$` and `\\>`

The dollar sign `$` is used at the **end** of a pattern to only match strings 
which end with this pattern:

```{r}
x
grep("012$", x)
grep("012\\>", x)
```

```{r}
x <- c("1one", "2one", "3two", "3three")
grep("one$", x)
grep("one\\>", x)
```

### Match any character with `.`

```{r}
grep("e.X", c("eX", "enX", "ennX", "ennnX", "ennnnX"))
```

### Match preceding character one or more times with `+`

```{r}
grep("en+X", c("eX", "enX", "ennX", "ennnX", "ennnnX"))
```


### Match preceding character `n` times with `{n}`

```{r}
grep("en{2}X", c("eX", "enX", "ennX", "ennnX", "ennnnX"))
```

### Match preceding character `n` or more times with `{n,}`

```{r}
grep("en{2,}X", c("eX", "enX", "ennX", "ennnX", "ennnnX"))
```

### Match preceding character at least `n` times and no more than `m` times with `{n,m}`

```{r}
grep("en{2,3}X", c("eX", "enX", "ennX", "ennnX", "ennnnX"))
```

### Character classes {#characterclasses}

You can define a set of characters to be matched using square brackets. Any 
number of the characters in the set will be matched.

For example match and replace `$` and/or `@` with an underscore:

```{r}
x <- c("Feat1$alpha", "Feat2$gamma@5", "Feat9@zeta2")
gsub("[$@]", "_", x)
```

#### Predefined character classes

A number of character classes are predefined. Perhaps confusingly, they are 
themselves surrounded by brackets and to use them as a character class, you 
need a second set of brackets around them. Some of the most common ones 
include:  

* `[:alnum:]`: alphanumeric, i.e. all letters and numbers
* `[:alpha:]`: all letters
* `[:digit:]`: all numbers
* `[:lower:]`: all lowercase letters
* `[:upper:]`: all uppercase letters
* `[:punct:]`: all punctuation characters (! " # $ % & ' ( ) * + , - . / : ; < = > ? @ [ \ ] ^ _ ` { | } ~.)
* `[:blank:]`: all spaces and tabs
* `[:space:]`: all spaces, tabs, newline characters, and some more

Let's look at some examples using them.

Here we use `[:digit:]` to remove all numbers:

```{r}
x <- c("001Emergency", "010Cardiology", "018Neurology", "020Anesthesia", 
       "021Surgery", "051Psychiatry")
x
gsub("[[:digit:]]", "", x)
```

We can use `[:alpha:]` to remove all letters instead:

```{r}
gsub("[[:alpha:]]", "", x)
```

We can use a caret `^` in the beginning of a character class to match any 
character *not* in the character set:

```{r}
x <- c("001$Emergency", "010@Cardiology", "018*Neurology", "020!Anesthesia", 
       "021!Surgery", "051*Psychiatry")
gsub("[^[:alnum:]]", "_", x)
```

### Match from multiple character classes

```{r}
x <- c("123#$%alphaBeta")
gsub("[[:digit:][:punct:]]", "", x)
```

::: callout-note
For more information on regular expressions, 
start by reading the built-in documentation: `?regex`.
:::

### Escaping metacharacters

Metacharacters are characters that have a special meaning within a regular 
expression. They include:

`. \ | ( ) [ { ^ $ * + ?`.  

For example, we have seen above that the period matches any character and the 
square brackets are used to define [character classes](#characterclasses)
If you want to match one of these characters itself, you must "escape" it using 
a double backslash. Escaping a character simply means "this is not part of a 
regular expression, match it as is".
<br><br>
For example, to match a period (`.`) and replace it with underscores:

```{r}
x <- c("systolic.blood.pressure", "diastolic.blood.pressure")
x
gsub("\\.", "_", x)
```

If we didn't escape the period above, it would have matched *any* character:

```{r}
gsub(".", "_", x)
```

Another example, include an escaped metacharacter within a regular expression. 
In the example below we want to remove everything up to and including the 
dollar sign:

```{r}
x <- c("df$ID", "df$Age")
gsub(".*\\$", "", x)
```

Our regular expression `.*\\$`, decomposed:

- `.`: match any character
- `.*`: match any character any number of times
- `.*\\$`: match any character any number of times till you find a dollar sign

If we had not escaped the `$`, it wouldn't have worked:

```{r}
gsub(".*$", "", x)
```
