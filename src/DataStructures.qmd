---
knitr:
  opts_chunk:
    comment: ""
lightbox: true
---
# Data Structures {#sec-datastructures}

## Overview

There are 5 main data structures in R:
<br><br>

| Data Structure  | Dimensionality     | Contents        | Notes
|----------------:|-------------------:|----------------:|:--------------------------|
| **Vector**      | 1D                | homogeneous     | the "base" object
| **Matrix**      | 2D                | homogeneous     | a vector with 2 dimensions
| **Array**       | ND                | homogeneous     | a vector with N dimensions
| **List**        | 1D; can be nested | heterogeneous   | a collection of any R objects, each of any length
| **Data frame**  | 2D                | heterogeneous   | a special kind of list: a collection of (column) vectors of any type, all of the same length

**Vectors** are homogeneous data structures which means all of their elements have 
to be of the same type (see @sec-datatypes), e.g. integer, double, character, 
logical. 

**Matrices** and arrays are vectors with more dimensions,
and as such, are also homogeneous.

**Lists** are the most flexible. Their elements can be any R objects, including 
lists, and therefore can be nested.

**Data frames** are a special kind of list. Their elements are one or more 
vectors, which can be of any type, and form columns. Therefore a data.frame is a 
two-dimensional data structure where rows typically correspond to cases 
(e.g. individuals) and columns represent variables. As such, data.frames
are the most common data structure for statistical analysis.
<br><br>

```{r}
#| label: fig-datastructures
#| echo: false
#| out-width: 100%
#| fig-align: center
#| fig-cap: R Data Structure summary - Best to read through this chapter first and then refer back to this figure
knitr::include_graphics("assets/R_datastructures.png")
```

::: callout-tip
**Check object class with `class()`**.

**Check object class and contents' types with `str()`**.
:::

::: callout-caution
Many errors in R occur because a variable is, or gets coerced to, the wrong 
type or class by accident.
That's why it is essential to be able to:

- check the type of a variable using `typeof()` or `class()`

- convert (coerce) between types or classes using `as.*` functions
::: 

## Vectors

A vector is the most basic and fundamental data structure in R. 
Other data structures are made up of one or more vectors.

```{r}
x <- c(1, 3, 5, 7)
x
class(x)
typeof(x)
```

A vector has `length()` but no `dim()`, e.g.

```{r}
length(x)
dim(x)
```

### Initializing a vector

See [Initializing vectors](#initvectors)

## Matrices

A matrix is a **vector with 2 dimensions**.  

To create a matrix, you pass a vector to the `matrix()` function and specify 
number of rows using `nrow` and/or number of columns using `ncol`;

```{r}
x <- matrix(21:50,
            nrow = 10, ncol = 3)
x
class(x)
```

A matrix has length (`length(x)`) equal to the number of all (i, j) elements or 
nrow * ncol (if `i` is the row index and `j` is the column index) and 
dimensions (`dim(x)`) as expected:

```{r}
length(x)
dim(x)
nrow(x)
ncol(x)
```

### Construct by row vs. by column

By default, vectors are constructed by column (`byrow = FALSE`), e.g.

```{r}
x <- matrix(1:20, nrow = 10, ncol = 2, byrow = FALSE)
x
```

You can set the `byrow` argument to `TRUE` to fill the matrix by row instead:

```{r}
x <- matrix(1:20, nrow = 10, ncol = 2, byrow = TRUE)
x
```

### Initialize a matrix {#initmatrix}

You can initialize a matrix with some constant value, e.g. 0:

```{r}
x <- matrix(0, nrow = 6, ncol = 4)
x
```

::: callout-note
To initialize a matrix with `NA` values, it is most efficient to use `NA` of the
appropriate type, e.g. `NA_real_` for a numeric matrix, `NA_character_` for a
character matrix, etc. See [NA types](#natypes).
:::

For example, to initialize a numeric matrix with `NA` values:

```{r}
x <- matrix(NA_real_, nrow = 6, ncol = 4)
x
```

### Bind vectors by column or by row

Use `cbind` ("column-bind") to convert a set of input vectors to columns of a 
**matrix**. The vectors must be of the same length:

```{r}
x <- cbind(1:10, 11:20, 41:50)
x
class(x)
```

Similarly, you can use `rbind` ("row-bind") to convert a set of input vectors 
to rows of a **matrix**. The vectors again must be of the same length:

```{r}
x <- rbind(1:10, 11:20, 41:50)
x
class(x)
```

### Combine matrices

`cbind()` and `rbind()` can be used to combine two or more matrices together - 
or vector and matrices:

```{r}
cbind(matrix(1, nrow = 5, ncol = 2), matrix(2, nrow = 5, ncol = 4))
```

## Arrays

Arrays are **vectors with dimensions**.  
You can have 1D, 2D or any number of dimensions, i.e. ND arrays.

### One-dimensional ("1D") array

A 1D array is just like a vector but of class `array` and with `dim(x)` equal 
to `length(x)`. Remember, vectors have only `length(x)` and undefined `dim(x)`.

```{r}
x <- 1:10
xa <- array(1:10, dim = 10)
class(x)
is.vector(x)
length(x)
dim(x)
class(xa)
is.vector(xa)
length(xa)
dim(xa)
```

It is rather unlikely you will need to use a 1D array instead of a vector.

### Two-dimensional ("2D") array

A 2D array is a matrix:

```{r}
x <- array(1:40, dim = c(10, 4))
class(x)
dim(x)
```

### Multi-dimensional ("ND") array

You can build an N-dimensional array:

```{r}
x <- array(1:60, dim = c(5, 4, 3))
x
class(x)
```
You can provide names for each dimensions using the `dimnames` argument. It 
accepts a list where each elements is a character vector of length equal to the 
dimension length. Using the same example as above, we pass three character 
vector of length 5, 4, and 3 to match the length of the dimensions:

```{r}
x <- array(1:60,
            dim = c(5, 4, 3),
            dimnames = list(letters[1:5],
                            c("alpha", "beta", "gamma", "delta"),
                            c("x", "y", "z")))
```

3D arrays can be used to represent color images. Here, just for fun, we use 
`rasterImage()` to show how you would visualize such an image:

```{r}
x <- array(sample(0:255, size = 12 * 12 * 3, replace = TRUE), dim = c(12, 12, 3))
par("pty")
par(pty = "s")
plot(NULL, NULL,
     xlim = c(0, 100), ylim = c(0, 100),
     axes = FALSE, ann = FALSE, pty = "s")
rasterImage(x / 255, xleft = 0, ybottom = 0, xright = 100, ytop = 100)
```

## Lists

To define a list, we use `list()` to pass any number of objects.  
If these objects are passed as named arguments, the names will be used as 
element names:

```{r}
x <- list(one = 1:4,
          two = sample(seq(0, 100, by = 0.1), size = 10),
          three = c("mango", "banana", "tangerine"),
          four = median)
class(x)
str(x)
length(x)
```

### Nested lists

Since each element can be any object, we can build nested lists:

```{r}
x <- list(alpha = letters[sample(26, size = 4)],
          beta = sample(12),
          gamma = list(i = rnorm(10),
                       j = runif(10),
                       k = seq(0, 1000, length.out = 10)))
x
```

In the example above, alpha, beta, and gamma, are x's elements.
Notice how the length of the list refers to the number of these top-level 
elements:

```{r}
length(x)
```

### Initialize a list

When setting up experiments, it can be very convenient to set up and empty
list, where results will be stored (e.g. using a [for-loop](#forloops)):

```{r}
x <- vector("list", length = 4)
x
length(x)
```

### Add element to a list

You can add a new elements to a list by assigning directly to an element
that doesn't yet exist, which will cause it to be created:

```{r}
x <- list(a = 1:10, b = rnorm(10))
x
x$c <- 30:21
x
```

### Combine lists

You can combine lists with `c()`, just like vectors:

```{r}
l1 <- list(q = 11:14, r = letters[11:14])
l2 <- list(s = LETTERS[21:24], t = 100:97)
x <- c(l1, l2)
x
length(x)
```

## Combining different types with `c()`

It's best to use `c()` to either combine elements of the same type into a 
vector, or to combine lists.

As we've seen, if all arguments passed to `c()` are of a single type, you get a 
vector of that type:

```{r}
x <- c(12.9, 94.67, 23.74, 46.901)
x
class(x)
```

If arguments passed to `c()` are a mix of numeric and character, they all get 
***coerced to character***. 

```{r}
(x <- c(23.54, "mango", "banana", 75))
class(x)
```

If you pass more types of objects (which cannot be coerced to character) you 
get a list, since it is the only structure that can support all of them together:

```{r}
(x <- c(42, mean, "potatoes"))
class(x)
```

##  Data frames {#dataframestruc}

::: callout-note
A data frames is a **special type of list** where each element has the same 
length and forms a column, resulting in a 2D structure. Unlike matrices, each 
column can contain a different data type.
:::

data.frames are usually created with named elements:

```{r}
x <- data.frame(Feat_1 = 1:5,
                Feat_2 = rnorm(5),
                Feat_3 = paste0("rnd_", sample(seq(100), size = 5)))
x
class(x)
str(x)
class(x$Feat_1)
```

::: callout-note
Unlike a matrix, the elements of a data.frame are its columns, not the 
individual values in each position. Therefore the length of a data.frame
is equal to the number of columns.
:::

```{r}
mat <- matrix(1:100, nrow = 10)
length(mat)
df <- as.data.frame(mat)
length(df)
```

Just like with lists, you can add new columns to a data.frame using 
assignment to a new element, i.e. column:

```{r}
x <- data.frame(PIDN = sample(8001:9000, size = 10, replace = TRUE),
                Age = rnorm(10, mean = 48, sd = 2.9))
x
x$Weight <- rnorm(10, mean = 84, sd = 1.5)
x
```

## Generating sequences

Other than assigning individual elements explicitly with `c()`, there are
multiple ways to create numeric sequences.

Colon notation allows generating a simple integer sequence:

```{r}
x <- 1:5
x
typeof(x)
```

`seq(from, to, by)`

```{r}
seq(1, 10, by = 0.5)
```

`seq(from, to, length.out = n)`

```{r}
seq(-5, 12, length.out = 11)
```

`seq(object)` generates a sequence of length equal to `length(object)`

```{r}
seq(iris)
```

`seq_along(object)` is the optimized version of `seq(object)`:

```{r}
seq_along(iris)
```

`seq(n)` is equivalent to `1:n`

```{r}
seq(12)
# same output as
1:12
```

`seq_len(n)` is an optimized version of `seq(n)`:

```{r}
seq_len(12)
```

## Naming object elements

All objects' elements can be named.

### Vectors

You can create a vector with named elements:

```{r}
SBP = c(before = 179, after = 118)
SBP
```

Use `names()` to get a vector's elements' names:

```{r}
names(SBP)
```

You can add names to an existing, unnamed, vector:

```{r}
N <- c(112, 120)
names(N)
names(N) <- c("Cases", "Controls")
N
```

Matrices and data frames can have column names (`colnames`) and row names 
(`rownames`):

```{r}
xm <- matrix(1:15, nrow = 5)
xdf <- as.data.frame(xm)
colnames(xm)
colnames(xdf)
rownames(xm)
colnames(xm) <- colnames(xdf) <- paste0("Feature", seq(3))
rownames(xm) <- rownames(xdf) <- paste0("Case", seq(5))
xm
xdf
```

Lists are vectors so they have `names`. These can be defined when a list is 
created using the name-value pairs or added/changed at any time.

```{r}
x <- list(HospitalName = "CaliforniaGeneral",
          ParticipatingDepartments = c("Neurology", "Psychiatry", "Neurosurgery"),
          PatientIDs = 1001:1018)
names(x)
```

Add/Change names:

```{r}
names(x) <- c("Hospital", "Departments", "PIDs")
x
```

Remember that data a frame is a special type of list. Therefore in data frames 
`colnames` and `names` are equivalent:

```{r}
colnames(iris)
names(iris)
```

::: callout-tip
Note: As we saw, matrices have `colnames()` and `rownames()` Using `names()` on a 
matrix will assign names to *individual elements*, as if it was a long vector.
:::

## Initialize - coerce - test data structures

The following table lists the functions to *initialize*, *coerce* 
(=convert), and *test* the core data structures, which are shown in more 
detail in the following paragraphs:

| **Initialize**                      | **Coerce**        | **Test**           |
|------------------------------------:|------------------:|-------------------:|
| `matrix(NA, nrow = x, ncol = y)`    | `as.matrix(x)`    | `is.matrix(x)`     |
| `array(NA, dim = c(x, y, z))`       | `as.array(x)`     | `is.array(x)`      |
| `vector(mode = "list", length = x)` | `as.list(x)`      | `is.list(x)`       |
| `data.frame(matrix(NA, x, y))`      | `as.data.frame(x)`| `is.data.frame(x)` |

## Attributes

R objects may have some builtin attributes but you can add arbitrary attributes 
to any R object. These are used to store additional information, sometimes 
called metadata.  

### Print all attributes

To print an object's attributes, use `attributes`:

```{r}
attributes(iris)
```

This returns a named list. In this case we got names, class, and row.names of 
the iris data frame.  

### Get or set specific attributes

You can assign new attributes using `attr`:

```{r}
(x <- c(1:10))
attr(x, "name") <- "Very special vector"
```

Printing the vector after adding a new attribute, prints the attribute name 
and value underneath the vector itself:

```{r}
x
```

Our trusty `str` function will print attributes as well:

```{r}
str(x)
```

#### A matrix is a vector - a closer look

Let's see how a matrix is literally just a vector with assigned dimensions.  
Start with a vector of length 20:

```{r}
x <- 1:20
x
```
The vector has no attributes - yet:

```{r}
attributes(x)
```
To convert to a matrix, we would normally pass our vector to the `matrix()` 
function and define number of rows and/or columns:

```{r}
xm <- matrix(x, nrow = 5)
xm
attributes(xm)
```

Just for demonstration, let's instead directly add a dimension attribute to our 
vector:

```{r}
attr(x, "dim") <- c(5, 4)
x
class(x)
```

Just like that, we have created a matrix.
