---
knitr:
  opts_chunk:
    comment: ""
lightbox: true
---
# Joins {#sec-dfjoin}

We often have data from separate sources that we want to combine into a single 
data.frame. Table joins allow you to specify how to perform such a merge.
<br>

There are four main types of join operations:
<br><br>

```{r}
#| label: fig-joins
#| echo: false
#| out-width: 100%
#| fig-align: center
#| fig-cap: Common Join Operations
knitr::include_graphics("assets/R_joins.png")
```

Scenario: You have received two tables with clinical data. Each table contains 
a column with a unique identifier (ID) plus a number of variables which are 
unique to each table. You want to merge them into one big table so that for 
each ID you have all available variables. You want to make sure that the same 
ID number (e.g. 108) corresponds to the same case in both datasets, but not all 
IDs needs to be present in both datasets.

Let's make up some synthetic data:

```{r}
a <- data.frame(
  PID = 101:109,
  Hospital = c("UCSF", "HUP", "Stanford",
                "Stanford", "UCSF", "HUP", 
                "HUP", "Stanford", "UCSF"),
  Age = c(22, 34, 41, 19, 53, 21, 63, 22, 19),
  Sex = factor(c(1, 1, 0, 1, 0, 0, 1, 0, 0))
)
a
dim(a)
```

```{r}
b  <- data.frame(
  PID = 106:112,
  V1 = c(153, 89, 112, 228,  91, 190, 101),
  Department = c("Neurology", "Radiology",
                                "Emergency", "Cardiology",
                                "Surgery", "Neurology", "Psychiatry"))
b
dim(b)
```

## `merge()`

R's `merge()` function is used to perform table joins.

Syntax: `merge(x, y, by)`

where `x` and `y` and the two data.frames to join, and `by` is the column name 
of the ID variable used to identify rows. If the two datasets' ID column has a 
different name, e.g. "PatientID" in one and "PID" in the other, you can either 
rename one of them to match the other, or use the following syntax:

`merge(x, y, by.x, by.y)`

where `by.x` is the name of the ID column for the `x` dataset and `by.y` is the
 name of the ID column for the `y` dataset.

If you do not specify `by` or `by.x` and `by.y` arguments, `merge()` defaults 
to using the intersection of column names of the two input datasets. From 
`merge()`'s documentation: `by = intersect(names(x), names(y))`
<br><br>
In our example datasets above, this works as expected and identifies "PID" as 
the common column:

```{r}
intersect(names(a), names(b))
```

## Inner join

The default arguments of `merge()` perform an **inner join**:

```{r}
ab_inner <- merge(a, b)
# same as
ab_inner <- merge(a, b, by = "PID")
# same as
ab_inner <- merge(a, b, all = FALSE)
ab_inner
```

Note that the resulting table only contains ***cases found in both datasets***, 
i.e. IDs 106 through 109

## Outer join

You can perform an **outer join** by specifying `all = TRUE`:

```{r}
ab_outer <- merge(a, b, all = TRUE)
# same as
ab_outer <- merge(a, b, by = "PID", all = TRUE)
ab_outer
```

Note that the resulting data frame contains 
***all cases found in either dataset*** and missing values are represented with 
`NA`.

## Left outer join

You can perform a **left outer join** by specifying `all.x = TRUE`:

```{r}
ab_leftOuter <- merge(a, b, all.x = TRUE)
ab_leftOuter
```

Note that the resulting data frame contains 
***all cases present in the left input dataset*** (i.e. the one defined first 
in the arguments) only. 

## Right outer join

You can perform a **right outer join** by specifying `all.y = TRUE`:

```{r}
ab_rightOuter <- merge(a, b, all.y = TRUE)
ab_rightOuter
```

Note how the resulting data frame contains 
***all cases present in the right input dataset*** (i.e. the one defined 
second in the arguments) only.

## Specifying columns 

As mentioned above, if the ID columns in the two data.frames to be merged do 
not have the same name, you can specify them directly:

```{r}
a <- data.frame(
  PID = 101:109,
  Hospital = c(
    "UCSF", "HUP", "Stanford",
    "Stanford", "UCSF", "HUP",
    "HUP", "Stanford", "UCSF"
  ),
  Age = c(22, 34, 41, 19, 53, 21, 63, 22, 19),
  Sex = factor(c(1, 1, 0, 1, 0, 0, 1, 0, 0))
)
a
```

```{r}
b <- data.frame(
  PatientID = 106:112,
  V1 = c(153, 89, 112, 228, 91, 190, 101),
  Department = c(
    "Neurology", "Radiology",
    "Emergency", "Cardiology",
    "Surgery", "Neurology", "Psychiatry"
  )
)
b
```

```{r}
ab_inner <- merge(a, b, by.x = "PID", by.y = "PatientID")
ab_inner
```

## Subsetting

Remember that whatever operation you are performing on one or multiple 
data.frames, you can always subset rows and/or columns as needed. If, for 
example, you don't need to include the "V1" variables in your join, you can 
directly exclude it:

```{r}
merge(a, b[, -2], by.x = "PID", by.y = "PatientID")
```

## Joining wide and long tables

The columns defined using the `by` or `by.x` and `by.y` arguments determine
which rows from each table to include in the merge. These do not have to 
identify unique rows in either dataset: for example, if you are merging on
a `PID` column, either table can include repeated PIDs. This allows merging
wide and long tables.

As an example, we create a long and a wide table and merge them:

```{r}
dat_long <- data.frame(
    Account_ID = c(8001, 8002, 8003, 8004, 8001, 8002, 8003, 8004, 
            8001, 8002, 8003, 8004, 8001, 8002, 8003, 8004), 
    Age = c(67.8017038366664, 42.9198507293701, 46.2301756642422, 
            39.665983196671, 67.8017038366664, 42.9198507293701, 
            46.2301756642422, 39.665983196671, 67.8017038366664, 
            42.9198507293701, 46.2301756642422, 39.665983196671, 
            67.8017038366664, 42.9198507293701, 46.2301756642422, 
            39.665983196671), 
    Admission = c("ED", "Planned", "Planned", "ED", "ED", "Planned", 
            "Planned", "ED", "ED", "Planned", "Planned", "ED", "ED", "Planned", 
            "Planned", "ED"), 
    Lab_key = c("RBC", "RBC", "RBC", "RBC", "WBC", "WBC", "WBC", "WBC", 
            "Hematocrit", "Hematocrit", "Hematocrit", "Hematocrit", 
            "Hemoglobin", "Hemoglobin", "Hemoglobin", "Hemoglobin"), 
    Lab_value = c(4.63449321082268, 3.34968550627897, 4.27037213597765, 
            4.93897736897793, 8374.22887757195, 7612.37380499927, 
            8759.27855519425, 6972.28096216548, 36.272693147236, 
            40.5716317809522, 39.9888624177955, 39.8786884058422, 
            12.6188444991545, 12.1739747363806, 15.1293426442183, 
            14.8885696185238)
)
dat_long <- dat_long[order(dat_long$Account_ID), ]
dat_long
```

```{r}
dat_wide <- data.frame(
    Account_ID = c(8002, 8003, 8005),
    Department = c("Cardiology", "Neurology", "Surgery"),
    Site = c("ZSFG", "Mission_Bay", "Mt_Zion")
)
dat_wide
```

Inner join:

```{r}
merge(dat_wide, dat_long)
```

Outer join: 

```{r}
merge(dat_wide, dat_long, all = TRUE)
```

As you see above, the output of a join between a wide and long table will be a 
long table. Depending on the specific analysis goals, one can keep the data
in long format, reshape one table prior to merging, or reshape the merged table
after joining (See @sec-dfreshape for reshaping).

## Renaming non-unique columns

Two tables may contain shared column names on columns other than those used for merging.
In such cases, the `suffixes` argument, which defaults to `c(".x",".y")`, defines the 
suffix to be added to the left and right tables, respectively.

```{r}
visit1 <- data.frame(ID = c(8001, 8002, 8003),
        Height = c(1.67, 1.79, 1.74),
        SBP = c(124, 138, 129))
visit2 <- data.frame(ID = c(8002, 8003, 8004),
        Department = c("Cardiology", "Neurology", "Surgery"),
        SBP = c(128, 136, 131))
merge(visit1, visit2, by = "ID", suffixes = c("_visit1", "_visit2"))
```

Note that in these cases, the `by` argument, or the `by.x` and `by.y` arguments, need to be specified
so that the other shared column is not erroneously included in the matching.

## See also

- [data.table joins](#sec-dtjoin)
- [dplyr joins](#sec-dplyrjoin)
