---
execute: 
  warning: false
knitr:
  opts_knit:
    global.par: true
  opts_chunk: 
    comment: ''
    fig.width: 6
    fig.height: 6
---
# Base Graphics {#sec-basegraphics}
```{r}
#| echo: false
par(family = "Helvetica")
```
This chapter is an introduction to what is known as base graphics, which is 
provided by the built-in **graphics** package. This includes a large number of
functions to create plots, add graphical elements to existing plots, and control
plotting parameters.  
By no means are base graphics *basic* - they are powerful and flexible, and can be used to 
produce publication-quality graphics. In fact, you may realize that a large number of plots you see
in scientific publications are produced using base R graphics.
Default argument values of base graphics functions produce minimalist-looking
plots, which can be customized extensively. In practice, only a little customization is usually
needed to produce clean-looking and informative plots.  
In this chapter we shall begin with simple plots and demonstrate some of the more 
common/useful ways to customize them. The extensive documentation of base graphics functions details
all the ways the can be further customized.
<br><br>
Some of the most common and important types of plots can be built with the
following functions:

| Plot type     | Command                  |
|--------------:|:-------------------------|
| Boxplot       | `boxplot(x)`             |
| Histogram     | `hist(x)`                |
| Density plot  | `plot(density(x))`       |
| Barplot       | `barplot(x)`             |
| Scatterplot   | `plot(x, y)`             |
| Line plot     | `plot(x, y, type = 'l')` |
| Heatmap       | `heatmap(x)`             |
| Mosaic plot   | `mosaicplot(table(x))`   |

R documentation for each of the above commands provides extensive coverage of 
graphical parameters. `?par` gives the main documentation file for a long list 
of graphical parameters. These can be set with the `par()` command 
*before* using any plotting command. Most can also be passed to individual
plotting commands. `par()` documentation specifies which parameters can only be
set with a call to `par()`.

## Boxplot

Input: One or more **vectors** of any length.
<br><br>
A boxplot is a way to visualize the distribution of one or more vectors. 
Each vector does not need to be of the same length. For example, if you are 
plotting lab results of a patient and control group, they do not have to 
contain the same number of individuals.
<br><br>
`boxplot()` makes it easy to plot data from one or more objects.

It can accept:

- Individual vectors: each vector forms a boxplot
- Matrix, data.frame, list: each column of a matrix, each element/i.e. column of 
a data.frame, each element of a list form a boxplot
- Formula of the form `variable ~ factor`: variable is split by factor and each
level forms a boxplot

### Single vector

```{r}
x <- rnorm(400, mean = 23, sd = 4)
boxplot(x)
```

### Anatomy of a boxplot

A boxplot shows: 

- the [median](https://en.wikipedia.org/wiki/Median)
- first and third [quartiles](https://en.wikipedia.org/wiki/Quartile)
- outliers (defined as `x < Q1 - 1.5 * IQR | x > Q3 + 1.5 * IQR`)
- range after excluding outliers

```{r}
#| echo: false
#| fig-height: 6
#| fig-width: 5
#| fig-cap: "Boxplot anatomy"
# Get par
par_og <- par(no.readonly = TRUE)

lty <- 3
lwd <- 2
bg <- "gray10"

# Data
set.seed(2020)
x <- rnorm(600)
l <- 0.7
r <- 1.3
.min <- min(x)
.max <- max(x)
.median <- median(x)
.q1 <- quantile(x, 0.25)
.q3 <- quantile(x, 0.75)
.iqr <- .q3 - .q1
.q1m1.5iqr <- .q1 - 1.5*.iqr
.q3p1.5iqr <- .q3 + 1.5*.iqr
.outliers <- x < .q1m1.5iqr | x > .q3p1.5iqr
.r <- range(x[!.outliers])
.min <- min(x)
.max <- max(x)

# boxplot
par(bty = "none", bg = bg, mar = c(1, 0.5, 1, 0.5))
boxplot(x, axes = FALSE, col = "gray40", border = "white", boxwex = 0.35)

# '- median
segments(l + 0.025, .median, r - 0.025, .median, 
         col = "#53FEBE", lty = lty, lwd = lwd)
text(r, .median, "median", col = "#53FEBE", adj = c(0, 0.5))

# '- Q1
segments(l, .q1, r, .q1, 
         col = "#0290EE", lty = lty, lwd = lwd)
text(r, .q1, "Q1", col = "#0290EE", adj = c(0, 1))

# '- Q3
segments(l, .q3, r, .q3, 
         col = "#0290EE", lty = lty, lwd = lwd)
text(r, .q3, "Q3", col = "#0290EE", adj = c(0, 0))

# '- IQR
arrows(l, .q1, l, .q3, code = 3, col = "#0290EE", lwd = lwd)
text(l - 0.03, .median, "IQR", col = "#0290EE", adj = c(0.5, 0), srt = 90)

# '- min max
segments(l, .min, r, .min, col = "gray45", lty = lty, lwd = lwd)
text(r, .min, "min", col = "gray45", adj = c(0, 1))
segments(l, .max, r, .max, col = "gray45", lty = lty, lwd = lwd)
text(r, .max, "max", col = "gray45", adj = c(0, 0))

# '- range excl. outliers
segments(l - 0.085, .r[1], r + 0.085, .r[1],
         col = "#FE4AA3", lty = lty, lwd = lwd)
segments(l - 0.085, .r[2], r + 0.085, .r[2],
         col = "#FE4AA3", lty = lty, lwd = lwd)
arrows(l - 0.085, .r[1], l - 0.085, .r[2], code = 3, col = "#FE4AA3")
text(l - 0.11, .median, "Range excluding outliers", col = "#FE4AA3", 
     adj = c(0.5, 0), srt = 90)

# '- outliers
points(rep(1, sum(.outliers)), x[.outliers], col = "red", pch = 1)
text(1, .min, "outliers", col = "red", adj = c(0, 1.5), xpd = TRUE)
text(1, .max, "outliers", col = "red", adj = c(0, -1), xpd = TRUE)

# Restore par
par(par_og)
```

Some synthetic data:

```{r}
alpha <- rnorm(10)
beta <- rnorm(100)
gamma <- rnorm(200, mean = 1, sd = 2)
```

### Individual vectors

```{r}
boxplot(alpha, beta, gamma)
```

### Matrix

Passing a matrix to `boxplot()` draws one boxplot per column:

```{r}
mat <- sapply(seq(5), function(i) rnorm(20))
mat
boxplot(mat)
```

### Data frame

Passing a data.frame to `boxplot()` draws one boxplot per element/column:

```{r}
boxplot(iris[, 1:4])
```

### List

```{r}
dl <- list(alpha, beta, gamma)
boxplot(dl)
```

Note that supplying a named list is an easy way to get names to show on the
categorical axis:

```{r}
boxplot(dl)
```

### Formula interface

The formula interface can be used to group any vector by a factor of the same 
length.

Let's use the built-in `sleep` dataset which shows the effect of two different 
drugs in increasing hours of sleep compared to a control group.

```{r}
dl <- list(alpha = alpha, beta = beta, gamma = gamma)
boxplot(extra ~ group, data = sleep)
```

### Common arguments

- `col`: Set boxplot fill color
- `border`: Set boxplot border color
- `names`: Group names on the categorical axis
- `breaks`: Number or value of breakpoints 

Here we define two custom colors using their hexadecimal RGB code and use the 
solid version for the border and a 33% transparent version for the fill,
using `adjustcolor()`.

Note that we do not need two separate colors to produce an unambiguous plot 
since they are clearly labeled in the y-axis. It is often considered 
desirable/preferred to use the minimum number of different colors that is 
necessary.

Color coding like the following could be useful if, for example, data 
from the two groups were used on another plot as well, like a scatterplot, in a 
multi-panel figure.

```{r}
col <- c("#16A0AC", "#FA6E1E")
boxplot(extra ~ group, data = sleep,
        col = adjustcolor(col, alpha.f = 0.33), 
        border = col)
```

```{r}
str(sleep)
```

```{r}
boxplot(extra ~ group, data = sleep)
```

```{r}
boxplot(extra ~ group, data = sleep,
        col = adjustcolor(col, alpha.f = 0.33),
        border = col,
        names = c("Drug A", "Drug B"))
```

## Histogram

Input: **numeric vector**
<br><br>
A histogram is another way to visualize the distribution of a continuous
variable. First, the data is binned and then the number of elements that fall 
in each bin is counted. The histogram plot draws bars for each bin whose heights 
correspond to the count of elements in the given interval.

```{r}
hist(x)
```

### Common arguments

- `col`: bar color
- `border`: border color, set to NA to omit borders

```{r}
hist(x, col = "slategray", lwd = 3)
```

```{r}
hist(x, 
     col = adjustcolor("slategray", alpha.f = 0.5), 
     border = "slategray")
```

The `breaks` argument can be used to define the breakpoints to use for the 
binning of the values of the input. See the documentation in for the full range 
of options. An easy way to control the number of bins is to pass an integer to 
the `breaks` argument.
<br><br>
Note: Depending on the length of x and its distribution, it 
may or may not be possible to use the exact number requested, but the closest 
possible number will be used.

```{r}
hist(x,
     col = adjustcolor("slategray", alpha.f = 0.5), 
     border = "slategray",
     breaks = 24)
```

## Density plot

Input: numeric vector
<br><br>
A density plot is a another way to display an approximation of the 
distribution of a continuous variable. The `density()` function estimates the 
density of x and its output can be passed to directly to `plot()`:

```{r}
plot(density(x))
```

You can use `main = NA` or `main = ""` to suppress printing a title.
You can change the box type using the `bty` argument

```{r}
plot(density(x), 
     col = "blue",
     bty = "n",
     main = NA)
```

## Barplot

The `barplot()` function lets you plot bar plots easily. It accepts either

- R objects: **vector** or **matrix**
- formula interface

Let's look at the VADeaths built-in dataset which describes death rater per 
1000 population per year broken down by age range and population group.

### Single vector

We can plot a single column or row. Note how R automatically gets the 
corresponding dimension names. For this example we use the builtin `VADeaths` 
dataset, which is a matrix.

```{r, fig.width=6}
barplot(VADeaths[, 1])
```

```{r, fig.width=6}
barplot(VADeaths[1, ])
```

#### **`col`** and **`border`**: bar fill and border color

As in most plotting functions, color is controlled by the **`col`** argument. 
When available, **`border`** can be set to the same or different color:

```{r, fig.width=6}
barplot(VADeaths[, 1],
  col = "aquamarine3", border = "aquamarine3"
)
```

### Matrix

We can draw barplots of multiple columns at the same time by passing a matrix 
input. The grouping on the x-axis is based on the columns. By default, data 
from different rows is stacked. The argument `legend.text` can be used to add a 
legend with the row labels:

```{r, fig.width=7}
barplot(VADeaths, legend.text = TRUE)
```

Alternatively, we can draw groups of bars beside each other with the argument 
`beside = TRUE`:

```{r fig.width= 7, fig.height=5}
barplot(VADeaths, beside = TRUE,
        legend.text = TRUE, args.legend = list(x = "topright"))
```

To use custom colors, we pass a vector of length equal to the number of bars 
within each group. These will get recycled across groups, giving a consistent 
color coding.

Here, we use the `adjustcolor()` function again to produce 5 shades of navy.

```{r fig.width= 7, fig.height=5}
col <- sapply(seq(0.2, 0.8, length.out = 5), function(alpha) adjustcolor("navy", alpha))
barplot(VADeaths,
        col = col,
        border = NA,
        beside = TRUE,
        legend.text = TRUE, args.legend = list(x = "topright"))
```

### Formula

The formula notation allows you to specify one or more continuous variables on 
the LHS and one or more categorical on the RHS. You first need to summarize
the data to get one value per category. We'll use the penguin data and get 
means of continuous variable as an example only - this data would be best 
suited for boxplots that give a picture of the entire distribution. Barplots
are best for count data.

```{r}
library(palmerpenguins)
str(penguins)
```

#### Single continuous by single categorical variables:

```{r}
bill_length_by_island <- aggregate(bill_length_mm ~ island,
                                   data = penguins, mean)
bill_length_by_island
```

```{r}
barplot(bill_length_mm ~ island, data = bill_length_by_island)
```

#### Single continuous by multiple categorical variables:

```{r}
bill_length_by_island_x_species <- aggregate(bill_length_mm ~ island + species,
                                             data = penguins, mean)
bill_length_by_island_x_species
```

```{r}
barplot(bill_length_mm ~ island + species,
        data = bill_length_by_island_x_species,
        legend = TRUE)
```

Or, if you prefer, beside instead of stacked. Note that in this dataset
not all species are present in each island.

```{r}
barplot(bill_length_mm ~ island + species,
        data = bill_length_by_island_x_species,
        beside = TRUE, legend = TRUE)
```

Let's use the `args.legend` argument to push the legend to the right to avoid overlap:

```{r}
barplot(bill_length_mm ~ island + species,
        data = bill_length_by_island_x_species,
        beside = TRUE, legend = TRUE,
        args.legend = list(x = "topright", inset = c(-0.08, 0)))
```

What the above value to `args.legend` does is to:

- place the legend to the top-right of the plot (which is the default)
- move it 8% of the width of the plot to the right.

The `inset` argument is a vector of length 2, where the first value is the amount to move the legend along the x-axis, i.e. to the right for positive number and to the left for negative numbers, and the second value is the amount to move it along the y-axis, i.e. up for positive numbers and down for negative numbers.

#### Multiple continuous by single categorical

```{r}
bill_and_flipper_length_by_island <- 
     aggregate(cbind(bill_length_mm, flipper_length_mm) ~ island,
     data = penguins, mean)
bill_and_flipper_length_by_island
```

```{r}
barplot(cbind(bill_length_mm, flipper_length_mm) ~ island, 
        data = bill_and_flipper_length_by_island,
        beside = TRUE, legend = TRUE)
```

#### Multiple continuous by multiple categorical

The `barplot()` function does not allow you to specify multiple categorical 
variables on the RHS if you are using multiple continuous variables on the LHS.
It is, however, trivial to create an interaction of multiple categorical
variables using `interaction()`

```{r}
island_x_species <- interaction(penguins$island, penguins$species, sep = " x ")
bill_and_flipper_length_by_island_x_species <- 
     aggregate(cbind(bill_length_mm, flipper_length_mm) ~ island_x_species,
     data = penguins, mean)
bill_and_flipper_length_by_island_x_species
```

```{r}
barplot(cbind(bill_length_mm, flipper_length_mm) ~ island_x_species, 
        data = bill_and_flipper_length_by_island_x_species,
        beside = TRUE, legend = TRUE)
```

## Scatter plot

Input: 2 **numeric vectors**
<br><br>
A 2D scatterplot displays points using two numeric vectors as X and Y 
coordinates.

Let's create some synthetic data:

```{r}
set.seed(2020)
x <- rnorm(300)
y_true <- 12 + x^3
y <- 12 + x^3 + 2.5 * rnorm(300) * 1.5
```

```{r}
plot(x, y)
```

### Common arguments

- `main`: Plot title
- `xlab`, `ylab`: x- and y-axis labels
- `col`: Marker color
- `bty`: Box type (lines surrounding plot)
- `pch`: Point character

### **`col`**

See [Colors in R](#sec-colors) to learn about the different ways to define 
colors in R.

Some common ways include:

- By name, using one of 657 names given by `colors()`, e.g. "magenta", "navy", "cyan"
- By RGB code in hexadecimal format, e.g. "#ff0000" is red

```{r}
plot(x, y, col = "red")
```

### **`bty`**

There are 7 bty options: "o" "l", "7", "c", "u", or "]" and "none".
They produce a box that resembles the corresponding symbol.
"none" draws no box but allows the axes to show:

```{r}
plot(x, y, bty = "l")
```

```{r}
plot(x, y, bty = "none")
```

### **`pch`**

The default point character is a circle as seen above. This helps visualize 
overlapping points (especially for devices that do not support transparency).  

There are 25 point characters, designated by integers 1 through 25.

Here's a preview of all 25 `pch` options.
`pch` types 21 through 25 can be filled by a color specified by `bg`.

```{r}
plot(1:25, rep(1, 25), pch = 1:25, bg = "blue")
```

Let's use a solid disc:

```{r}
plot(x, y, bty = "n", pch = 16)
```

We cannot tell how many points are overlapping in the middle and therefore it's 
a good idea to make the points a little transparent.

There are different ways to add transparency (see [Colors](#colors)). The 
easiest way is probably to use `adjustcolor()`. In the context of colors, 
`alpha` refers to transparency: `a = 1` is opaque and `a = 0` is completely 
transparent (therefore use a value greater than 0).

```{r}
plot(x, y,
     bty = "n", pch = 16,
     col = adjustcolor("skyblue", alpha.f = 0.5))
```

### grid

We can add a grid behind the plot area using the `panel.first` argument, which 
accepts a graphical expression (a function that draws something), which will be 
evaluated before plotting the points on the graph (therefore appears behind the 
points).

```{r}
plot(x, y,
     bty = "n", pch = 16,
     col = adjustcolor("skyblue", alpha.f = 0.5),
     panel.first = grid(lty = 1, col = 'gray90'))
```

### **`main`**, **`xlab`**, **`ylab`**

```{r}
plot(x, y,
     bty = "n", pch = 16,
     col = adjustcolor("skyblue", alpha.f = 0.5),
     panel.first = grid(lty = 1, col = 'gray90'),
     main = "y vs. x",
     xlab = "Variable x (xunits)",
     ylab = "Variable y (yunits)")
```

Note that depending on where you intend to display the plot, you may leave the 
title blank and instead place it in the figure caption along with an 
explanation of the data (e.g. in a journal article).

## Heatmap

Input: **matrix**
<br><br>
A heatmap is a 2D matrix-like plot with x- and y-axis labels and a value in 
each cell. It can be used to display many different types of data. A common 
usage in data science is to plot the correlation matrix of a set of numerical 
features. In many cases, the rows and/or columns of a heatmap can be reordered 
based on hierarchical clustering.

```{r}
x <- sapply(1:20, function(i) rnorm(20))
x_cor <- cor(x)
```

By default, the `heatmap()` function draws marginal dendrograms and rearranges 
rows and columns. We can prevent that by setting `Rowv` and `Colv` to `NA`:

```{r}
heatmap(x_cor, Rowv = NA, Colv = NA)
```

To allow clustering and row and column reordering, use the defaults:

```{r}
heatmap(x_cor)
```

## Mosaic plot {#mosaicplot}

Mosaic plots are used to visualize contingency tables. They can be informative 
to look at during data exploration. They are less likely to be included in a 
research article where it's probably best to show the table itself.
<br><br>
Some synthetic data:

```{r}
set.seed(2021)
Cohort <- factor(sample(c("Control", "Case"), size = 500, replace = TRUE),
                 levels = c("Control", "Case"))
Sex <- factor(
  sapply(seq(Cohort), 
     \(i) sample(c("Male", "Female"), size = 1,
     prob = if (Cohort[i] == "Control") c(1, 1) else c(2, 1))))
```

Use `mosaicplot()` on the output of `table()`:

```{r}
mosaicplot(table(Cohort), main = "Cases vs. Controls")
```

We can plot the breakdown of sexes, this time also adding color:

```{r}
mosaicplot(table(Sex), main = "Males vs. Females",
           col = c("orchid", "skyblue"))
```

Cross-tabulating is usually most informatively. We us the same color for the 
sexes, which will be recycled.

We also remove the border for a cleaner look:

```{r}
mosaicplot(table(Cohort, Sex),
           color = c("orchid", "skyblue"),
           border = NA,
           main = "Cohort x Sex")
```

## Graphical parameters

The `par()` function allows setting or querying graphical parameters of the 
base graphics system. Have a look at its documentation (`?par`).
<br><br>
For `par()` to have an effect, it must be called prior to the plotting function
whose output you wish to customize.
<br><br>
Some graphical parameters can only be set with a call to `par()`. However, many 
parameters can also be passed using the `...` construct of each base plotting 
function.  
<br><br>
Some common base graphical parameters:  

* ***pch***: Point character
* ***col***: Color
* ***cex***: Character expansion, i.e. relative size
* ***bty***: Box type
* ***xlab***: x-axis label
* ***ylab***: y-axis label
* ***main***: Main title
* ***mar***: Plot margins

You can see what the current value of these parameters is by calling `par()` or 
directly accessing a specific parameter:

```{r}
par()$mar
```

`mar` sets the plot margins. It is a vector of length 4 and each number 
corresponds to the bottom-left-top-right margin, in that order. Use it to 
reduce empty white space between plots or add space if labels are getting 
cropped, for example.
<br><br>
Always make sure that your plotting characters, axis labels and titles are 
legible.

* ***cex***: Character expansion for the plotting characters
* ***cex.axis***: cex for axis annotation
* ***cex.lab***: cex for x and y labels
* ***cex.main***: cex for main title

Note: All of these can be set either with a call to `par()` prior to plotting 
or passed as arguments in a plotting command, like `plot()`.
<br><br>
There is one important distinction: `cex` set with `par()` (which defaults to 
1), sets the baseline and all other `cex` parameters multiply it. However, 
`cex` set within `plot()` still multiplies `cex` set with `par()`, but only 
affects the plotting character size.

### Save and reload graphical parameters

You can save all current graphical parameters by assigning the 
output of `par()` to an object.

```{r}
#| eval: false
par_default <- par()
```

There are a few parameters that you cannot control, those are read-only. You 
can exclude those since you cannot change them anyway:

```{r}
#| eval: false
par_default <- par(no.readonly = TRUE)
```

If you make changes to `par()` to produce plots and you want to recover the 
parameters you saved above, you can reload them by passing them to `par()`:

```{r}
#| eval: false
par(par_default)
```

Alternatively, you can always restart the graphics device using `dev.off()` and 
then making a new plot. 
<br><br>
Note: here "device" does not refer to a physical device but to  different 
software graphics interfaces that can be used to display a plot to screen or 
[save to file](#saveplots).

```{r}
dev.off() # shuts down graphics device
plot(rnorm(10))
```

`dev.new()` can be used to manually start a new graphics device.

## Multipanel plots

There are different ways to create multipanel plots, but probably the most 
straightforward is to use either the `mfrow` or the `mfcol` argument of `par()`.

```{r}
set.seed(2020)
x <- rnorm(500)
y <- x^3 + rnorm(500) * 2
z <- x^2 + rnorm(500)
```

Both `mfrow` and `mfcol` accept an integer vector of length 2 indicating number 
of rows and number of columns, respectively. With `mfrow`, the plots are drawn 
row-wise and with `mfcol` they are drawn column-wise. Remember to reset `mfrow` 
or `mfcol` back to `c(1, 1)`

For example, let's plot a 2-by-3 panel of plots, drawn row-wise:

```{r}
#| fig-width: 7
#| fig-height: 5
# Get the current parameters before changing them
par_og <- par(no.readonly = TRUE)
par(mfrow = c(2, 3), mar = c(4, 4, 1, 1))
hist(x, col = "#052049bb", border = "white", main = "")
hist(y, col = "#052049bb", border = "white", main = "")
hist(z, col = "#052049bb", border = "white", main = "")
plot(x, y, col = "#05204955", pch = 16, bty = "n")
plot(x, z, col = "#05204955", pch = 16, bty = "n")
plot(y, z, col = "#05204955", pch = 16, bty = "n")
# Restore mfrow to one figure at a time
# This is not necessary if you are running the line below
# which restores all parameters
par(mfrow = c(1, 1))
# Restore all parameters
par(par_og)
```

## Saving plots to file {#saveplots}

You can save base graphics to disk using a number of different file formats. 
To do this, you have to:  

* Open a graphics device - e.g. `pdf("path/to/xy_scatter.pdf")`
* Write to it - e.g. `plot(x, y)`
* Close graphics device - `dev.off()`

The following commands are used to open graphical devices that will save to a 
file of the corresponding type.

[Raster graphics](https://en.wikipedia.org/wiki/Raster_graphics):

- `bmp(filename = "path/to/file", width = [in pixels], height = [in pixels])`
- `jpeg(filename = "path/to/file", width = [in pixels], height = [in pixels])`
- `png(filename = "path/to/file", width = [in pixels], height = [in pixels])`
- `tiff(filename = "path/to/file", width = [in pixels], height = [in pixels])`

[Vector graphics](https://en.wikipedia.org/wiki/Vector_graphics):

- `svg(filename = "path/to/file", width = [in inches], height = [in inches]`
- `pdf(file = "path/to/file", width = [in inches], height = [in inches])`

Notice the difference when writing to PDF: you define a `file` instead of a 
`filename`, and width and height are in ***inches***, not pixels.

It is recommended to save plots in PDF format because this will save plots as
[vector graphics](https://en.wikipedia.org/wiki/Vector_graphics) without any
loss of information. It is easy to export to other graphics formats later on if 
and as needed, e.g. to the specification of a journal, which often ask
for high resolution 
[bitmap files](https://en.wikipedia.org/wiki/Raster_graphics).

```{r}
#| eval: false
pdf("~/Desktop/plot.pdf", width = 5, height = 5)
plot(iris$Sepal.Length, iris$Petal.Length,
     pch = 16,
     col = "#18A3AC66",
     cex = 1.8,
     bty = "n", # also try "l"
     xlab = "Sepal Length", ylab = "Petal Length")
dev.off()
```

::: callout-tip
Scientific plots need to be clear and informative. It's good practice to only introduce those 
graphical elements and properties necessary to convey the required information. A good example is 
the use of color: A scatterplot with multiple lines requires different color or line type to
distinguish between traces. A barplot may not require different color per bar since the bars may be
labeled directly. However, if using groups of plots together, you may want to use the same color to
represent the same group across plots.
:::
