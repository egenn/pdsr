[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "PDSR",
    "section": "",
    "text": "PDSR\n\n\nProgramming for Data Science in R is an introductory- to intermediate-level online programming learning resource for R.\nIt is frequently updated and serves as the online reference for\nUCSF DATASCI 213 & 214.\n\n\nE.D. Gennatas MBBS AICSM PhD\nLaboratory of Computational Medicine,\nUniversity of California, San Francisco",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "Preface.html",
    "href": "Preface.html",
    "title": "\n1  Preface\n",
    "section": "",
    "text": "1.1 R code blocks\nThroughout this book you will see blocks with R code followed by its output, if the given code produced any, like in the following example:\nx &lt;- rnorm(200)\nx[1:20]\n\n [1] -0.81622451  1.33982039 -1.56776669 -0.09894994 -0.50197140  1.33686087\n [7]  0.36489515  0.55419247 -0.89551146 -0.58668931  0.78868379 -0.40432553\n[13]  1.17849616 -0.23185698 -0.92484685  0.11297007 -1.06068948  0.85804936\n[19] -0.58091020  0.76621013\nIf you mouse over the input code box, a clickable “Copy to clipboard” button appears on the top right of the box allowing you to copy & paste into an R console or file.\nNotice that R adds numbers in brackets in the beginning of each row. This happens when R prints the contents of a vector. The number is the integer index of the first element in that row. Therefore, the first one is always [1] and the number of the subsequent rows depends on how many elements fit in each line. If the output is a single element, it will still have [1] in front of it.\nIf we enclose the assignment operation of a variable in parentheses, the object is printed to the console. Therefore, this:\n(y &lt;- 4)\n\n[1] 4\nis equivalent to this:\ny &lt;- 4\ny\n\n[1] 4",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Preface</span>"
    ]
  },
  {
    "objectID": "Preface.html#webr-executable-code-blocks",
    "href": "Preface.html#webr-executable-code-blocks",
    "title": "\n1  Preface\n",
    "section": "\n1.2 WebR executable code blocks",
    "text": "1.2 WebR executable code blocks\nWebR is a new technology that allows running R in the browser. As the content of the book is being updated and extended, you will see executable blocks like the one below. Note how you can edit the code and hit Run or use the keyboard shortcut Shift + Enter to execute.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Preface</span>"
    ]
  },
  {
    "objectID": "Preface.html#fonts",
    "href": "Preface.html#fonts",
    "title": "\n1  Preface\n",
    "section": "\n1.3 Fonts",
    "text": "1.3 Fonts\nThis site uses Fira Code to display source code. Like a number of other font families, it supports a number character ligatures that make code look prettier / easier to read. Note that even though ligations make some symbol combinations look like a single symbol, they are still separate characters.\nFor example, the assignment operator, &lt;-, is still written using the characters &lt; and -. \n\n\n\n\n\nFigure 1.1: Ligated versions of some common character combinations as they should appear in this site",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Preface</span>"
    ]
  },
  {
    "objectID": "Preface.html#themes",
    "href": "Preface.html#themes",
    "title": "\n1  Preface\n",
    "section": "\n1.4 Themes",
    "text": "1.4 Themes\nThe light/dark mode switch is located in the top left of the page. Note that most figures will appear with inverted colors when the dark theme is selected, i.e. the true colors are displayed with the light theme only.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Preface</span>"
    ]
  },
  {
    "objectID": "Preface.html#made-with-quarto",
    "href": "Preface.html#made-with-quarto",
    "title": "\n1  Preface\n",
    "section": "\n1.5 Made with Quarto",
    "text": "1.5 Made with Quarto\nThis book was created using Quarto. The first version of the book had been built using bookdown.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Preface</span>"
    ]
  },
  {
    "objectID": "Introduction.html",
    "href": "Introduction.html",
    "title": "2  Introduction",
    "section": "",
    "text": "2.1 Keeping up to date\nThe S Programming Language is a statistical programming language developed at Bell Labs “to turn ideas into software, quickly and faithfully” (Chambers 1998).\nR is a modern implementation of the S language and part of the GNU Project.\nR is an interpreted language, allowing interactive work with data. It is written in C, Fortran, and R itself.\nSome of R’s strengths:\nSee also: What is R? on the R Project website.\nThis book was compiled using R version 4.4.2 (2024-10-31).\nMake sure you have the latest version by visiting the R project website.\nNew versions of R are released regularly and it is a good idea to keep your version of R and installed packages updated.\nYou can get the version of R currently in use by printing the version object:\nversion\n\n               _                           \nplatform       aarch64-apple-darwin20      \narch           aarch64                     \nos             darwin20                    \nsystem         aarch64, darwin20           \nstatus                                     \nmajor          4                           \nminor          4.2                         \nyear           2024                        \nmonth          10                          \nday            31                          \nsvn rev        87279                       \nlanguage       R                           \nversion.string R version 4.4.2 (2024-10-31)\nnickname       Pile of Leaves\nIt’s also a good idea to keep a log of the version of R and installed packages when beginning a new project. An easy way to do this is to save the output of sessionInfo():\nsessionInfo()\n\nR version 4.4.2 (2024-10-31)\nPlatform: aarch64-apple-darwin20\nRunning under: macOS Sequoia 15.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: America/Los_Angeles\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.4 compiler_4.4.2    fastmap_1.2.0     cli_3.6.3        \n [5] tools_4.4.2       htmltools_0.5.8.1 yaml_2.3.10       rmarkdown_2.29   \n [9] knitr_1.48        jsonlite_1.8.9    xfun_0.49         digest_0.6.37    \n[13] rlang_1.1.4       evaluate_1.0.1",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "Introduction.html#keeping-up-to-date",
    "href": "Introduction.html#keeping-up-to-date",
    "title": "2  Introduction",
    "section": "",
    "text": "Chambers, John M. 1998. Programming with Data: A Guide to the s Language. Springer Science & Business Media.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "Installation.html",
    "href": "Installation.html",
    "title": "3  Installation",
    "section": "",
    "text": "3.1 Install from binary distribution\nThere are multiple ways to install R.\nCRAN mirrors are servers located in different places around the world containing R binaries and source code. Choose one near your physical location (for faster downloads), or select the cloud.r-project.org mirror, which automatically redirects your to a nearby server.\nThe R project maintains precompiled binary distributions of R for Linux, macOS, and Windows. Visit your CRAN mirror of choice and follow the instructions for your operating system.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Installation</span>"
    ]
  },
  {
    "objectID": "Installation.html#compile-from-source",
    "href": "Installation.html#compile-from-source",
    "title": "3  Installation",
    "section": "3.2 Compile from source",
    "text": "3.2 Compile from source\nIf you are familiar with compiling software from source, you can download the R source code from any CRAN mirror instead. If you don’t know what this means, you may want to start with a precompiled binary (see above). If you want to learn more you can learn more on Wikipedia",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Installation</span>"
    ]
  },
  {
    "objectID": "Installation.html#using-rig",
    "href": "Installation.html#using-rig",
    "title": "3  Installation",
    "section": "3.3 Using rig",
    "text": "3.3 Using rig\nA newer method to install R is using rig. This lets you easily install R, and allows you to maintain installation of multiple versions of R, and makes it easy to switch between them.\nTo install rig, get the latest release from your operating system from rig releases.\n\n\n\n\n\n\nWarning\n\n\n\nrig may attempt to use sudo to install system dependencies. If you do not know what this means, it’s best to avoid using rig on systems you do not have administrative access to, e.g. shared servers / HPC clusters, etc. (UCSF users: don’t try this on Wynton!)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Installation</span>"
    ]
  },
  {
    "objectID": "Installation.html#using-homebrew",
    "href": "Installation.html#using-homebrew",
    "title": "3  Installation",
    "section": "3.4 Using Homebrew",
    "text": "3.4 Using Homebrew\nYou can use Homebrew to install and maintain packages on your Mac, Linux, or Linux subsystem for Windows. To install R using the brew command line tool, run:\nbrew install r",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Installation</span>"
    ]
  },
  {
    "objectID": "Installation.html#using-condamamba",
    "href": "Installation.html#using-condamamba",
    "title": "3  Installation",
    "section": "3.5 Using conda/mamba",
    "text": "3.5 Using conda/mamba\nAnother way to install R is using conda or mamba. This is not recommended for general R users, but may be useful for those who are already using conda/mamba for managing their software environment.\nUsing conda:\nconda install r\nUsing mamba:\nmamba install r",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Installation</span>"
    ]
  },
  {
    "objectID": "GettingStarted.html",
    "href": "GettingStarted.html",
    "title": "4  Getting Started",
    "section": "",
    "text": "4.1 Function calls\nWorking in R, like any programming language, involves calling functions. For this to work as expected, you need to pass the right type of object(s) to the appropriate function.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Getting Started</span>"
    ]
  },
  {
    "objectID": "GettingStarted.html#function-calls",
    "href": "GettingStarted.html#function-calls",
    "title": "4  Getting Started",
    "section": "",
    "text": "Figure 4.1: A general approach to calling functions to promote correctness.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Getting Started</span>"
    ]
  },
  {
    "objectID": "GettingStarted.html#errors-warnings",
    "href": "GettingStarted.html#errors-warnings",
    "title": "4  Getting Started",
    "section": "\n4.2 Errors & Warnings",
    "text": "4.2 Errors & Warnings\nGiven your specific goal, when you execute an R expression, there are a few possible outcomes:\n\n4.2.1 No warning or error\n\nThe code executes & produces correct output without issuing a warning (best case scenario).\nThe code executes BUT produces incorrect output without issuing a warning: Fix code to produce correct output (worst case scenario).\n\n4.2.2 Warning\n\nThe code executes & produces correct output but issues a warning: Fix code to avoid warning.\nThe code executes & produces incorrect output & issues a warning: Fix code to produce correct output & avoid warning.\n\n4.2.3 Error\n\nThe code stops execution & produces an error: Fix code to avoid error.\n\n\n\n\n\n\nFigure 4.2: You should always aim for “Success” - Notice how close the best and worst case scenarios are.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Getting Started</span>"
    ]
  },
  {
    "objectID": "GettingStarted.html#getting-help",
    "href": "GettingStarted.html#getting-help",
    "title": "4  Getting Started",
    "section": "\n4.3 Getting help",
    "text": "4.3 Getting help\nIf you have an issue that you can’t resolve by reading the documentation or searching online, before asking for help, make sure you collect all the relevant information. This includes:\n\nThe code you are running.\nThe error message you are getting.\nThe output you are expecting.\nThe output you are getting.\nThe version of R you are using.\nThe version of any packages you are using.\nThe operating system you are using.\nAny other relevant information.\nA minimal reproducible example (MRE) or minimal working example (MWE).\n\nA very useful R command to collect information on your R session is sessionInfo():\n\nsessionInfo()\n\nR version 4.4.1 (2024-06-14)\nPlatform: aarch64-apple-darwin20\nRunning under: macOS 15.0\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: America/Los_Angeles\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.4 compiler_4.4.1    fastmap_1.2.0     cli_3.6.3        \n [5] tools_4.4.1       htmltools_0.5.8.1 yaml_2.3.10       rmarkdown_2.28   \n [9] knitr_1.48        jsonlite_1.8.9    xfun_0.47         digest_0.6.37    \n[13] rlang_1.1.4       evaluate_1.0.0   \n\n\nIt is recommended to include the output of sessionInfo() when asking for help - it is often expected.\nStack Overflow provides guidelines on how to create an MRE.\nStack Overflow is a massively popular Q&A site for programmers, part of the wider Stack Exchange network. Many R-related web searches will bring up posts in Stack Overflow. You can view all questions tagged with “r”.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Getting Started</span>"
    ]
  },
  {
    "objectID": "IDEs.html",
    "href": "IDEs.html",
    "title": "\n5  IDEs\n",
    "section": "",
    "text": "5.1 Positron by Posit\nAn Integrated Development Environment (IDE) is a software application that offers extensive functionality for programmers, including ability to read, write, and execute code, develop and test software packages, etc.\nIDEs that support R usually also allow viewing plots or launching web applications within the same environment. An IDE can make working in R easier, more productive, and, importantly, more fun.\nPositron is “a next-generation data science IDE” built by Posit. First public release was made available on June 24 2024 and as stated in the GitHub repo “is an early stage project under active development”. This is a new IDE by the developers of RStudio built on top of VS Code open source (“Code OSS”). Positron comes with “batteries included” and is the recommended IDE for beginners.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>IDEs</span>"
    ]
  },
  {
    "objectID": "IDEs.html#vscode",
    "href": "IDEs.html#vscode",
    "title": "\n5  IDEs\n",
    "section": "\n5.2 VS Code",
    "text": "5.2 VS Code\nVisual Studio Code, a.k.a. VS Code, is a source code editor and one of the most popular IDEs across different languages. The VS Code Extension Marketplace includes a very large number of extensions.\nThe ‘vscode-R’ extension allows using VS Code as an R IDE. To use it, you need to install the languageserver and rlang packages:\n\ninstall.packages(c(\"languageserver\", \"rlang\"))\n\nThe httpgd graphics device is recommended.\nInstall it using:\n\ninstall.packages(\"httpgd\")\n\nand enable it in the extension settings (“Plot: Use httpgd”).\n\n\n\n\n\n\nWarning\n\n\n\nThe httpgd package was removed from CRAN on 2025-04-23, for failing to correct outstanding issues. It will likely be reinstated when those are resolved. In the meantime, you can install it from GitHub using pak (recommended) or remotes:\n\npak::install_github(\"nx10/httpgd\")\n\n\n\nThe ‘Remote - SSH’ extension allows using a local VS Code installation (e.g. on your laptop) and executing code (R, Python, etc.) on a remote server on which you have SSH access. \nVS Code’s ‘Jupyter’ extension allows you to open and run jupyter notebooks. \nRead more about R support in VS Code here",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>IDEs</span>"
    ]
  },
  {
    "objectID": "IDEs.html#jupyter",
    "href": "IDEs.html#jupyter",
    "title": "\n5  IDEs\n",
    "section": "\n5.3 Jupyter / Jupyter Lab",
    "text": "5.3 Jupyter / Jupyter Lab\nJupyter is a popular notebook interface, which supports multiple programming languages, including R.\nJupyterLab is the “next-generation web-based user interface for Project Jupyter”.\nJupyter and JupyterLab are installed using Python, but can be used to work with multiple languages, including R.  Python environments are a way to isolate your project’s dependencies from the rest of your system. This is useful when you have multiple projects with different dependencies, or when you want to avoid conflicts between packages. There are different approaches to installing Python packages & managing environments. Our current recommendation is to use virtual environments and handle dependencies using uv, which is a much faster alternative to the classic pip. The alternative is to use conda or\n\n5.3.1 Using uv & pip (recommended)\nCreate a new virtual environment named, for example, myenv:\n\npython3 -m venv myenv\n\nActivate your new virtual environment:\n\nsource myenv/bin/activate\n\nInstall uv, a faster alternative to pip:\n\npip install uv\n\nInstall jupyterlab:\n\nuv pip install jupyterlab",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>IDEs</span>"
    ]
  },
  {
    "objectID": "Packages.html",
    "href": "Packages.html",
    "title": "\n6  R packages\n",
    "section": "",
    "text": "6.0.1 Install package from CRAN\nThe Comprehensive R Archive Network (CRAN) is the official R package repository and currently hosts 19930 packages (as of 2023-09-27). To install a package from CRAN, use the builtin install.packages() command:\ninstall.packages(\"glmnet\")",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>R packages</span>"
    ]
  },
  {
    "objectID": "Packages.html#github",
    "href": "Packages.html#github",
    "title": "\n6  R packages\n",
    "section": "\n6.1 GitHub",
    "text": "6.1 GitHub\nGitHub contains a large number of R packages, some of which also exist in CRAN, but the GitHub version may be updated (a lot) more frequently. To install from GitHub, you need to have the remotes package from CRAN first:\n\ninstall.packages(\"remotes\")\n\nYou can then use remotes::install_github() to install a package from GitHub, replacing user and repo with the GitHub username and repository name, respectively:\n\nremotes::install_github(\"user/repo\")\n\nNote: Running remotes::install_github(\"user/repo\") will not reinstall a previously installed package, unless it has been updated.\n\n6.1.1 Install a specific release\nYou can install a specific release of a package by appending @ followed by the version number.\n\nremotes::install_github(\"user/repo@v0.1.0\")",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>R packages</span>"
    ]
  },
  {
    "objectID": "Packages.html#bioconductor",
    "href": "Packages.html#bioconductor",
    "title": "\n6  R packages\n",
    "section": "\n6.2 Bioconductor",
    "text": "6.2 Bioconductor\nBioconductor is a repository which includes tools for the analysis and comprehension of high-throughput genomic data, among others. To install packages from Bioconductor, first install the BiocManager package from CRAN. See Bioconductor’s latest installation instructions here; learn more about BiocManager here\n\ninstall.packages(\"BiocManager\")\n\nFor R versions 4.2+, proceed by installing Bioconductor:\n\nBiocManager::install(version = \"3.15\")\n\nNow, you can use BiocManager::install() to install Bioconductor packages:\n\nBiocManager::install(\"packageName\")",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>R packages</span>"
    ]
  },
  {
    "objectID": "Packages.html#installation-from-source",
    "href": "Packages.html#installation-from-source",
    "title": "\n6  R packages\n",
    "section": "\n6.3 Installation from source",
    "text": "6.3 Installation from source\nR packages may include only R code, or may also include code in other languages, like C, C++, and Fortran, which need compilation. All CRAN packages are available in binary format for all supported operating systems. However, if you want to install a newer or development version that is not yet available in binary format, R can compile and install the package for you, provided the appropriate compiler is installed on your system.\nIf you need to install compiler tools for your system, follow the instructions:\n\nmacOS tools\nWindows Rtools\nLinux: use your systems package manager to install gcc",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>R packages</span>"
    ]
  },
  {
    "objectID": "Packages.html#dependencies",
    "href": "Packages.html#dependencies",
    "title": "\n6  R packages\n",
    "section": "\n6.4 Dependencies",
    "text": "6.4 Dependencies\nMost R packages, whether in CRAN, Bioconductor, or GitHub, themselves rely on other packages to run. These are called dependencies. Many of these dependencies get installed automatically when you call install.packages() or remotes::install_github(), etc. This depends largely on whether they are essential for the new package to work. Some packages, especially if they provide a large number of functions that may not all be used by all users, may make some dependencies optional. In that cases, if you try to execute a specific function that depends on uninstalled packages you may get a warning or error or some type of message indicating that you need to install further packages.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>R packages</span>"
    ]
  },
  {
    "objectID": "Packages.html#project-level-dependency-management",
    "href": "Packages.html#project-level-dependency-management",
    "title": "\n6  R packages\n",
    "section": "\n6.5 Project-level dependency management",
    "text": "6.5 Project-level dependency management\nAdvanced users may benefit from using a project-level set of dependencies that can be saved, recalled, and updated at will. The renv package is the latest approach to providing such functionality. Follow the introduction vignette here.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>R packages</span>"
    ]
  },
  {
    "objectID": "Packages.html#builtin-documentation",
    "href": "Packages.html#builtin-documentation",
    "title": "\n6  R packages\n",
    "section": "\n6.6 Builtin Documentation",
    "text": "6.6 Builtin Documentation\nAfter you’ve successfully installed R and RStudio, one of the first things to know is how to access and search the builtin documentation.\n\n6.6.1 Get help on a specific item\nIf you know the name of what you’re looking for (an R function most commonly, but possibly also the name of a dataset, or a package itself), just type ? followed by the name of said function, dataset, etc. in the R prompt:\n\n?sample\n\nIn RStudio, the above example will bring up the documentation for the sample function in the dedicated “Help” window, commonly situated at the bottom right (but can be moved by the user freely). If you are running R directly at the system shell, the same information is printed directly at the console.\nTry running the above example on your system.\n\n6.6.2 Search the docs\nIf you do not know the name of what you are looking for, you can use double question marks, ??, followed by your query (this is short for the help.search command that provides a number of arguments you can look up using ?help.search):\n\n??bootstrap",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>R packages</span>"
    ]
  },
  {
    "objectID": "Packages.html#r-datasets",
    "href": "Packages.html#r-datasets",
    "title": "\n6  R packages\n",
    "section": "\n6.7 R datasets",
    "text": "6.7 R datasets\n\n6.7.1 Datasets included with R\nList built-in datasets with data() and no arguments:\n\ndata()\n\nThese built-in datasets are normally readily available in the R console because the datasets package is automatically loaded at startup. You can list all loaded packages with search()\n\nsearch()\n\n[1] \".GlobalEnv\"        \"package:stats\"     \"package:graphics\" \n[4] \"package:grDevices\" \"package:utils\"     \"package:datasets\" \n[7] \"package:methods\"   \"Autoloads\"         \"package:base\"     \n\n\n\n6.7.2 Datasets included with other packages\nMany R packages come with included datasets. If available, we can list them using the package argument of data():\n\ndata(package = \"glmnet\")\ndata(package = \"MASS\")\ndata(package = \"mlbench\")\n\nTo load such a dataset:\n\ndata(Sonar, package = \"mlbench\")",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>R packages</span>"
    ]
  },
  {
    "objectID": "BasicOps.html",
    "href": "BasicOps.html",
    "title": "7  Basic operations",
    "section": "",
    "text": "7.1 Mathematical operations\nFirst, before even learning about data types and structures, it may be worth looking at some of the basic mathematical and statistical operations in R.\nWe use the assignment operator &lt;- to assign values to variables x and y:\nx &lt;- 10\ny &lt;- 3\nStandard arithmetic operations are as expected:\nx + y\n\n[1] 13\n\nx - y\n\n[1] 7\n\nx * y\n\n[1] 30\n\nx / y\n\n[1] 3.333333\nExponentiation uses ^: (The caret (^) is likely the most common but not the only symbol used for exponentiation across programming languages)\nx^3\n\n[1] 1000\nSquare root is sqrt():\nsqrt(81)\n\n[1] 9\nNatural log with log():\nlog(12)\n\n[1] 2.484907\nBase 10 log with log10():\nlog10(1000)\n\n[1] 3\nExponential function with exp():\nexp(1)\n\n[1] 2.718282\nInteger division i.e. Divide and forget the remainder\nx %/% y\n\n[1] 3\ni.e. how many times the denominator fits in the numerator, without taking fractions of the denominator. It can be applied on decimals the same way:\n9.5 %/% 3.1\n\n[1] 3\nModulo operation i.e. Divide and return just the remainder\nx %% y\n\n[1] 1\nx &lt;- (-10:10)[-11]\ny &lt;- sample((-10:10)[-11], size = 20)\nx - (x %/% y) * y == x %% y\n\n [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[16] TRUE TRUE TRUE TRUE TRUE\nTrigonometric functions\ncos(x)\n\n [1] -0.8390715 -0.9111303 -0.1455000  0.7539023  0.9601703  0.2836622\n [7] -0.6536436 -0.9899925 -0.4161468  0.5403023  0.5403023 -0.4161468\n[13] -0.9899925 -0.6536436  0.2836622  0.9601703  0.7539023 -0.1455000\n[19] -0.9111303 -0.8390715\n\nsin(x)\n\n [1]  0.5440211 -0.4121185 -0.9893582 -0.6569866  0.2794155  0.9589243\n [7]  0.7568025 -0.1411200 -0.9092974 -0.8414710  0.8414710  0.9092974\n[13]  0.1411200 -0.7568025 -0.9589243 -0.2794155  0.6569866  0.9893582\n[19]  0.4121185 -0.5440211\n\ntan(x)\n\n [1] -0.6483608  0.4523157  6.7997115 -0.8714480  0.2910062  3.3805150\n [7] -1.1578213  0.1425465  2.1850399 -1.5574077  1.5574077 -2.1850399\n[13] -0.1425465  1.1578213 -3.3805150 -0.2910062  0.8714480 -6.7997115\n[19] -0.4523157  0.6483608\nSee ?cos for more specialized trigonometric functions and details.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Basic operations</span>"
    ]
  },
  {
    "objectID": "BasicOps.html#logical-operations",
    "href": "BasicOps.html#logical-operations",
    "title": "7  Basic operations",
    "section": "\n7.2 Logical operations",
    "text": "7.2 Logical operations\nLogical AND: &\n\nTRUE & TRUE\n\n[1] TRUE\n\n\n\nTRUE & FALSE\n\n[1] FALSE\n\n\nLogical OR: |\n\nTRUE | FALSE\n\n[1] TRUE\n\n\nLogical negation: !\n\nx &lt;- TRUE\n!x\n\n[1] FALSE\n\n\nExclusive OR: xor()\nXOR evaluates to TRUE when two logicals are different,\ni.e. one or the other is TRUE but not both.\n\na &lt;- c(TRUE, TRUE, TRUE, FALSE, FALSE, FALSE)\nb &lt;- c(FALSE, FALSE, TRUE, FALSE, TRUE, TRUE)\na & b\n\n[1] FALSE FALSE  TRUE FALSE FALSE FALSE\n\na | b\n\n[1]  TRUE  TRUE  TRUE FALSE  TRUE  TRUE\n\nxor(a, b)\n\n[1]  TRUE  TRUE FALSE FALSE  TRUE  TRUE\n\n\nTest all elements of an object are TRUE with all():\n\nall(a)\n\n[1] FALSE\n\n\nTest if any element is TRUE with any():\n\nany(a)\n\n[1] TRUE",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Basic operations</span>"
    ]
  },
  {
    "objectID": "BasicOps.html#common-statistical-operations",
    "href": "BasicOps.html#common-statistical-operations",
    "title": "7  Basic operations",
    "section": "\n7.3 Common statistical operations",
    "text": "7.3 Common statistical operations\nFirst, let’s use the rnorm() function to draw 200 numbers at random from a normal distribution:\n\nx &lt;- rnorm(200)\n\n\n7.3.1 Descriptive statistics\nmean, median, standard deviation, minimum, maximum, and range:\n\nmean(x)\n\n[1] -0.001390185\n\nmedian(x)\n\n[1] 0.01809366\n\nsd(x)\n\n[1] 0.9764229\n\nmin(x)\n\n[1] -2.589832\n\nmax(x)\n\n[1] 2.107437\n\nrange(x)\n\n[1] -2.589832  2.107437\n\n\n\nsummary(x)\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-2.58983 -0.63743  0.01809 -0.00139  0.74105  2.10744 \n\n\n\n7.3.2 Sampling\nR’s sample() allows you to sample elements of an R object with or without replacement:\nBy default, the replace argument is set to FALSE, i.e. sampling is performed without replacement and you can request a sample size up to the length of the object:\n\nx &lt;- 21:30\nsample(x, size = 5)\n\n[1] 23 24 25 26 29\n\n\nsize is the second argument and its name can therefore be omitted if it is the second value you pass to sample():\n\nsample(x, 10)\n\n [1] 29 26 24 22 23 28 21 30 25 27\n\n\nSetting replace = TRUE performs sampling with replacement and you can set size to any positive integer, including values larger than the length of the input:\n\nsample(x, size = 100, replace = TRUE)\n\n  [1] 21 28 21 24 23 25 27 21 24 21 25 27 29 30 27 27 21 24 29 25 30 24 24 25 26\n [26] 30 27 22 26 27 28 30 30 24 24 24 23 21 27 27 22 29 27 27 24 27 21 22 25 27\n [51] 22 24 21 29 30 30 26 23 29 21 26 24 30 24 24 27 21 30 28 22 21 24 30 24 23\n [76] 22 26 24 22 21 21 26 22 27 25 22 27 30 25 30 23 27 27 22 28 26 22 22 30 28",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Basic operations</span>"
    ]
  },
  {
    "objectID": "BasicOps.html#practice",
    "href": "BasicOps.html#practice",
    "title": "7  Basic operations",
    "section": "\n7.4 Practice",
    "text": "7.4 Practice\nUse the interactive code block to practice basic math operations. Feel free to write your own code and run it:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nExperiment with the code below to see the difference between replace = FALSE and replace = TRUE:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Basic operations</span>"
    ]
  },
  {
    "objectID": "DataTypes.html",
    "href": "DataTypes.html",
    "title": "8  Data Types & Vectors",
    "section": "",
    "text": "8.1 Basic concepts: Data types\nMost programming languages, including all languages used for data analysis, like R, Python, and Julia, have a set of data types for holding different kinds of data, like numbers or text.\nAny time you are working with data, you have to ensure your variables are represented using the correct data type.\nFigure 8.1: Common data types in R.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Data Types & Vectors</span>"
    ]
  },
  {
    "objectID": "DataTypes.html#base-types",
    "href": "DataTypes.html#base-types",
    "title": "8  Data Types & Vectors",
    "section": "\n8.2 Base types",
    "text": "8.2 Base types\nThe simplest and most fundamental object in R is the vector: a one-dimensional collection of elements of the same data type, e.g. numbers, characters, etc. (known as an “atomic” vector).  For example, a numeric vector may consist of elements 12, 14, 20, and a character vector may consist of elements \"x\", \"y\", \"apple\", \"banana\".  Vectors can exist as stand-alone objects, or they can exist within other data structures, e.g. data.frames, lists, etc.  This chapter covers different atomic vectors, and the next covers data structures (Chapter 9).  R includes a number of builtin data types. These are defined by R - users cannot define their own data types.  Users can, however, define their own classes (Chapter 32).  The main/most common data types in R are:\n\n\nnumeric, including integer and double\n\ncharacter\n\nlogical (i.e. TRUE, FALSE, or NA, a.k.a. Boolean)\n\nOther data types include environments and closures i.e. functions (Chapter 21).",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Data Types & Vectors</span>"
    ]
  },
  {
    "objectID": "DataTypes.html#assignment",
    "href": "DataTypes.html#assignment",
    "title": "8  Data Types & Vectors",
    "section": "\n8.3 Assignment",
    "text": "8.3 Assignment\nUse &lt;- for all assignments:\n\nx &lt;- 3\n# You can add comments within code blocks using the usual \"#\" prefix\n\n\n\n\n\n\n\nNote\n\n\n\nIn RStudio, the keyboard shortcut for the assignment operator &lt;- is Option - (macOS) or Alt - (Windows).\n\n\nTyping the name of an object, e.g.\n\nx\n\n[1] 3\n\n\nis equivalent to printing it, e.g.\n\nprint(x)\n\n[1] 3\n\n\nYou can also place any assignment in parentheses and this will perform the assignment and print the object:\n\n(x &lt;- 3)\n\n[1] 3\n\n\n\n\n\n\n\n\nNote\n\n\n\nYou can use either &lt;- or = for assignment. However, many R syntax guides advise to use &lt;- for assignment and = for passing arguments to functions.\n\n\nYou can assign the same value to multiple objects - this can be useful when initializing variables.\n\nx &lt;- z &lt;- init &lt;- 0\nx\n\n[1] 0\n\nz\n\n[1] 0\n\ninit\n\n[1] 0\n\n\nExcitingly, R allows assignment in the opposite direction as well:\n\n10 -&gt; x\nx\n\n[1] 10\n\n\nWe shall see later that the -&gt; assignment can be convenient at the end of a pipe.\nYou can even do the following, which is fun, if not particularly useful:\n\nx &lt;- 7 -&gt; z\nx\n\n[1] 7\n\nz\n\n[1] 7\n\n\n\n\n\n\n\n\nNote\n\n\n\nIt’s good practice to use clear and descriptive names for all objects you create.\nFor multi-word names, snake case is a good option:\nadmission_date, age_at_onset, etc.\n\n\n\n\n\n\n\n\nCaution\n\n\n\nAvoid naming new objects using names of built-in commands. For example, avoid assigning your data to an object named data, since that could conflict with the built-in function data().",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Data Types & Vectors</span>"
    ]
  },
  {
    "objectID": "DataTypes.html#create-vectors-with-c",
    "href": "DataTypes.html#create-vectors-with-c",
    "title": "8  Data Types & Vectors",
    "section": "\n8.4 Create vectors with c()\n",
    "text": "8.4 Create vectors with c()\n\nUse c() to combine multiple values into a vector:\n\nx &lt;- c(-12, 3.5, 104)\nx\n\n[1] -12.0   3.5 104.0",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Data Types & Vectors</span>"
    ]
  },
  {
    "objectID": "DataTypes.html#get-the-type-of-a-vector-using-typeof",
    "href": "DataTypes.html#get-the-type-of-a-vector-using-typeof",
    "title": "8  Data Types & Vectors",
    "section": "\n8.5 Get the type of a vector using typeof()\n",
    "text": "8.5 Get the type of a vector using typeof()\n\n\ntypeof(x)\n\n[1] \"double\"",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Data Types & Vectors</span>"
    ]
  },
  {
    "objectID": "DataTypes.html#common-vector-types",
    "href": "DataTypes.html#common-vector-types",
    "title": "8  Data Types & Vectors",
    "section": "\n8.6 Common vector types",
    "text": "8.6 Common vector types\nLet’s create some example vectors of the most common data types:\n\n8.6.1 Integer\nNumeric vector default to double;\n\nv &lt;- c(12, 14, 23)\nv\n\n[1] 12 14 23\n\ntypeof(v)\n\n[1] \"double\"\n\n\nTo create an integer vector, you can follow numbers by an “L”;\n\nvi &lt;- c(12L, 14L, 23L)\nvi\n\n[1] 12 14 23\n\ntypeof(vi)\n\n[1] \"integer\"\n\n\nAlternatively you can coerce a double to integer using as.integer();\n\nvi &lt;- as.integer(c(12, 14, 23))\nvi\n\n[1] 12 14 23\n\ntypeof(vi)\n\n[1] \"integer\"\n\n\n\n8.6.2 Double\n\nvd &lt;- c(1.3, 2.8, 3.6)\nvd\n\n[1] 1.3 2.8 3.6\n\ntypeof(vd)\n\n[1] \"double\"\n\n\n\n8.6.3 Character\nA character vector consists of one or more elements, each of which consists of one or more actual characters, i.e. it is not a vector of single characters. (The length of a character vector is the number of individual elements, and is not related to the number of characters in each element)\n\nvc &lt;- c(\"a\", \"d\", \"s\")\nvc\n\n[1] \"a\" \"d\" \"s\"\n\ntypeof(vc)\n\n[1] \"character\"\n\n\n\n8.6.4 Logical\nLogical vectors typically consist of TRUE and FALSE values, but may also consist of NA (missing value). One important use of logical vectors is in indexing (Chapter 10).\nWhen you are writing code, use TRUE and FALSE.\nDuring interactive work, you can abbreviate to T and F.\n\nvl &lt;- c(TRUE, FALSE, FALSE)\nvl\n\n[1]  TRUE FALSE FALSE\n\ntypeof(vl)\n\n[1] \"logical\"",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Data Types & Vectors</span>"
    ]
  },
  {
    "objectID": "DataTypes.html#initvectors",
    "href": "DataTypes.html#initvectors",
    "title": "8  Data Types & Vectors",
    "section": "\n8.7 Initialize vectors",
    "text": "8.7 Initialize vectors\nInitializing a vector or other data structure is the process by which you create an object of a certain size with some initial values, e.g. all zeros or all NA, in order to replace with other values later.\nThis is usually computationally more efficient than starting with a small object and appending to it multiple times.  You can create / initialize vectors of specific type with the vector command and specifying a mode or directly by calling the relevant function:\n\n(xl &lt;- vector(mode = \"logical\", length = 10))\n\n [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n(xd &lt;- vector(mode = \"double\", length = 10))\n\n [1] 0 0 0 0 0 0 0 0 0 0\n\n(xn &lt;- vector(mode = \"numeric\", length = 10)) # same as \"double\"\n\n [1] 0 0 0 0 0 0 0 0 0 0\n\n(xi &lt;- vector(mode = \"integer\", length = 10))\n\n [1] 0 0 0 0 0 0 0 0 0 0\n\n(xc &lt;- vector(mode = \"character\", length = 10))\n\n [1] \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\"\n\n\nThese are aliases of the vector command above (print their source code to see for yourself)\n\n(xl &lt;- logical(10))\n\n [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n(xd &lt;- double(10))\n\n [1] 0 0 0 0 0 0 0 0 0 0\n\n(xn &lt;- numeric(10)) # same as double\n\n [1] 0 0 0 0 0 0 0 0 0 0\n\n(xi &lt;- integer(10))\n\n [1] 0 0 0 0 0 0 0 0 0 0\n\n(xc &lt;- character(10))\n\n [1] \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\"",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Data Types & Vectors</span>"
    ]
  },
  {
    "objectID": "DataTypes.html#explicit-coercion",
    "href": "DataTypes.html#explicit-coercion",
    "title": "8  Data Types & Vectors",
    "section": "\n8.8 Explicit coercion",
    "text": "8.8 Explicit coercion\nWe can explicitly convert vector of one type to a different type using as.* functions:\n\nx &lt;- c(1.2, 2.3, 3.4)\nas.logical(x)\n\n[1] TRUE TRUE TRUE\n\nas.double(x)\n\n[1] 1.2 2.3 3.4\n\nas.numeric(x)\n\n[1] 1.2 2.3 3.4\n\nas.integer(x)\n\n[1] 1 2 3\n\nas.character(x)\n\n[1] \"1.2\" \"2.3\" \"3.4\"\n\n\nLogical vectors are converted to 1s and 0s as expected, where TRUE becomes 1 and FALSE becomes 0, e.g.\n\nx &lt;- c(TRUE, TRUE, FALSE)\nas.numeric(x)\n\n[1] 1 1 0\n\n\nNote that when converting from numeric to logical, anything other than zero is TRUE:\n\nx &lt;- seq(-2, 2, by = 0.5)\nx\n\n[1] -2.0 -1.5 -1.0 -0.5  0.0  0.5  1.0  1.5  2.0\n\nas.logical(x)\n\n[1]  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE\n\n\nNot all conversions are possible.\nThere is no meaningful/consistent way to convert a character vector to numeric.\nThe following outputs NA values and prints a helpful warning message.\n\nx &lt;- c(\"mango\", \"banana\", \"tangerine\")\nas.numeric(x)\n\nWarning: NAs introduced by coercion\n\n\n[1] NA NA NA",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Data Types & Vectors</span>"
    ]
  },
  {
    "objectID": "DataTypes.html#implicit-coercion",
    "href": "DataTypes.html#implicit-coercion",
    "title": "8  Data Types & Vectors",
    "section": "\n8.9 Implicit coercion",
    "text": "8.9 Implicit coercion\nRemember, the language generally tries to make life easier. Sometimes this means it will automatically coerce one class to another to allow requested operations.  For example, you can get the sum of a logical vector.\nIt will automatically be converted to numeric as we saw earlier.\n\nx &lt;- c(TRUE, TRUE, FALSE)\nsum(x)\n\n[1] 2\n\n\nOn the other hand, you cannot sum a factor, for example.\nYou get an error with an explanation:\n\nx &lt;- factor(c(\"mango\", \"banana\", \"mango\"))\nsum(x)\n\nError in Summary.factor(structure(c(2L, 1L, 2L), levels = c(\"banana\", : 'sum' not meaningful for factors\n\n\n\n\n\n\n\n\nCaution\n\n\n\nMany errors in R occur because a variable is, or gets coerced to, the wrong type or class (see Chapter 9) by accident. That’s why it is essential to be able to:\n\ncheck the type of a variable using typeof() or class()\n\nconvert (coerce) between types or classes using as.* functions",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Data Types & Vectors</span>"
    ]
  },
  {
    "objectID": "DataTypes.html#na",
    "href": "DataTypes.html#na",
    "title": "8  Data Types & Vectors",
    "section": "\n8.10 NA: Missing value",
    "text": "8.10 NA: Missing value\nMissing values in any data type - logical, integer, double, or character - are coded using NA.\nTo check for the presence of NA values, use is.na():\n\nx &lt;- c(1.2, 5.3, 4.8, NA, 9.6)\nx\n\n[1] 1.2 5.3 4.8  NA 9.6\n\nis.na(x)\n\n[1] FALSE FALSE FALSE  TRUE FALSE\n\n\n\nx &lt;- c(\"mango\", \"banana\", NA, \"sugar\", \"ackee\")\nx\n\n[1] \"mango\"  \"banana\" NA       \"sugar\"  \"ackee\" \n\nis.na(x)\n\n[1] FALSE FALSE  TRUE FALSE FALSE\n\n\n\nx &lt;- c(TRUE, TRUE, FALSE, TRUE, FALSE, FALSE, NA)\nx\n\n[1]  TRUE  TRUE FALSE  TRUE FALSE FALSE    NA\n\nis.na(x)\n\n[1] FALSE FALSE FALSE FALSE FALSE FALSE  TRUE\n\n\nis.na() works similarly on matrices:\n\nx &lt;- matrix(1:20, nrow = 5)\nx[4, 3] &lt;- NA\nis.na(x)\n\n      [,1]  [,2]  [,3]  [,4]\n[1,] FALSE FALSE FALSE FALSE\n[2,] FALSE FALSE FALSE FALSE\n[3,] FALSE FALSE FALSE FALSE\n[4,] FALSE FALSE  TRUE FALSE\n[5,] FALSE FALSE FALSE FALSE\n\n\n\n\n\n\n\n\nNote\n\n\n\nNote that is.na() returns a response for each element (i.e. is vectorized) in contrast to is.numeric(), is.logical(), etc. The latter are checking the type of an object, while the former is checking individual elements.\n\n\nanyNA() is a very useful function to check if there is one ore more missing values in an object, e.g.\n\nanyNA(x)\n\n[1] TRUE\n\n\n\n\n\n\n\n\nNote\n\n\n\nOperation on NA values results in NA.\n\n\n\nx &lt;- c(1.2, 5.3, 4.8, NA, 9.6)\nx*2\n\n[1]  2.4 10.6  9.6   NA 19.2\n\n\nMultiple functions that accept as input an object with multiple values (a vector, a matrix, a data.frame, etc.) will return NA if any element is NA:\n\nmean(x)\n\n[1] NA\n\nmedian(x)\n\n[1] NA\n\nsd(x)\n\n[1] NA\n\nmin(x)\n\n[1] NA\n\nmax(x)\n\n[1] NA\n\nrange(x)\n\n[1] NA NA\n\n\nFirst, make sure NA values represent legitimate missing data and not some error. Then, decide how you want to handle it.\nIn all of the above commands you can pass na.rm = TRUE to ignore NA values:\n\nmean(x, na.rm = TRUE)\n\n[1] 5.225\n\nmedian(x, na.rm = TRUE)\n\n[1] 5.05\n\nsd(x, na.rm = TRUE)\n\n[1] 3.441293\n\nmin(x, na.rm = TRUE)\n\n[1] 1.2\n\nmax(x, na.rm = TRUE)\n\n[1] 9.6\n\nrange(x, na.rm = TRUE)\n\n[1] 1.2 9.6\n\n\nMore generally, you can use na.exclude() to exclude NA values from R objects. This can be very useful for function that do not include a na.rm or similar argument to handle NA values.\n\nx &lt;- c(1, 2, NA, 4)\nna.exclude(x)\n\n[1] 1 2 4\nattr(,\"na.action\")\n[1] 3\nattr(,\"class\")\n[1] \"exclude\"\n\n\nOn a data.frame, na.exclude() excludes rows with any NAs:\n\ndf &lt;- data.frame(a = c(1, 2, NA, 4),\n                 b = c(11, NA, 13, 14))\nna.exclude(df)\n\n  a  b\n1 1 11\n4 4 14",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Data Types & Vectors</span>"
    ]
  },
  {
    "objectID": "DataTypes.html#natypes",
    "href": "DataTypes.html#natypes",
    "title": "8  Data Types & Vectors",
    "section": "\n8.11 NA types",
    "text": "8.11 NA types\nIn the above examples, NA was used in vectors of different types. In reality, NA is a logical constant of length 1 that gets coerced to the type of the vector it is placed in. To specify NA of a specific type, use the appropriate NA_* constant:\n\nNA_integer_\nNA_real_\nNA_complex_\nNA_character_\n\nSee ?NA for more details. These can be useful when you want to initialize a vector/matrix/array of a specific type with NA values (for example, see (#initmatrix)).",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Data Types & Vectors</span>"
    ]
  },
  {
    "objectID": "DataTypes.html#nan-not-a-number",
    "href": "DataTypes.html#nan-not-a-number",
    "title": "8  Data Types & Vectors",
    "section": "\n8.12 NaN: Not a number",
    "text": "8.12 NaN: Not a number\nNaN is a special case of NA and can be the result of undefined mathematical operations:\n\na &lt;- log(-4)\n\nWarning in log(-4): NaNs produced\n\n\nNote that class() returns “numeric”:\n\nclass(a)\n\n[1] \"numeric\"\n\n\nTo test for NaNs, use:\n\nis.nan(a)\n\n[1] TRUE\n\n\nNaNs are also NA:\n\nis.na(a)\n\n[1] TRUE\n\n\nBut the opposite is not true:\n\nis.nan(NA)\n\n[1] FALSE\n\n\n\n\n\n\n\n\nNote\n\n\n\nNaN can be considered a subtype of NA, as such: is.na(NaN) is TRUE, but is.nan(NA) is FALSE.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Data Types & Vectors</span>"
    ]
  },
  {
    "objectID": "DataTypes.html#null-the-empty-object",
    "href": "DataTypes.html#null-the-empty-object",
    "title": "8  Data Types & Vectors",
    "section": "\n8.13 NULL: The empty object",
    "text": "8.13 NULL: The empty object\nThe NULL object represents an empty object.\n\n\n\n\n\n\nNote\n\n\n\nNULL means empty, not missing, and is therefore entirely different from NA.\n\n\nNULL shows up, for example, when initializing a list:\n\na &lt;- vector(\"list\", length = 4)\na\n\n[[1]]\nNULL\n\n[[2]]\nNULL\n\n[[3]]\nNULL\n\n[[4]]\nNULL\n\n\nand it can be replaced normally:\n\na[[1]] &lt;- 3\na\n\n[[1]]\n[1] 3\n\n[[2]]\nNULL\n\n[[3]]\nNULL\n\n[[4]]\nNULL\n\n\n\n8.13.1 Replacing with NULL\nYou cannot replace one or more elements of a vector/matrix/array with NULL because NULL has length 0 and replacement requires object of equal length:\n\na &lt;- 11:15\na\n\n[1] 11 12 13 14 15\n\na[1] &lt;- NULL\n\nError in a[1] &lt;- NULL: replacement has length zero\n\n\nHowever, in lists, and therefore also data frames (see Chapter Chapter 25), replacing an element with NULL removes that element:\n\nal &lt;- list(alpha = 11:15,\n           beta = rnorm(10),\n           gamma = c(\"mango\", \"banana\", \"tangerine\"))\nal\n\n$alpha\n[1] 11 12 13 14 15\n\n$beta\n [1] -2.41965390  0.83050350  0.06220856  1.78653937  0.59793158  0.54556666\n [7]  0.27175704  0.20459971  0.85149424  0.28372200\n\n$gamma\n[1] \"mango\"     \"banana\"    \"tangerine\"\n\nal[[2]] &lt;- NULL\nal\n\n$alpha\n[1] 11 12 13 14 15\n\n$gamma\n[1] \"mango\"     \"banana\"    \"tangerine\"\n\n\nFinally, NULL is often used as the default value in a function’s argument. The function definition must then determine what the default behavior/value should be.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Data Types & Vectors</span>"
    ]
  },
  {
    "objectID": "DataTypes.html#named-vectors",
    "href": "DataTypes.html#named-vectors",
    "title": "8  Data Types & Vectors",
    "section": "\n8.14 Named vectors",
    "text": "8.14 Named vectors\nWhile not very common, you can name the elements of a vector. You can do so either when creating the vector or after the fact:\nFirst, create a vector without names, in this example, a character vector:\n\nv &lt;- c(\"UCSF\", \"Stanford\", \"Penn\")\nv\n\n[1] \"UCSF\"     \"Stanford\" \"Penn\"    \n\n\nNow, create a named vector and notice how the element names are displayed above the element values when the vector is printed:\n\nsite &lt;- c(SiteA = \"UCSF\", SiteB = \"Stanford\", SiteC = \"Penn\")\nsite\n\n     SiteA      SiteB      SiteC \n    \"UCSF\" \"Stanford\"     \"Penn\" \n\n\nNote that the v has no names, therefore the following returns NULL:\n\nnames(v)\n\nNULL\n\n\nwhile site has names:\n\nnames(site)\n\n[1] \"SiteA\" \"SiteB\" \"SiteC\"\n\n\nIf we wanted to add the names of the elements of v, we can do so like this:\n\nnames(v) &lt;- c(\"SiteA\", \"SiteB\", \"SiteC\")\nv\n\n     SiteA      SiteB      SiteC \n    \"UCSF\" \"Stanford\"     \"Penn\" \n\n\nSimilarly, if we wanted to change/replace the names of site, we can do so like this:\n\nnames(site) &lt;- c(\"Site_1\", \"Site_2\", \"Site_3\")\nsite\n\n    Site_1     Site_2     Site_3 \n    \"UCSF\" \"Stanford\"     \"Penn\" \n\n\nLastly, if we wanted to remove the names of site, we can replace them with NULL:\n\nnames(site) &lt;- NULL\nsite\n\n[1] \"UCSF\"     \"Stanford\" \"Penn\"",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Data Types & Vectors</span>"
    ]
  },
  {
    "objectID": "DataTypes.html#initialize---coerce---test-vectors",
    "href": "DataTypes.html#initialize---coerce---test-vectors",
    "title": "8  Data Types & Vectors",
    "section": "\n8.15 Initialize - coerce - test vectors",
    "text": "8.15 Initialize - coerce - test vectors\nThe following summary table lists the functions to initialize, coerce (=convert), and test the main different vector types: \n\n\nInitialize\nCoerce\nTest\n\n\n\nlogical(n)\nas.logical(x)\nis.logical(x)\n\n\ninteger(n)\nas.integer(x)\nis.integer(x)\n\n\ndouble(n)\nas.double(x)\nis.double(x)\n\n\ncharacter(n)\nas.character(x)\nis.character(x)\n\n\n\n\n\n\n\n\n\nCaution\n\n\n\nThe usage of the terms double and numeric across functions is unfortunately inconsistent in R.\n\n\ndouble() is the same as numeric(): They both initialize a vector of type double.\n\n\nas.double() is the same as as.numeric(): They both coerce to type double.BUT\n\n\nis.double() is NOT the same as is.numeric()\n\n\nis.numeric() is TRUE for both integer and double types. It is useful when you want to check if a variable is a number, regardless of whether it is an integer or double.\n\n\nis.double() is TRUE only for type double\n\nis.integer() is TRUE only for type integer.\n\nTherefore, to promote clarity, prefer using double() instead of numeric() and as.double() instead of as.numeric().",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Data Types & Vectors</span>"
    ]
  },
  {
    "objectID": "DataStructures.html",
    "href": "DataStructures.html",
    "title": "9  Data Structures",
    "section": "",
    "text": "9.1 Overview\nThere are 5 main data structures in R:\nVectors are homogeneous data structures which means all of their elements have to be of the same type (see Chapter 8), e.g. integer, double, character, logical.\nMatrices and arrays are vectors with more dimensions, and as such, are also homogeneous.\nLists are the most flexible. Their elements can be any R objects, including lists, and therefore can be nested.\nData frames are a special kind of list. Their elements are one or more vectors, which can be of any type, and form columns. Therefore a data.frame is a two-dimensional data structure where rows typically correspond to cases (e.g. individuals) and columns represent variables. As such, data.frames are the most common data structure for statistical analysis.\nFigure 9.1: R Data Structure summary - Best to read through this chapter first and then refer back to this figure",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Data Structures</span>"
    ]
  },
  {
    "objectID": "DataStructures.html#overview",
    "href": "DataStructures.html#overview",
    "title": "9  Data Structures",
    "section": "",
    "text": "Data Structure\nDimensionality\nContents\nNotes\n\n\n\nVector\n1D\nhomogeneous\nthe “base” object\n\n\nMatrix\n2D\nhomogeneous\na vector with 2 dimensions\n\n\nArray\nND\nhomogeneous\na vector with N dimensions\n\n\nList\n1D; can be nested\nheterogeneous\na collection of any R objects, each of any length\n\n\nData frame\n2D\nheterogeneous\na special kind of list: a collection of (column) vectors of any type, all of the same length\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nCheck object class with class().\nCheck object class and contents’ types with str().\n\n\n\n\n\n\n\n\nCaution\n\n\n\nMany errors in R occur because a variable is, or gets coerced to, the wrong type or class by accident. That’s why it is essential to be able to:\n\ncheck the type of a variable using typeof() or class()\nconvert (coerce) between types or classes using as.* functions",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Data Structures</span>"
    ]
  },
  {
    "objectID": "DataStructures.html#vectors",
    "href": "DataStructures.html#vectors",
    "title": "9  Data Structures",
    "section": "\n9.2 Vectors",
    "text": "9.2 Vectors\nA vector is the most basic and fundamental data structure in R. Other data structures are made up of one or more vectors.\n\nx &lt;- c(1, 3, 5, 7)\nx\n\n[1] 1 3 5 7\n\nclass(x)\n\n[1] \"numeric\"\n\ntypeof(x)\n\n[1] \"double\"\n\n\nA vector has length() but no dim(), e.g.\n\nlength(x)\n\n[1] 4\n\ndim(x)\n\nNULL\n\n\n\n9.2.1 Initializing a vector\nSee Initializing vectors",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Data Structures</span>"
    ]
  },
  {
    "objectID": "DataStructures.html#matrices",
    "href": "DataStructures.html#matrices",
    "title": "9  Data Structures",
    "section": "\n9.3 Matrices",
    "text": "9.3 Matrices\nA matrix is a vector with 2 dimensions.\nTo create a matrix, you pass a vector to the matrix() function and specify number of rows using nrow and/or number of columns using ncol;\n\nx &lt;- matrix(21:50,\n            nrow = 10, ncol = 3)\nx\n\n      [,1] [,2] [,3]\n [1,]   21   31   41\n [2,]   22   32   42\n [3,]   23   33   43\n [4,]   24   34   44\n [5,]   25   35   45\n [6,]   26   36   46\n [7,]   27   37   47\n [8,]   28   38   48\n [9,]   29   39   49\n[10,]   30   40   50\n\nclass(x)\n\n[1] \"matrix\" \"array\" \n\n\nA matrix has length (length(x)) equal to the number of all (i, j) elements or nrow * ncol (if i is the row index and j is the column index) and dimensions (dim(x)) as expected:\n\nlength(x)\n\n[1] 30\n\ndim(x)\n\n[1] 10  3\n\nnrow(x)\n\n[1] 10\n\nncol(x)\n\n[1] 3\n\n\n\n9.3.1 Construct by row vs. by column\nBy default, vectors are constructed by column (byrow = FALSE), e.g.\n\nx &lt;- matrix(1:20, nrow = 10, ncol = 2, byrow = FALSE)\nx\n\n      [,1] [,2]\n [1,]    1   11\n [2,]    2   12\n [3,]    3   13\n [4,]    4   14\n [5,]    5   15\n [6,]    6   16\n [7,]    7   17\n [8,]    8   18\n [9,]    9   19\n[10,]   10   20\n\n\nYou can set the byrow argument to TRUE to fill the matrix by row instead:\n\nx &lt;- matrix(1:20, nrow = 10, ncol = 2, byrow = TRUE)\nx\n\n      [,1] [,2]\n [1,]    1    2\n [2,]    3    4\n [3,]    5    6\n [4,]    7    8\n [5,]    9   10\n [6,]   11   12\n [7,]   13   14\n [8,]   15   16\n [9,]   17   18\n[10,]   19   20\n\n\n\n9.3.2 Initialize a matrix\nYou can initialize a matrix with some constant value, e.g. 0:\n\nx &lt;- matrix(0, nrow = 6, ncol = 4)\nx\n\n     [,1] [,2] [,3] [,4]\n[1,]    0    0    0    0\n[2,]    0    0    0    0\n[3,]    0    0    0    0\n[4,]    0    0    0    0\n[5,]    0    0    0    0\n[6,]    0    0    0    0\n\n\n\n\n\n\n\n\nNote\n\n\n\nTo initialize a matrix with NA values, it is most efficient to use NA of the appropriate type, e.g. NA_real_ for a numeric matrix, NA_character_ for a character matrix, etc. See NA types.\n\n\nFor example, to initialize a numeric matrix with NA values:\n\nx &lt;- matrix(NA_real_, nrow = 6, ncol = 4)\nx\n\n     [,1] [,2] [,3] [,4]\n[1,]   NA   NA   NA   NA\n[2,]   NA   NA   NA   NA\n[3,]   NA   NA   NA   NA\n[4,]   NA   NA   NA   NA\n[5,]   NA   NA   NA   NA\n[6,]   NA   NA   NA   NA\n\n\n\n9.3.3 Bind vectors by column or by row\nUse cbind (“column-bind”) to convert a set of input vectors to columns of a matrix. The vectors must be of the same length:\n\nx &lt;- cbind(1:10, 11:20, 41:50)\nx\n\n      [,1] [,2] [,3]\n [1,]    1   11   41\n [2,]    2   12   42\n [3,]    3   13   43\n [4,]    4   14   44\n [5,]    5   15   45\n [6,]    6   16   46\n [7,]    7   17   47\n [8,]    8   18   48\n [9,]    9   19   49\n[10,]   10   20   50\n\nclass(x)\n\n[1] \"matrix\" \"array\" \n\n\nSimilarly, you can use rbind (“row-bind”) to convert a set of input vectors to rows of a matrix. The vectors again must be of the same length:\n\nx &lt;- rbind(1:10, 11:20, 41:50)\nx\n\n     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]\n[1,]    1    2    3    4    5    6    7    8    9    10\n[2,]   11   12   13   14   15   16   17   18   19    20\n[3,]   41   42   43   44   45   46   47   48   49    50\n\nclass(x)\n\n[1] \"matrix\" \"array\" \n\n\n\n9.3.4 Combine matrices\ncbind() and rbind() can be used to combine two or more matrices together - or vector and matrices:\n\ncbind(matrix(1, nrow = 5, ncol = 2), matrix(2, nrow = 5, ncol = 4))\n\n     [,1] [,2] [,3] [,4] [,5] [,6]\n[1,]    1    1    2    2    2    2\n[2,]    1    1    2    2    2    2\n[3,]    1    1    2    2    2    2\n[4,]    1    1    2    2    2    2\n[5,]    1    1    2    2    2    2",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Data Structures</span>"
    ]
  },
  {
    "objectID": "DataStructures.html#arrays",
    "href": "DataStructures.html#arrays",
    "title": "9  Data Structures",
    "section": "\n9.4 Arrays",
    "text": "9.4 Arrays\nArrays are vectors with dimensions.\nYou can have 1D, 2D or any number of dimensions, i.e. ND arrays.\n\n9.4.1 One-dimensional (“1D”) array\nA 1D array is just like a vector but of class array and with dim(x) equal to length(x). Remember, vectors have only length(x) and undefined dim(x).\n\nx &lt;- 1:10\nxa &lt;- array(1:10, dim = 10)\nclass(x)\n\n[1] \"integer\"\n\nis.vector(x)\n\n[1] TRUE\n\nlength(x)\n\n[1] 10\n\ndim(x)\n\nNULL\n\nclass(xa)\n\n[1] \"array\"\n\nis.vector(xa)\n\n[1] FALSE\n\nlength(xa)\n\n[1] 10\n\ndim(xa)\n\n[1] 10\n\n\nIt is rather unlikely you will need to use a 1D array instead of a vector.\n\n9.4.2 Two-dimensional (“2D”) array\nA 2D array is a matrix:\n\nx &lt;- array(1:40, dim = c(10, 4))\nclass(x)\n\n[1] \"matrix\" \"array\" \n\ndim(x)\n\n[1] 10  4\n\n\n\n9.4.3 Multi-dimensional (“ND”) array\nYou can build an N-dimensional array:\n\nx &lt;- array(1:60, dim = c(5, 4, 3))\nx\n\n, , 1\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    6   11   16\n[2,]    2    7   12   17\n[3,]    3    8   13   18\n[4,]    4    9   14   19\n[5,]    5   10   15   20\n\n, , 2\n\n     [,1] [,2] [,3] [,4]\n[1,]   21   26   31   36\n[2,]   22   27   32   37\n[3,]   23   28   33   38\n[4,]   24   29   34   39\n[5,]   25   30   35   40\n\n, , 3\n\n     [,1] [,2] [,3] [,4]\n[1,]   41   46   51   56\n[2,]   42   47   52   57\n[3,]   43   48   53   58\n[4,]   44   49   54   59\n[5,]   45   50   55   60\n\nclass(x)\n\n[1] \"array\"\n\n\nYou can provide names for each dimensions using the dimnames argument. It accepts a list where each elements is a character vector of length equal to the dimension length. Using the same example as above, we pass three character vector of length 5, 4, and 3 to match the length of the dimensions:\n\nx &lt;- array(1:60,\n            dim = c(5, 4, 3),\n            dimnames = list(letters[1:5],\n                            c(\"alpha\", \"beta\", \"gamma\", \"delta\"),\n                            c(\"x\", \"y\", \"z\")))\n\n3D arrays can be used to represent color images. Here, just for fun, we use rasterImage() to show how you would visualize such an image:\n\nx &lt;- array(sample(0:255, size = 12 * 12 * 3, replace = TRUE), dim = c(12, 12, 3))\npar(\"pty\")\n\n[1] \"m\"\n\npar(pty = \"s\")\nplot(NULL, NULL,\n     xlim = c(0, 100), ylim = c(0, 100),\n     axes = FALSE, ann = FALSE, pty = \"s\")\nrasterImage(x / 255, xleft = 0, ybottom = 0, xright = 100, ytop = 100)",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Data Structures</span>"
    ]
  },
  {
    "objectID": "DataStructures.html#lists",
    "href": "DataStructures.html#lists",
    "title": "9  Data Structures",
    "section": "\n9.5 Lists",
    "text": "9.5 Lists\nTo define a list, we use list() to pass any number of objects.\nIf these objects are passed as named arguments, the names will be used as element names:\n\nx &lt;- list(one = 1:4,\n          two = sample(seq(0, 100, by = 0.1), size = 10),\n          three = c(\"mango\", \"banana\", \"tangerine\"),\n          four = median)\nclass(x)\n\n[1] \"list\"\n\nstr(x)\n\nList of 4\n $ one  : int [1:4] 1 2 3 4\n $ two  : num [1:10] 64.9 37.6 67.1 7.2 77.5 10.9 29 15.9 65 34\n $ three: chr [1:3] \"mango\" \"banana\" \"tangerine\"\n $ four :function (x, na.rm = FALSE, ...)  \n\nlength(x)\n\n[1] 4\n\n\n\n9.5.1 Nested lists\nSince each element can be any object, we can build nested lists:\n\nx &lt;- list(alpha = letters[sample(26, size = 4)],\n          beta = sample(12),\n          gamma = list(i = rnorm(10),\n                       j = runif(10),\n                       k = seq(0, 1000, length.out = 10)))\nx\n\n$alpha\n[1] \"o\" \"t\" \"c\" \"z\"\n\n$beta\n [1]  3 10  5  4  1 11  7  9  6  8  2 12\n\n$gamma\n$gamma$i\n [1]  0.71406941  0.93094109  0.69767571 -0.92266489 -0.36619439  0.31486522\n [7]  0.94298669 -0.04036322  0.14757294  1.05095575\n\n$gamma$j\n [1] 0.73779608 0.09909672 0.13083053 0.74411395 0.15990955 0.83336543\n [7] 0.19055086 0.46871206 0.81962626 0.59315281\n\n$gamma$k\n [1]    0.0000  111.1111  222.2222  333.3333  444.4444  555.5556  666.6667\n [8]  777.7778  888.8889 1000.0000\n\n\nIn the example above, alpha, beta, and gamma, are x’s elements. Notice how the length of the list refers to the number of these top-level elements:\n\nlength(x)\n\n[1] 3\n\n\n\n9.5.2 Initialize a list\nWhen setting up experiments, it can be very convenient to set up and empty list, where results will be stored (e.g. using a for-loop):\n\nx &lt;- vector(\"list\", length = 4)\nx\n\n[[1]]\nNULL\n\n[[2]]\nNULL\n\n[[3]]\nNULL\n\n[[4]]\nNULL\n\nlength(x)\n\n[1] 4\n\n\n\n9.5.3 Add element to a list\nYou can add a new elements to a list by assigning directly to an element that doesn’t yet exist, which will cause it to be created:\n\nx &lt;- list(a = 1:10, b = rnorm(10))\nx\n\n$a\n [1]  1  2  3  4  5  6  7  8  9 10\n\n$b\n [1] -0.23630780 -0.79507438  0.26842609 -0.69612991 -0.14193811 -0.12717634\n [7]  1.04491005  0.73335184  0.64191453  0.02478336\n\nx$c &lt;- 30:21\nx\n\n$a\n [1]  1  2  3  4  5  6  7  8  9 10\n\n$b\n [1] -0.23630780 -0.79507438  0.26842609 -0.69612991 -0.14193811 -0.12717634\n [7]  1.04491005  0.73335184  0.64191453  0.02478336\n\n$c\n [1] 30 29 28 27 26 25 24 23 22 21\n\n\n\n9.5.4 Combine lists\nYou can combine lists with c(), just like vectors:\n\nl1 &lt;- list(q = 11:14, r = letters[11:14])\nl2 &lt;- list(s = LETTERS[21:24], t = 100:97)\nx &lt;- c(l1, l2)\nx\n\n$q\n[1] 11 12 13 14\n\n$r\n[1] \"k\" \"l\" \"m\" \"n\"\n\n$s\n[1] \"U\" \"V\" \"W\" \"X\"\n\n$t\n[1] 100  99  98  97\n\nlength(x)\n\n[1] 4",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Data Structures</span>"
    ]
  },
  {
    "objectID": "DataStructures.html#combining-different-types-with-c",
    "href": "DataStructures.html#combining-different-types-with-c",
    "title": "9  Data Structures",
    "section": "\n9.6 Combining different types with c()\n",
    "text": "9.6 Combining different types with c()\n\nIt’s best to use c() to either combine elements of the same type into a vector, or to combine lists.\nAs we’ve seen, if all arguments passed to c() are of a single type, you get a vector of that type:\n\nx &lt;- c(12.9, 94.67, 23.74, 46.901)\nx\n\n[1] 12.900 94.670 23.740 46.901\n\nclass(x)\n\n[1] \"numeric\"\n\n\nIf arguments passed to c() are a mix of numeric and character, they all get coerced to character.\n\n(x &lt;- c(23.54, \"mango\", \"banana\", 75))\n\n[1] \"23.54\"  \"mango\"  \"banana\" \"75\"    \n\nclass(x)\n\n[1] \"character\"\n\n\nIf you pass more types of objects (which cannot be coerced to character) you get a list, since it is the only structure that can support all of them together:\n\n(x &lt;- c(42, mean, \"potatoes\"))\n\n[[1]]\n[1] 42\n\n[[2]]\nfunction (x, ...) \nUseMethod(\"mean\")\n&lt;bytecode: 0x1210e9220&gt;\n&lt;environment: namespace:base&gt;\n\n[[3]]\n[1] \"potatoes\"\n\nclass(x)\n\n[1] \"list\"",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Data Structures</span>"
    ]
  },
  {
    "objectID": "DataStructures.html#dataframestruc",
    "href": "DataStructures.html#dataframestruc",
    "title": "9  Data Structures",
    "section": "\n9.7 Data frames",
    "text": "9.7 Data frames\n\n\n\n\n\n\nNote\n\n\n\nA data frames is a special type of list where each element has the same length and forms a column, resulting in a 2D structure. Unlike matrices, each column can contain a different data type.\n\n\ndata.frames are usually created with named elements:\n\nx &lt;- data.frame(Feat_1 = 1:5,\n                Feat_2 = rnorm(5),\n                Feat_3 = paste0(\"rnd_\", sample(seq(100), size = 5)))\nx\n\n  Feat_1     Feat_2 Feat_3\n1      1  0.9665632 rnd_87\n2      2  1.6218976 rnd_86\n3      3  0.2895373 rnd_11\n4      4 -0.3127645  rnd_6\n5      5  2.8406137 rnd_22\n\nclass(x)\n\n[1] \"data.frame\"\n\nstr(x)\n\n'data.frame':   5 obs. of  3 variables:\n $ Feat_1: int  1 2 3 4 5\n $ Feat_2: num  0.967 1.622 0.29 -0.313 2.841\n $ Feat_3: chr  \"rnd_87\" \"rnd_86\" \"rnd_11\" \"rnd_6\" ...\n\nclass(x$Feat_1)\n\n[1] \"integer\"\n\n\n\n\n\n\n\n\nNote\n\n\n\nUnlike a matrix, the elements of a data.frame are its columns, not the individual values in each position. Therefore the length of a data.frame is equal to the number of columns.\n\n\n\nmat &lt;- matrix(1:100, nrow = 10)\nlength(mat)\n\n[1] 100\n\ndf &lt;- as.data.frame(mat)\nlength(df)\n\n[1] 10\n\n\nJust like with lists, you can add new columns to a data.frame using assignment to a new element, i.e. column:\n\nx &lt;- data.frame(PIDN = sample(8001:9000, size = 10, replace = TRUE),\n                Age = rnorm(10, mean = 48, sd = 2.9))\nx\n\n   PIDN      Age\n1  8345 43.44100\n2  8809 52.42539\n3  8527 51.18651\n4  8034 47.79848\n5  8232 39.43173\n6  8186 51.71419\n7  8078 50.96995\n8  8909 49.30835\n9  8852 50.87468\n10 8202 43.44940\n\nx$Weight &lt;- rnorm(10, mean = 84, sd = 1.5)\nx\n\n   PIDN      Age   Weight\n1  8345 43.44100 82.57095\n2  8809 52.42539 84.65434\n3  8527 51.18651 85.43061\n4  8034 47.79848 85.86807\n5  8232 39.43173 83.91720\n6  8186 51.71419 81.32832\n7  8078 50.96995 84.63175\n8  8909 49.30835 87.90053\n9  8852 50.87468 83.98714\n10 8202 43.44940 84.56448",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Data Structures</span>"
    ]
  },
  {
    "objectID": "DataStructures.html#generating-sequences",
    "href": "DataStructures.html#generating-sequences",
    "title": "9  Data Structures",
    "section": "\n9.8 Generating sequences",
    "text": "9.8 Generating sequences\nOther than assigning individual elements explicitly with c(), there are multiple ways to create numeric sequences.\nColon notation allows generating a simple integer sequence:\n\nx &lt;- 1:5\nx\n\n[1] 1 2 3 4 5\n\ntypeof(x)\n\n[1] \"integer\"\n\n\nseq(from, to, by)\n\nseq(1, 10, by = 0.5)\n\n [1]  1.0  1.5  2.0  2.5  3.0  3.5  4.0  4.5  5.0  5.5  6.0  6.5  7.0  7.5  8.0\n[16]  8.5  9.0  9.5 10.0\n\n\nseq(from, to, length.out = n)\n\nseq(-5, 12, length.out = 11)\n\n [1] -5.0 -3.3 -1.6  0.1  1.8  3.5  5.2  6.9  8.6 10.3 12.0\n\n\nseq(object) generates a sequence of length equal to length(object)\n\nseq(iris)\n\n[1] 1 2 3 4 5\n\n\nseq_along(object) is the optimized version of seq(object):\n\nseq_along(iris)\n\n[1] 1 2 3 4 5\n\n\nseq(n) is equivalent to 1:n\n\nseq(12)\n\n [1]  1  2  3  4  5  6  7  8  9 10 11 12\n\n# same output as\n1:12\n\n [1]  1  2  3  4  5  6  7  8  9 10 11 12\n\n\nseq_len(n) is an optimized version of seq(n):\n\nseq_len(12)\n\n [1]  1  2  3  4  5  6  7  8  9 10 11 12",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Data Structures</span>"
    ]
  },
  {
    "objectID": "DataStructures.html#naming-object-elements",
    "href": "DataStructures.html#naming-object-elements",
    "title": "9  Data Structures",
    "section": "\n9.9 Naming object elements",
    "text": "9.9 Naming object elements\nAll objects’ elements can be named.\n\n9.9.1 Vectors\nYou can create a vector with named elements:\n\nSBP = c(before = 179, after = 118)\nSBP\n\nbefore  after \n   179    118 \n\n\nUse names() to get a vector’s elements’ names:\n\nnames(SBP)\n\n[1] \"before\" \"after\" \n\n\nYou can add names to an existing, unnamed, vector:\n\nN &lt;- c(112, 120)\nnames(N)\n\nNULL\n\nnames(N) &lt;- c(\"Cases\", \"Controls\")\nN\n\n   Cases Controls \n     112      120 \n\n\nMatrices and data frames can have column names (colnames) and row names (rownames):\n\nxm &lt;- matrix(1:15, nrow = 5)\nxdf &lt;- as.data.frame(xm)\ncolnames(xm)\n\nNULL\n\ncolnames(xdf)\n\n[1] \"V1\" \"V2\" \"V3\"\n\nrownames(xm)\n\nNULL\n\ncolnames(xm) &lt;- colnames(xdf) &lt;- paste0(\"Feature\", seq(3))\nrownames(xm) &lt;- rownames(xdf) &lt;- paste0(\"Case\", seq(5))\nxm\n\n      Feature1 Feature2 Feature3\nCase1        1        6       11\nCase2        2        7       12\nCase3        3        8       13\nCase4        4        9       14\nCase5        5       10       15\n\nxdf\n\n      Feature1 Feature2 Feature3\nCase1        1        6       11\nCase2        2        7       12\nCase3        3        8       13\nCase4        4        9       14\nCase5        5       10       15\n\n\nLists are vectors so they have names. These can be defined when a list is created using the name-value pairs or added/changed at any time.\n\nx &lt;- list(HospitalName = \"CaliforniaGeneral\",\n          ParticipatingDepartments = c(\"Neurology\", \"Psychiatry\", \"Neurosurgery\"),\n          PatientIDs = 1001:1018)\nnames(x)\n\n[1] \"HospitalName\"             \"ParticipatingDepartments\"\n[3] \"PatientIDs\"              \n\n\nAdd/Change names:\n\nnames(x) &lt;- c(\"Hospital\", \"Departments\", \"PIDs\")\nx\n\n$Hospital\n[1] \"CaliforniaGeneral\"\n\n$Departments\n[1] \"Neurology\"    \"Psychiatry\"   \"Neurosurgery\"\n\n$PIDs\n [1] 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015\n[16] 1016 1017 1018\n\n\nRemember that data a frame is a special type of list. Therefore in data frames colnames and names are equivalent:\n\ncolnames(iris)\n\n[1] \"Sepal.Length\" \"Sepal.Width\"  \"Petal.Length\" \"Petal.Width\"  \"Species\"     \n\nnames(iris)\n\n[1] \"Sepal.Length\" \"Sepal.Width\"  \"Petal.Length\" \"Petal.Width\"  \"Species\"     \n\n\n\n\n\n\n\n\nTip\n\n\n\nNote: As we saw, matrices have colnames() and rownames() Using names() on a matrix will assign names to individual elements, as if it was a long vector.",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Data Structures</span>"
    ]
  },
  {
    "objectID": "DataStructures.html#initialize---coerce---test-data-structures",
    "href": "DataStructures.html#initialize---coerce---test-data-structures",
    "title": "9  Data Structures",
    "section": "\n9.10 Initialize - coerce - test data structures",
    "text": "9.10 Initialize - coerce - test data structures\nThe following table lists the functions to initialize, coerce (=convert), and test the core data structures, which are shown in more detail in the following paragraphs:\n\n\n\n\n\n\n\nInitialize\nCoerce\nTest\n\n\n\nmatrix(NA, nrow = x, ncol = y)\nas.matrix(x)\nis.matrix(x)\n\n\narray(NA, dim = c(x, y, z))\nas.array(x)\nis.array(x)\n\n\nvector(mode = \"list\", length = x)\nas.list(x)\nis.list(x)\n\n\ndata.frame(matrix(NA, x, y))\nas.data.frame(x)\nis.data.frame(x)",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Data Structures</span>"
    ]
  },
  {
    "objectID": "DataStructures.html#attributes",
    "href": "DataStructures.html#attributes",
    "title": "9  Data Structures",
    "section": "\n9.11 Attributes",
    "text": "9.11 Attributes\nR objects may have some builtin attributes but you can add arbitrary attributes to any R object. These are used to store additional information, sometimes called metadata.\n\n9.11.1 Print all attributes\nTo print an object’s attributes, use attributes:\n\nattributes(iris)\n\n$names\n[1] \"Sepal.Length\" \"Sepal.Width\"  \"Petal.Length\" \"Petal.Width\"  \"Species\"     \n\n$class\n[1] \"data.frame\"\n\n$row.names\n  [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18\n [19]  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36\n [37]  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54\n [55]  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72\n [73]  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90\n [91]  91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 106 107 108\n[109] 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126\n[127] 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144\n[145] 145 146 147 148 149 150\n\n\nThis returns a named list. In this case we got names, class, and row.names of the iris data frame.\n\n9.11.2 Get or set specific attributes\nYou can assign new attributes using attr:\n\n(x &lt;- c(1:10))\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\nattr(x, \"name\") &lt;- \"Very special vector\"\n\nPrinting the vector after adding a new attribute, prints the attribute name and value underneath the vector itself:\n\nx\n\n [1]  1  2  3  4  5  6  7  8  9 10\nattr(,\"name\")\n[1] \"Very special vector\"\n\n\nOur trusty str function will print attributes as well:\n\nstr(x)\n\n int [1:10] 1 2 3 4 5 6 7 8 9 10\n - attr(*, \"name\")= chr \"Very special vector\"\n\n\n\n9.11.2.1 A matrix is a vector - a closer look\nLet’s see how a matrix is literally just a vector with assigned dimensions.\nStart with a vector of length 20:\n\nx &lt;- 1:20\nx\n\n [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20\n\n\nThe vector has no attributes - yet:\n\nattributes(x)\n\nNULL\n\n\nTo convert to a matrix, we would normally pass our vector to the matrix() function and define number of rows and/or columns:\n\nxm &lt;- matrix(x, nrow = 5)\nxm\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    6   11   16\n[2,]    2    7   12   17\n[3,]    3    8   13   18\n[4,]    4    9   14   19\n[5,]    5   10   15   20\n\nattributes(xm)\n\n$dim\n[1] 5 4\n\n\nJust for demonstration, let’s instead directly add a dimension attribute to our vector:\n\nattr(x, \"dim\") &lt;- c(5, 4)\nx\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    6   11   16\n[2,]    2    7   12   17\n[3,]    3    8   13   18\n[4,]    4    9   14   19\n[5,]    5   10   15   20\n\nclass(x)\n\n[1] \"matrix\" \"array\" \n\n\nJust like that, we have created a matrix.",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Data Structures</span>"
    ]
  },
  {
    "objectID": "Indexing.html",
    "href": "Indexing.html",
    "title": "10  Indexing",
    "section": "",
    "text": "10.1 Basic concepts: Indexing data structures\nAn index is used to pick elements of a data structure (i.e. a vector, matrix, array, list, data frame, etc.). You can select, or exclude, one or multiple elements at a time. This means there are ways to index structures of any dimensionality, whether 1-, 2-, or N-dimensional. There are often multiple ways to index a given data structure (e.g. a 2-dimensional table or data frame).  In data science, indexing 2-dimensional tables or data frames is one of the most common and important operations. The terms filter and select are often used:",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Indexing</span>"
    ]
  },
  {
    "objectID": "Indexing.html#basic-concepts-indexing-data-structures",
    "href": "Indexing.html#basic-concepts-indexing-data-structures",
    "title": "10  Indexing",
    "section": "",
    "text": "Filter: identify cases i.e. rows of a table or data frame\n\nSelect: identify variables a.k.a. features i.e. columns of a table or data frame\n\n\n\n\n\n\n\nFigure 10.1: In data science, a filter operation is used to identify cases (rows) of a table or data frame, and a select operation is used to identify variables a.k.a. features (columns).",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Indexing</span>"
    ]
  },
  {
    "objectID": "Indexing.html#indexing-in-r",
    "href": "Indexing.html#indexing-in-r",
    "title": "10  Indexing",
    "section": "\n10.2 Indexing in R",
    "text": "10.2 Indexing in R\nThere are three types of index vectors you can use in R to identify elements of an object:\n\n\nInteger vector defining index of elements to include (or exclude)\n\nLogical vector specifying whether to include or not each element\n\nCharacter vector identifying elements, rows, or columns by name\n\nInteger indexing in R is 1-based, meaning the first item of a vector is in position 1. In contrast, many programming languages use 0-based indexing where the first element is in the 0th position, the second in the 1st, and the nth in the n-1 position.  To understand indexing, make sure you are very comfortable with the core R data structures: vectors, matrices, arrays, lists, and data.frames. What is indexing used for?\nIndexing can be used to get values from an object or to set values in an object.  The main indexing operator in R is the square bracket ([]).\nAs you’ll see below, lists use both single and double square brackets ([[]]).\n\n\n\n\n\n\nFigure 10.2: Condensed summary of indexing operations on 3 common R data structures. Read through the chapter first before referring back to this figure.",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Indexing</span>"
    ]
  },
  {
    "objectID": "Indexing.html#indexvectors",
    "href": "Indexing.html#indexvectors",
    "title": "10  Indexing",
    "section": "\n10.3 Vectors",
    "text": "10.3 Vectors\nStart with a simple vector:\n\nx &lt;- 15:24\nx\n\n [1] 15 16 17 18 19 20 21 22 23 24\n\n\n\n10.3.1 Integer Index\nGet the 5th element of a vector:\n\nx[5]\n\n[1] 19\n\n\nGet elements 6 through 9 of the same vector:\n\nx[6:9]\n\n[1] 20 21 22 23\n\n\nAn integer index can be used to reverse order of elements:\n\nx[5:3]\n\n[1] 19 18 17\n\n\nNote that an integer index can be used to repeat elements. This is often done by accident, when someone passes the wrong vector as an index, so beware.\n\nx[c(1, 1, 1, 4)]\n\n[1] 15 15 15 18\n\n\n\n10.3.2 Logical Index\nLogical indexes are usually created as the output of a logical operation, i.e. an elementwise comparison.  Select elements with value greater than 19:\n\nidl &lt;- x &gt; 19\n\nThe above comparison is vectorized (Chapter 17), meaning that the comparison is performed elementwise and the result is a logical vector of the same length as the original vector. In other words, x &gt; 19 asks the question “is x[i] greater than 19” for each element i of x. The output of a logical operation is a logical vector, i.e. a vector that can only contain TRUE, FALSE, and NA values.\n\nidl\n\n [1] FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE\n\n\nYou can pass the logical vector as an index to the original vector to get the elements that correspond to TRUE in the logical vector:\n\nx[idl]\n\n[1] 20 21 22 23 24\n\n\nLogical vectors can be created directly in the brackets:\n\nx[x &gt; 19]\n\n[1] 20 21 22 23 24\n\n\n\n10.3.3 Get vs. Set\n\nx &lt;- c(24, 32, 41, 37, 999, 999, 999)\n\nIndexing allows you to access specific elements, for example to perform calculations on them.\nGet the mean of elements 1 through 4:\n\nmean(x[1:4])\n\n[1] 33.5\n\n\nYou can combine indexing with assignment to replace elements of an object.\nReplace values in elements 1:4 with their log:\n\nx[1:4] &lt;- log(x[1:4])\nx\n\n[1]   3.178054   3.465736   3.713572   3.610918 999.000000 999.000000 999.000000\n\n\nReplace elements that are equal to 999 with NA:\n\nx[x == 999] &lt;- NA\nx\n\n[1] 3.178054 3.465736 3.713572 3.610918       NA       NA       NA",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Indexing</span>"
    ]
  },
  {
    "objectID": "Indexing.html#indexmatrices",
    "href": "Indexing.html#indexmatrices",
    "title": "10  Indexing",
    "section": "\n10.4 Matrices",
    "text": "10.4 Matrices\nReminder:\n\nA matrix is a 2D vector and contains elements of the same type (numeric, integer, character, etc.).\nA data frame is a 2D list and each column can contain a different data type.\n\nTo index a 2D structure, whether a matrix or data frame, we use the form: [row, column].\nThe following indexing operations are therefore the same whether applied on a matrix or a data frame:\n\nmat &lt;- matrix(21:60, nrow = 10)\ncolnames(mat) &lt;- paste0(\"Feature_\", seq(ncol(mat)))\nrownames(mat) &lt;- paste0(\"Row_\", seq(nrow(mat)))\nmat\n\n       Feature_1 Feature_2 Feature_3 Feature_4\nRow_1         21        31        41        51\nRow_2         22        32        42        52\nRow_3         23        33        43        53\nRow_4         24        34        44        54\nRow_5         25        35        45        55\nRow_6         26        36        46        56\nRow_7         27        37        47        57\nRow_8         28        38        48        58\nRow_9         29        39        49        59\nRow_10        30        40        50        60\n\ndf &lt;- as.data.frame(mat)\ndf\n\n       Feature_1 Feature_2 Feature_3 Feature_4\nRow_1         21        31        41        51\nRow_2         22        32        42        52\nRow_3         23        33        43        53\nRow_4         24        34        44        54\nRow_5         25        35        45        55\nRow_6         26        36        46        56\nRow_7         27        37        47        57\nRow_8         28        38        48        58\nRow_9         29        39        49        59\nRow_10        30        40        50        60\n\n\nTo get the contents of the fifth row, second column:\n\nmat[5, 2]\n\n[1] 35\n\ndf[5, 2]\n\n[1] 35\n\n\nWe show the following on matrices, but they work just the same on data.frames.\nIf you want to select an entire row or an entire column, you leave the row or column index blank, but you must include a comma:\nGet the first row:\n\nmat[1, ]\n\nFeature_1 Feature_2 Feature_3 Feature_4 \n       21        31        41        51 \n\n\nGet the second column:\n\nmat[, 2]\n\n Row_1  Row_2  Row_3  Row_4  Row_5  Row_6  Row_7  Row_8  Row_9 Row_10 \n    31     32     33     34     35     36     37     38     39     40 \n\n\nNote that colnames and rownames were added to the matrix above for convenience - if they are absent, there are no labels above each element.\nYou can define ranges for both rows and columns:\n\nmat[6:7, 2:4]\n\n      Feature_2 Feature_3 Feature_4\nRow_6        36        46        56\nRow_7        37        47        57\n\n\nYou can use vectors to specify any combination of rows and columns.\nGet rows 2, 4, and 7 of columns 1, 4, and 3:\n\nmat[c(2, 4, 7), c(1, 4, 3)]\n\n      Feature_1 Feature_4 Feature_3\nRow_2        22        52        42\nRow_4        24        54        44\nRow_7        27        57        47\n\n\nSince a matrix is a vector with 2 dimensions, you can also index the underlying vector directly. Regardless of whether a matrix was created by row or by column (default), the data is stored and accessed by column. You can see that by converting the matrix to a one-dimensional vector:\n\nas.vector(mat)\n\n [1] 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45\n[26] 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60\n\n\nsame as:\n\nc(mat)\n\n [1] 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45\n[26] 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60\n\n\nFor example, ‘mat’ has 10 rows and 4 columns, therefore the 11th element is in row 1, column 2 - this only works with matrices, not data.frames:\n\nmat[11]\n\n[1] 31\n\n\nis the same as:\n\nmat[1, 2]\n\n[1] 31\n\n\n\n10.4.1 Matrix of indexes\nThis is quite less commonly used, but potentially useful. It allows you to specify a series of individual [i, j] indexes, i.e. is a way to select multiple individual non-contiguous elements\n\nidm &lt;- matrix(c(2, 4, 7, 4, 3, 1), nrow = 3)\nidm\n\n     [,1] [,2]\n[1,]    2    4\n[2,]    4    3\n[3,]    7    1\n\n\nAn n-by-2 matrix can be used to index as a length n vector of [row, colum] indexes. Therefore, the above matrix, will return elements [2, 4], [4, 3], [7, 1]:\n\nmat[idm]\n\n[1] 52 44 27\n\n\n\n10.4.2 Logical index\nIdentify rows with value greater than 36 on the second column:\nThe logical index for this operation is:\n\nmat[, 2] &gt; 36\n\n Row_1  Row_2  Row_3  Row_4  Row_5  Row_6  Row_7  Row_8  Row_9 Row_10 \n FALSE  FALSE  FALSE  FALSE  FALSE  FALSE   TRUE   TRUE   TRUE   TRUE \n\n\nIt can be used directly to index the matrix:\n\nmat[mat[, 2] &gt; 36, ]\n\n       Feature_1 Feature_2 Feature_3 Feature_4\nRow_7         27        37        47        57\nRow_8         28        38        48        58\nRow_9         29        39        49        59\nRow_10        30        40        50        60\n\n\nIndexing a matrix or a data.frame can return either a smaller matrix/data.frame or a vector.\nIn general, many R functions return the simplest R object that can hold the output. As always, check function documentation to look for possible arguments that can change this and what the default behavior is. If you extract a column or a row, you get a vector:\nGet the third column:\n\nmat[, 3]\n\n Row_1  Row_2  Row_3  Row_4  Row_5  Row_6  Row_7  Row_8  Row_9 Row_10 \n    41     42     43     44     45     46     47     48     49     50 \n\nclass(mat[, 3])\n\n[1] \"integer\"\n\n\nYou can specify drop = FALSE to stop R from dropping the unused dimension and return a matrix or data.frame of a single column:\n\nmat[, 3, drop = FALSE]\n\n       Feature_3\nRow_1         41\nRow_2         42\nRow_3         43\nRow_4         44\nRow_5         45\nRow_6         46\nRow_7         47\nRow_8         48\nRow_9         49\nRow_10        50\n\ndf[, 3, drop = FALSE]\n\n       Feature_3\nRow_1         41\nRow_2         42\nRow_3         43\nRow_4         44\nRow_5         45\nRow_6         46\nRow_7         47\nRow_8         48\nRow_9         49\nRow_10        50\n\n\nCheck it is still a matrix or data.frame:\n\nclass(mat[, 3, drop = FALSE])\n\n[1] \"matrix\" \"array\" \n\nclass(df[, 3, drop = FALSE])\n\n[1] \"data.frame\"",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Indexing</span>"
    ]
  },
  {
    "objectID": "Indexing.html#indexlists",
    "href": "Indexing.html#indexlists",
    "title": "10  Indexing",
    "section": "\n10.5 Lists",
    "text": "10.5 Lists\nReminder: A list can contain elements of different classes and of different lengths:\n\nx &lt;- list(one = 1001:1004,\n          two = sample(seq(0, 100, by = 0.1), size = 10),\n          three = c(\"Neuro\", \"Cardio\", \"Radio\"),\n          four = median)\nx\n\n$one\n[1] 1001 1002 1003 1004\n\n$two\n [1] 77.1 59.8 12.6  9.7 38.0 64.7 97.6  8.5 92.7 68.0\n\n$three\n[1] \"Neuro\"  \"Cardio\" \"Radio\" \n\n$four\nfunction (x, na.rm = FALSE, ...) \nUseMethod(\"median\")\n&lt;bytecode: 0x155fad6e0&gt;\n&lt;environment: namespace:stats&gt;\n\n\n\n10.5.1 Get single list element:\nYou can access a single list element using:\n\ndouble brackets [[ with either name or integer position\n\n\n$ followed by name of the element (therefore only works if elements are named)\n\nFor example, to access the third element:\n\nx$three\n\n[1] \"Neuro\"  \"Cardio\" \"Radio\" \n\n\nsame as:\n\nx[[3]]\n\n[1] \"Neuro\"  \"Cardio\" \"Radio\" \n\n\nsame as:\n\nx[[\"three\"]]\n\n[1] \"Neuro\"  \"Cardio\" \"Radio\" \n\n\nTo access a list element programmatically, i.e. using a name or integer index stored in a variable, only the bracket notation works. Therefore, programmatically, you would always use double brackets to access different elements:\n\nidi &lt;- 3\nidc &lt;- \"three\"\nx[[idi]]\n\n[1] \"Neuro\"  \"Cardio\" \"Radio\" \n\nx[[idc]]\n\n[1] \"Neuro\"  \"Cardio\" \"Radio\" \n\n\n\n10.5.2 Get one or more list elements as a list:\nYou can extract one or more list elements as a pruned list using single bracket [ notation. Similar to indexing of a vector, this can be either a logical, integer, or character vector:\n\nx[3]\n\n$three\n[1] \"Neuro\"  \"Cardio\" \"Radio\" \n\nx[\"three\"]\n\n$three\n[1] \"Neuro\"  \"Cardio\" \"Radio\" \n\nx[c(FALSE, FALSE, TRUE, FALSE)]\n\n$three\n[1] \"Neuro\"  \"Cardio\" \"Radio\" \n\n\nGet multiple elements:\n\nx[2:3]\n\n$two\n [1] 77.1 59.8 12.6  9.7 38.0 64.7 97.6  8.5 92.7 68.0\n\n$three\n[1] \"Neuro\"  \"Cardio\" \"Radio\" \n\n# same as\nx[c(\"two\", \"three\")]\n\n$two\n [1] 77.1 59.8 12.6  9.7 38.0 64.7 97.6  8.5 92.7 68.0\n\n$three\n[1] \"Neuro\"  \"Cardio\" \"Radio\" \n\n# same as\nx[c(FALSE, TRUE, TRUE, FALSE)]\n\n$two\n [1] 77.1 59.8 12.6  9.7 38.0 64.7 97.6  8.5 92.7 68.0\n\n$three\n[1] \"Neuro\"  \"Cardio\" \"Radio\" \n\n\n\n10.5.3 Recursive indexing of list\nGiven the following list:\n\nx &lt;- list(PIDN = 2001:2020,\n          Dept = c(\"Neuro\", \"Cardio\", \"Radio\"),\n          Age = rnorm(20, mean = 57, sd = 1.3))\n\nWe can access the 3rd element of the 2nd element:\n\nx[[2]][3]\n\n[1] \"Radio\"\n\n\nor\n\nx[[c(2, 3)]]\n\n[1] \"Radio\"\n\n\nThis is called recursive indexing and is perhaps more often used by accident, when one instead wanted to extract the 2nd and 3rd elements:\n\nx[c(2, 3)]\n\n$Dept\n[1] \"Neuro\"  \"Cardio\" \"Radio\" \n\n$Age\n [1] 57.29980 55.19141 57.13708 56.30935 57.28402 57.30505 58.38783 57.02346\n [9] 58.17086 58.03640 59.72569 55.21018 57.46528 54.28655 57.88502 57.48371\n[17] 54.83856 57.17818 56.09113 57.81507\n\n\n\n10.5.4 Flatten list\nYou can convert a list to a single vector containing all individual components of the original list using unlist(). Notice how names are automatically created based on the original structure:\n\nx &lt;- list(alpha = sample(seq(100), size = 10),\n          beta  = sample(seq(100), size = 10),\n          gamma = sample(seq(100), size = 10))\nx\n\n$alpha\n [1] 61 64 88 57 49 74 98 59 79 18\n\n$beta\n [1] 85 13 94 43 58 48  2 15 14 32\n\n$gamma\n [1] 67 40 63 46 34 28 37 26  9 48\n\nunlist(x)\n\n alpha1  alpha2  alpha3  alpha4  alpha5  alpha6  alpha7  alpha8  alpha9 alpha10 \n     61      64      88      57      49      74      98      59      79      18 \n  beta1   beta2   beta3   beta4   beta5   beta6   beta7   beta8   beta9  beta10 \n     85      13      94      43      58      48       2      15      14      32 \n gamma1  gamma2  gamma3  gamma4  gamma5  gamma6  gamma7  gamma8  gamma9 gamma10 \n     67      40      63      46      34      28      37      26       9      48 \n\n\nIf you want to drop the names, you can set the use.names argument to FALSE or wrap the above in unname():\n\nunlist(x, use.names = FALSE)\n\n [1] 61 64 88 57 49 74 98 59 79 18 85 13 94 43 58 48  2 15 14 32 67 40 63 46 34\n[26] 28 37 26  9 48\n\n# same as\nunname(unlist(x))\n\n [1] 61 64 88 57 49 74 98 59 79 18 85 13 94 43 58 48  2 15 14 32 67 40 63 46 34\n[26] 28 37 26  9 48",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Indexing</span>"
    ]
  },
  {
    "objectID": "Indexing.html#indexdfs",
    "href": "Indexing.html#indexdfs",
    "title": "10  Indexing",
    "section": "\n10.6 Data frames",
    "text": "10.6 Data frames\n\n\n\n\n\n\nNote\n\n\n\nIn data science and related fields the terms filter and select are commonly used:\n\n\nFilter: identify cases i.e. rows\n\nSelect: identify variables a.k.a. features i.e. columns\n\n\n\nWe’ve saw above that a data frame can be indexed in many ways similar to a matrix, i.e. by defining rows and columns. At the same time, we know that a data frame is a rectangular list. Like a list, its elements are vectors of any type (integer, double, character, factor, and more) but, unlike a list, they have to be of the same length. A data frame can also be indexed the same way as a list and similar to list indexing, notice that some methods return a smaller data frame, while others return vectors.\n\n\n\n\n\n\nTip\n\n\n\nYou can index a data frame using all the ways you can index a list and all the ways you can index a matrix.\n\n\nLet’s create a simple data frame:\n\nx &lt;- data.frame(Feat_1 = 21:25,\n                Feat_2 = rnorm(5),\n                Feat_3 = paste0(\"rnd_\", sample(seq(100), size = 5)))\nx\n\n  Feat_1      Feat_2 Feat_3\n1     21  1.11232356  rnd_3\n2     22  0.06007728 rnd_45\n3     23 -0.06447830 rnd_16\n4     24  0.46506291 rnd_82\n5     25 -0.50433435 rnd_10\n\n\n\n10.6.1 Get single column as a vector\nJust like in a list, using double brackets [[ or the $ operator returns an element, i.e. a vector:\n\nx$Feat_2\n\n[1]  1.11232356  0.06007728 -0.06447830  0.46506291 -0.50433435\n\n\n\nx[[2]]\n\n[1]  1.11232356  0.06007728 -0.06447830  0.46506291 -0.50433435\n\n\n\nx[, 2]\n\n[1]  1.11232356  0.06007728 -0.06447830  0.46506291 -0.50433435\n\n\n\n10.6.2 Get “one or more” columns as a data.frame\nAccessing a column by name using square brackets, returns a single-column data.frame:\n\nx[\"Feat_2\"]\n\n       Feat_2\n1  1.11232356\n2  0.06007728\n3 -0.06447830\n4  0.46506291\n5 -0.50433435\n\n\nAccessing a column by [row, column] either by position or name, returns a vector by default:\n\nx[, 2]\n\n[1]  1.11232356  0.06007728 -0.06447830  0.46506291 -0.50433435\n\n\n\nx[, \"Feat_2\"]\n\n[1]  1.11232356  0.06007728 -0.06447830  0.46506291 -0.50433435\n\n\nAs we saw earlier, we can specify drop = FALSE to return a data.frame:\n\nclass(x[, 2, drop = FALSE])\n\n[1] \"data.frame\"\n\nclass(x[, \"Feat_2\", drop = FALSE])\n\n[1] \"data.frame\"\n\n\nAs in lists, all indexing and slicing operations, with the exception of the $ notation, work with a variable holding either a column name of or an integer location:\n\nidi &lt;- 2\nidc &lt;- \"Feat_2\"\nx[idi]\n\n       Feat_2\n1  1.11232356\n2  0.06007728\n3 -0.06447830\n4  0.46506291\n5 -0.50433435\n\nx[idc]\n\n       Feat_2\n1  1.11232356\n2  0.06007728\n3 -0.06447830\n4  0.46506291\n5 -0.50433435\n\nx[[idi]]\n\n[1]  1.11232356  0.06007728 -0.06447830  0.46506291 -0.50433435\n\nx[[idc]]\n\n[1]  1.11232356  0.06007728 -0.06447830  0.46506291 -0.50433435\n\nx[, idi]\n\n[1]  1.11232356  0.06007728 -0.06447830  0.46506291 -0.50433435\n\nx[, idc]\n\n[1]  1.11232356  0.06007728 -0.06447830  0.46506291 -0.50433435\n\nx[, idi, drop = FALSE]\n\n       Feat_2\n1  1.11232356\n2  0.06007728\n3 -0.06447830\n4  0.46506291\n5 -0.50433435\n\nx[, idc, drop = FALSE]\n\n       Feat_2\n1  1.11232356\n2  0.06007728\n3 -0.06447830\n4  0.46506291\n5 -0.50433435\n\n\nExtracting multiple columns returns a data frame:\n\nx[, 2:3]\n\n       Feat_2 Feat_3\n1  1.11232356  rnd_3\n2  0.06007728 rnd_45\n3 -0.06447830 rnd_16\n4  0.46506291 rnd_82\n5 -0.50433435 rnd_10\n\nclass(x[, 2:3])\n\n[1] \"data.frame\"\n\n\n\n10.6.3 Get rows\nUnlike indexing a row of a matrix, indexing a row of a data.frame returns a single-row data.frame, since it contains multiple columns of potentially different types:\n\nx[1, ]\n\n  Feat_1   Feat_2 Feat_3\n1     21 1.112324  rnd_3\n\nclass(x[1, ])\n\n[1] \"data.frame\"\n\n\nConvert into a list using c():\n\nc(x[1, ])\n\n$Feat_1\n[1] 21\n\n$Feat_2\n[1] 1.112324\n\n$Feat_3\n[1] \"rnd_3\"\n\nclass(c(x[1, ]))\n\n[1] \"list\"\n\n\nConvert into a (named) vector using unlist():\n\nunlist(x[1, ])\n\n            Feat_1             Feat_2             Feat_3 \n              \"21\" \"1.11232355629619\"            \"rnd_3\" \n\nclass(unlist(x[1, ]))\n\n[1] \"character\"\n\n\n\n10.6.4 Logical index\n\nx[x$Feat_1 &gt; 22, ]\n\n  Feat_1     Feat_2 Feat_3\n3     23 -0.0644783 rnd_16\n4     24  0.4650629 rnd_82\n5     25 -0.5043344 rnd_10",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Indexing</span>"
    ]
  },
  {
    "objectID": "Indexing.html#logical---integer-indexing",
    "href": "Indexing.html#logical---integer-indexing",
    "title": "10  Indexing",
    "section": "\n10.7 Logical <-> Integer indexing",
    "text": "10.7 Logical &lt;-&gt; Integer indexing\nIn this chapter, we have learned how to use both integer and logical indexes.\n\n\n\n\n\n\nNote\n\n\n\n\nA logical index needs to be of the same dimensions as the object it is indexing (unless you really want to recycle values - see chapter on vectorization):\nyou are specifying whether to include or exclude each element\nAn integer index will be shorter than the object it is indexing: you are specifying which subset of elements to include (or with a - in front, which elements to exclude)\n\n\n\nIt’s easy to convert between the two types.\nFor example, start with a sequence of integers:\n\nx &lt;- 21:30\nx\n\n [1] 21 22 23 24 25 26 27 28 29 30\n\n\nLet’s create a logical index based on two inequalities:\n\nlogical_index &lt;- x &gt; 23 & x &lt; 28\nlogical_index\n\n [1] FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE\n\n\n\n10.7.1 Logical to integer index with which():\n\n\n\n\n\n\nWarning\n\n\n\nThe common mistake is to attempt to convert a logical index to an integer index using as.integer(). This results in a vector of 1’s and 0’s, NOT an integer index.which() converts a logical index to an integer index.\n\n\nwhich() literally gives the position of all TRUE elements in a vector, thus converting a logical to an integer index:\n\ninteger_index &lt;- which(logical_index)\ninteger_index\n\n[1] 4 5 6 7\n\n\ni.e. positions 4, 5, 6, 7 of the logical_index are TRUE\n\n\n\n\n\n\nNote\n\n\n\nA logical and an integer index are equivalent if they select the exact same elements\n\n\nLet’s check than when used to index x, they both return the same result:\n\nx[logical_index]\n\n[1] 24 25 26 27\n\nx[integer_index]\n\n[1] 24 25 26 27\n\nall(x[logical_index] == x[integer_index])\n\n[1] TRUE\n\n\n\n10.7.2 Integer to logical index\nOn the other hand, if we want to convert an integer index to a logical index, we can begin with a logical vector of the same length or dimension as the object we want to index with all FALSE values:\n\nlogical_index_too &lt;- vector(length = length(x))\nlogical_index_too\n\n [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n\nAnd use the integer index to replace the corresponding elements to TRUE:\n\nlogical_index_too[integer_index] &lt;- TRUE\nlogical_index_too\n\n [1] FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE\n\n\nThis, of course, is the same as the logical index we started with.\n\nall(logical_index == logical_index_too)\n\n[1] TRUE",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Indexing</span>"
    ]
  },
  {
    "objectID": "Indexing.html#exclude-cases-using-an-index",
    "href": "Indexing.html#exclude-cases-using-an-index",
    "title": "10  Indexing",
    "section": "\n10.8 Exclude cases using an index",
    "text": "10.8 Exclude cases using an index\nVery often, we want to use an index, whether logical or integer, to exclude cases instead of to select cases. To do that with a logical integer, we simply use an exclamation point in front of the index to negate each element (convert each TRUE to FALSE and each FALSE to TRUE):\n\nlogical_index\n\n [1] FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE\n\n!logical_index\n\n [1]  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE\n\n\n\nx[!logical_index]\n\n[1] 21 22 23 28 29 30\n\n\nTo exclude elements using an integer index, R allows you to use negative indexing:\n\nx[-integer_index]\n\n[1] 21 22 23 28 29 30\n\n\n\n\n\n\n\n\nNote\n\n\n\nTo get the complement of an index, you negate a logical index (!logical_index) or you subtract an integer index (-integer_index).",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Indexing</span>"
    ]
  },
  {
    "objectID": "Indexing.html#beware-of-nas-when-indexing",
    "href": "Indexing.html#beware-of-nas-when-indexing",
    "title": "10  Indexing",
    "section": "\n10.9 Beware of NAs when indexing",
    "text": "10.9 Beware of NAs when indexing\nAssume a simple data.frame with a missing value in the Age column:\n\ndf &lt;- data.frame(\n  Age = c(24, 29, 36, NA, 45, 56, 75),\n  SBP = rnorm(7, mean = 120, sd = 10)\n)\n\nCreate a logical index to select all cases older than 32:\n\nidl &lt;- df[[\"Age\"]] &gt; 32\nidl\n\n[1] FALSE FALSE  TRUE    NA  TRUE  TRUE  TRUE\n\n\nApply the index on the SBP column:\n\ndf[[\"SBP\"]][idl]\n\n[1] 129.6031       NA 104.3068 112.9225 109.6982\n\n\nSimilarly, an integer index containing NA, will return NA for the corresponding element:\n\ndf[[\"SBP\"]][c(3, 4, NA, 5)]\n\n[1] 129.6031 126.3796       NA 104.3068\n\n\nBut which() treats NA as FALSE:\n\nidi &lt;- which(df[[\"Age\"]] &gt; 32)\nidi\n\n[1] 3 5 6 7\n\n\n\ndf[[\"SBP\"]][idi]\n\n[1] 129.6031 104.3068 112.9225 109.6982\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Indexing</span>"
    ]
  },
  {
    "objectID": "Indexing.html#comprehension-check",
    "href": "Indexing.html#comprehension-check",
    "title": "10  Indexing",
    "section": "\n10.10 Comprehension check",
    "text": "10.10 Comprehension check\n\nTo “filter” a dataset means selecting a subset of its:\n\ncellscolumnsrowseigenvectorscolumns and rows",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Indexing</span>"
    ]
  },
  {
    "objectID": "Indexing.html#example",
    "href": "Indexing.html#example",
    "title": "10  Indexing",
    "section": "\n10.11 Example",
    "text": "10.11 Example\nFor example, to filter the iris dataset to only include rows where the Species column is setosa, we can use the following code:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Indexing</span>"
    ]
  },
  {
    "objectID": "Indexing.html#practice",
    "href": "Indexing.html#practice",
    "title": "10  Indexing",
    "section": "\n10.12 Practice",
    "text": "10.12 Practice\nYour turn: Complete the following code to filter the iris dataset so that it only includes rows where Sepal.Length is greater than 7.5.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Indexing</span>"
    ]
  },
  {
    "objectID": "Indexing.html#resources",
    "href": "Indexing.html#resources",
    "title": "10  Indexing",
    "section": "\n10.13 Resources",
    "text": "10.13 Resources\n“Indexing vectors” in An Introduction to R",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Indexing</span>"
    ]
  },
  {
    "objectID": "Factors.html",
    "href": "Factors.html",
    "title": "11  Factors",
    "section": "",
    "text": "11.1 Factors (introductory)\nFactors in R are used to store categorical variables and therefore have many important uses in statistics / data science / machine learning.\nFor example, factors can be used to store information on sex, race, diagnosis, treatment group, etc.\nIf you are new to R and to factors, begin with the following introductory-level section.\nYou can create a factor by passing a numeric or character vector to factor() or to as.factor().\nThe difference between the two is that as.factor() does not accept any arguments while factor() does.\nLet’s start with a character vector that includes three unique values - “a”, “b”, and “c”:\nx &lt;- c(\"a\", \"c\", \"b\", \"b\", \"a\", \"a\", \"b\", \"c\")\nx\n\n[1] \"a\" \"c\" \"b\" \"b\" \"a\" \"a\" \"b\" \"c\"\nAssume that “a”, “b”, and “c” define three different groups and we want to convert this character vector to a factor.as.factor() and factor() without any arguments produce the same output:",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Factors</span>"
    ]
  },
  {
    "objectID": "Factors.html#factorsintro",
    "href": "Factors.html#factorsintro",
    "title": "11  Factors",
    "section": "",
    "text": "Note\n\n\n\nFactors in R are a special type of vector.\n\nEach element can take one value from a set known as the factor’s levels.\nA factor’s levels are stored in a particular order, which affects how that factor is treated by some functions, e.g. in hypothesis testing, model fitting, visualization, etc.\nYou can specify whether or not the order of the levels defines a quantitative relationship such that level1 &lt; level2, etc., in which case the factor is known as ordered.\n\n\n\n\n\n\n\n\n\n11.1.1 Create a factor\n\nxf &lt;- factor(x)\nxf\n\n[1] a c b b a a b c\nLevels: a b c\n\nclass(xf)\n\n[1] \"factor\"\n\nxftoo &lt;- as.factor(x)\nxftoo\n\n[1] a c b b a a b c\nLevels: a b c\n\nclass(xftoo)\n\n[1] \"factor\"\n\n\nNotice how a factor is printed in the R console:\n\nThe elements are printed without double quotes around them, differentiating them from character vectors.\nThe factor levels are printed below the vector values.",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Factors</span>"
    ]
  },
  {
    "objectID": "Factors.html#cross-tabulate-factor-levels",
    "href": "Factors.html#cross-tabulate-factor-levels",
    "title": "11  Factors",
    "section": "\n11.2 (Cross) Tabulate factor levels",
    "text": "11.2 (Cross) Tabulate factor levels\ntable() is a very useful function that, when applied to factors, counts the number of occurrences of each level:\n\ntable(xf)\n\nxf\na b c \n3 3 2 \n\n\nIt can also be used to cross-tabulate two factors. For example, let’s create two factors:\n\ng1 &lt;- factor(\n  c(\"case\", \"control\", \"control\", \"case\", \"control\", \"control\", \"case\")\n)\ng2 &lt;- factor(\n  c(\"untreated\", \"treated\", \"untreated\", \"treated\", \"treated\", \"treated\", \"untreated\")\n)\n\nThen we can cross-tabulate them:\n\ntable(g1, g2)\n\n         g2\ng1        treated untreated\n  case          1         2\n  control       3         1\n\n\n\n11.2.1 Set the order of factor levels\nLet’s look at a different example. We define a factor to identify cases and controls:\n\ng &lt;- factor(c(\"case\", \"control\", \"control\", \"case\", \"control\"))\ng\n\n[1] case    control control case    control\nLevels: case control\n\n\n\n\n\n\n\n\nNote\n\n\n\nBy default, the levels are ordered alphabetically.\n\n\nYou can define the order of the factor levels with the levels argument of the factor() function.\nFor example, the first factor level is used as the baseline in some statistical operations, e.g. glm(), in which case the “control” level should be first.\nMany plotting functions order categorical axes’ labels using the level order.\n\ng &lt;- factor(c(\"case\", \"control\", \"control\", \"case\", \"control\"),\n            levels = c(\"control\", \"case\"))\ng\n\n[1] case    control control case    control\nLevels: control case\n\n\nThe levels argument can include values not present in the input data vector. This may be used for example when some known categories are not present in your sample, but may be added in the future, or you want specifically to show they are absent in a table or a plot, etc.\n\ng &lt;- factor(c(\"Type I\", \"Type III\", \"Type III\", \"Type I\"),\n            levels = c(\"Type I\", \"Type II\", \"Type III\"))\ng\n\n[1] Type I   Type III Type III Type I  \nLevels: Type I Type II Type III\n\n\nOn the other hand, if the levels argument is specified and does not include one or more of the values present in the input data vector, the corresponding elements become NA:\n\ng &lt;- factor(c(\"case\", \"control\", \"undefined\", \"control\", \n              \"case\", \"control\", \"undefined\"),\n            levels = c(\"control\", \"case\"))\ng\n\n[1] case    control &lt;NA&gt;    control case    control &lt;NA&gt;   \nLevels: control case\n\n\n\n11.2.2 Define level labels\nYou can define level names or labels other than the values in the input vector using the labels argument:\nAssume you started with the following character vector:\n\nx &lt;- c(\"female\", \"female\", \"male\", \"female\", \"male\")\n\nYou can attach different labels to each level rather than default to “female” and “male” by passing a character vector to the labels arguments:\n\nxf &lt;- factor(x, labels = c(\"F\", \"M\"))\nxf\n\n[1] F F M F M\nLevels: F M\n\n\nThe order of names in the labels argument must match the order of levels. In the above example, the levels default to c(\"female\", \"male\") because they are sorted alphabetically if not specified. Otherwise, we can specify both the levels and labels arguments to define both order of levels and provide new labels:\n\nxf &lt;- factor(x, \n             levels = c(\"male\", \"female\"),\n             labels = c(\"M\", \"F\"))\nxf\n\n[1] F F M F M\nLevels: M F\n\n\n\n11.2.3 Change level labels of existing factor\nWe can change the labels of a factor object\n\nusing the labels argument of the factor() command in the same way we create a factor from a character or other vector\nusing the levels() command\n\nStart with a factor of two groups and change labels using the factor() command:\n\nxf &lt;- factor(c(\"GroupA\", \"GroupB\", \"GroupB\", \"GroupA\"))\nxf\n\n[1] GroupA GroupB GroupB GroupA\nLevels: GroupA GroupB\n\n\n\nxf &lt;- factor(xf, labels = c(\"A\", \"B\"))\nxf\n\n[1] A B B A\nLevels: A B\n\n\nStart with the same factor and change labels using the levels() command.\nThis is similar to using colnames() on a data.frame and is much faster than using factor() as above:\n\nxf &lt;- factor(c(\"GroupA\", \"GroupB\", \"GroupB\", \"GroupA\"))\nlevels(xf) &lt;- c(\"A\", \"B\")\nxf\n\n[1] A B B A\nLevels: A B\n\n\n\n\n\n\n\n\nCaution\n\n\n\nThe levels() command changes the names of the levels. It cannot be used to change the order of levels, which must be done using factor().",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Factors</span>"
    ]
  },
  {
    "objectID": "Factors.html#factors-advanced",
    "href": "Factors.html#factors-advanced",
    "title": "11  Factors",
    "section": "\n11.3 Factors (advanced)",
    "text": "11.3 Factors (advanced)\n\n\n\n\n\n\nNote\n\n\n\nA factor is a vector A factor contains three crucial pieces of information:\n\nThe underlying integer vector\nThe mapping of integers to labels\nWhether the factor is ordered\n\n\n\nLet’s unpack these.\nBegin with a simple factor:\n\nx &lt;- factor(c(\"female\", \"female\", \"female\", \"male\", \"male\"))\nx\n\n[1] female female female male   male  \nLevels: female male\n\n\nInternally, the command sees there are two distinct labels, female and male, and defaults to assigning integer numbers alphabetically, in this case female has been mapped to ‘1’ and male to ‘2’.\nPrinting a factor prints the vector of labels followed by the levels, i.e. the unique labels.\n\n11.3.1 The underlying integer vector\n\nEach level is assigned an integer. (Internally, this is the “data” that forms the elements of a factor vector). You don’t see these integers unless you convert the factor to numeric (as.numeric()) or look at the (truncated) output of str();\n\nas.numeric(x)\n\n[1] 1 1 1 2 2\n\n\n\n11.3.2 The mapping of integers to labels\n\nThis defines which integer is mapped to which label, i.e. whether 1 is mapped to male or female. You can store the same information regardless which one you choose to call 1 and 2.\nTo get the mapping you can use levels(). It prints the labels in order:\n\nlevels(x)\n\n[1] \"female\" \"male\"  \n\n\nAgain, this means that female is mapped to 1 and male is mapped to 2.\n\nstr(x)\n\n Factor w/ 2 levels \"female\",\"male\": 1 1 1 2 2\n\n\nThe above tells you that x is a factor,\nit has two levels labeled as “female” and “male”, in that order, i.e. female is level 1 and male is level 2.\nThe last part shows that the first five elements (in this case the whole vector) consists of three elements of level 1 (female) followed by 2 elements of level 2 (male).\n\n11.3.2.1 Setting new level labels\nYou can use the levels() command with an assignment to assign new labels to a factor (same syntax to how you use rownames() or colnames() to assign new row or column names to a matrix or data frame);\n\nxf &lt;- factor(sample(c(\"patient_status_positive\", \"patient_status_negative\"),\n                    size = 10, replace = TRUE),\n             levels = c(\"patient_status_positive\", \"patient_status_negative\"))\nxf\n\n [1] patient_status_negative patient_status_negative patient_status_positive\n [4] patient_status_positive patient_status_positive patient_status_negative\n [7] patient_status_negative patient_status_negative patient_status_positive\n[10] patient_status_negative\nLevels: patient_status_positive patient_status_negative\n\n\n\nlevels(xf)\n\n[1] \"patient_status_positive\" \"patient_status_negative\"\n\nlevels(xf) &lt;- c(\"positive\", \"negative\")\nxf\n\n [1] negative negative positive positive positive negative negative negative\n [9] positive negative\nLevels: positive negative\n\n\n\n11.3.2.2 Defining the mapping of labels to integers\nIf you want to define the mapping of labels to their integer representation (and not default to them sorted alphabetically), you use the levels arguments of the factor() function.\nThe vector passed to the levels arguments must include at least all unique values passed to factor(), otherwise you will get NA values.\nWithout defining levels they are assigned alphabetically:\n\nx &lt;- factor(c(\"alpha\", \"alpha\", \"gamma\", \"delta\", \"delta\"))\nx\n\n[1] alpha alpha gamma delta delta\nLevels: alpha delta gamma\n\n\nDefine levels:\n\nx &lt;- factor(c(\"alpha\", \"alpha\", \"gamma\", \"delta\", \"delta\"),\n            levels = c(\"alpha\", \"gamma\", \"delta\"))\nx\n\n[1] alpha alpha gamma delta delta\nLevels: alpha gamma delta\n\n\nThe table command has a number of useful applications, in it simplest form, it tabulates number of elements with each unique value found in a vector:\n\ntable(x)\n\nx\nalpha gamma delta \n    2     1     2 \n\n\nIf you forget (or choose to exclude) a level, all occurrences are replaced by NA:\n\nx &lt;- factor(c(\"alpha\", \"alpha\", \"gamma\", \"delta\", \"delta\"),\n            levels = c(\"alpha\", \"gamma\"))\nx\n\n[1] alpha alpha gamma &lt;NA&gt;  &lt;NA&gt; \nLevels: alpha gamma\n\n\nIf you know that more levels exist, even if no examples are present in your sample, you can includes these extra levels:\n\nx &lt;- factor(c(\"alpha\", \"alpha\", \"gamma\", \"delta\", \"delta\"),\n            levels = c(\"alpha\", \"beta\", \"gamma\", \"delta\"))\nx\n\n[1] alpha alpha gamma delta delta\nLevels: alpha beta gamma delta\n\n\n\ntable(x)\n\nx\nalpha  beta gamma delta \n    2     0     1     2 \n\n\n\n11.3.3 Is the factor ordered\n\nWe looked at how you can define the order of levels using the levels argument in factor(), which affects the integer mapping to each label.\nThis can affect how some applications treat the different levels.\nOn top of the order of the mapping, you can further define if there is a quantitative relationship among levels of the form level 1 &lt; level 2 &lt; ... &lt; level n. This, in turn, can affect how the factor is treated by some functions, like some functions that fit statistical models.\n\n\n\n\n\n\nNote\n\n\n\nAll factors’ levels appear in some order or other.\nAn ordered factor indicates that its levels have a quantitative relationship of the form level 1 &lt; level 2 &lt; ... &lt; level n.\n\n\nFirst an unordered factor:\n\ndat &lt;- sample(c(\"small\", \"medium\", \"large\"), size = 10, replace = TRUE)\nx &lt;- factor(dat)\nx\n\n [1] large  small  large  medium small  small  large  medium medium medium\nLevels: large medium small\n\n\nTo make the above into an ordered factor, we need to define the order of the levels with the levels arguments and also specify that it is ordered with the ordered argument:\n\nx &lt;- factor(dat,\n            levels = c(\"small\", \"medium\", \"large\"),\n            ordered = TRUE)\nx\n\n [1] large  small  large  medium small  small  large  medium medium medium\nLevels: small &lt; medium &lt; large\n\n\nNote how the levels now include the less-than sign (&lt;) between levels to indicate the ordering.\n\n11.3.4 Change order of levels or labels\nWe’ve seen how to create a factor with defined order of levels and how to change level labels already. Because these are prone to serious accidents, let’s look at them again, together.\nTo change the order of levels of an existing factor use factor():\n\nx &lt;- factor(c(\"target\", \"target\", \"control\", \"control\", \"control\"))\nx\n\n[1] target  target  control control control\nLevels: control target\n\n\nChange the order so that target is first (i.e. corresponds to 1:\n\nx &lt;- factor(x, levels = c(\"target\", \"control\"))\nx\n\n[1] target  target  control control control\nLevels: target control\n\n\nTo change the labels of the levels use levels():\n\nx\n\n[1] target  target  control control control\nLevels: target control\n\nlevels(x) &lt;- c(\"hit\", \"decoy\")\nx\n\n[1] hit   hit   decoy decoy decoy\nLevels: hit decoy\n\n\n\n\n\n\n\n\nCaution\n\n\n\nChanging the levels of a factor with levels() does not change the internal integer representation but changes every element’s label.\n\n\n\n11.3.5 Fatal error to avoid\nExample scenario: You receive a dataset for classification where the outcome is a factor of 1s and 0s:\n\noutcome &lt;- factor(c(1, 1, 0, 0, 0, 1, 0))\noutcome\n\n[1] 1 1 0 0 0 1 0\nLevels: 0 1\n\n\nSome classification procedures expect the first level to be the ‘positive’ outcome, so you decide to reorder the levels.\nYou mistakenly use levels() instead of factor(x, levels = c(...)) hoping to achieve this.\nYou end up flipping all the outcome values.\n\nlevels(outcome) &lt;- c(\"1\", \"0\")\noutcome\n\n[1] 0 0 1 1 1 0 1\nLevels: 1 0\n\n\nAll zeros became ones and ones became zeros.\nYour model does the exact opposite of what you intended.\n\n11.3.6 Factor to numeric\nWhile it often makes sense to have factors with words for labels, they can be any character and that includes numbers (i.e. numbers which are treated as labels)\n\nf &lt;- factor(c(3, 7, 7, 9, 3, 3, 9))\nf\n\n[1] 3 7 7 9 3 3 9\nLevels: 3 7 9\n\n\nThis behaves just like any other factor with all the rules we learned above.\nThere is a very easy trap to fall into, if you ever decide to convert such a factor to numeric.\nThe first thing that usually comes to mind is to use as.numeric().\n\n# !don't do this!\nas.numeric(f)\n\n[1] 1 2 2 3 1 1 3\n\n\nBut! We already know this will return the integer index, it will not return the labels as numbers.\nBy understanding the internal representation of the factor, i.e. that a factor is an integer vector indexing a set of labels, you can convert labels to numeric exactly by indexing the set of labels:\n\nlevels(f)[f]\n\n[1] \"3\" \"7\" \"7\" \"9\" \"3\" \"3\" \"9\"\n\n\nThe above suggests that used as an index within the brackets, f is coerced to integer, therefore to understand the above:\n\nlevels(f)\n\n[1] \"3\" \"7\" \"9\"\n\nlevels(f)[as.integer(f)]\n\n[1] \"3\" \"7\" \"7\" \"9\" \"3\" \"3\" \"9\"\n\n# same as\nlevels(f)[f]\n\n[1] \"3\" \"7\" \"7\" \"9\" \"3\" \"3\" \"9\"\n\n\nA different way around this that may be less confusing is to simply convert the factor to character and then to numeric:\n\nas.numeric(as.character(f))\n\n[1] 3 7 7 9 3 3 9",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Factors</span>"
    ]
  },
  {
    "objectID": "Factors.html#interactions",
    "href": "Factors.html#interactions",
    "title": "11  Factors",
    "section": "\n11.4 Interactions",
    "text": "11.4 Interactions\nOn many different occasions we want to look at factor interactions, e.g. for visualization, statistical hypothesis testing, predictive modeling, etc. Some functions allow you to define factors that should be allowed to interact and take of the rest for you. To explicitly create a factor interaction, you can use the interaction() function:\n\nset.seed(2022)\ndat &lt;- data.frame(\n  PID = 8001:8009,\n  Sex = factor(sample(c(\"male\", \"female\"), size = 9, replace = TRUE)),\n  Group = factor(sample(c(\"A\", \"B\"), size = 9, replace = TRUE))\n)\ndat\n\n   PID    Sex Group\n1 8001 female     B\n2 8002   male     A\n3 8003 female     A\n4 8004   male     B\n5 8005   male     B\n6 8006 female     A\n7 8007 female     A\n8 8008   male     B\n9 8009 female     A\n\n\n\ndat[\"Sex_x_Group\"] &lt;- interaction(dat[[\"Sex\"]], dat[[\"Group\"]])\ndat\n\n   PID    Sex Group Sex_x_Group\n1 8001 female     B    female.B\n2 8002   male     A      male.A\n3 8003 female     A    female.A\n4 8004   male     B      male.B\n5 8005   male     B      male.B\n6 8006 female     A    female.A\n7 8007 female     A    female.A\n8 8008   male     B      male.B\n9 8009 female     A    female.A",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Factors</span>"
    ]
  },
  {
    "objectID": "Factors.html#summary",
    "href": "Factors.html#summary",
    "title": "11  Factors",
    "section": "\n11.5 Summary",
    "text": "11.5 Summary\n\n\n\n\n\n\nNote\n\n\n\n\nFactors in R are essentially integer vectors with labels.\nA factor’s internal integer values range from 1 to the number of levels, i.e.  categories.\nEach integer corresponds to a label.\nTo set order of levels: factor(x, levels = levels_in_desired_order) to order levels\nTo change labels: levels(x) &lt;- newlabels or factor(x, labels = newlabels)\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nTo avoid confusion, do not use numbers as level labels, if possible.",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Factors</span>"
    ]
  },
  {
    "objectID": "DataIO.html",
    "href": "DataIO.html",
    "title": "Data Input/Output",
    "section": "",
    "text": "Data input and output refers to reading data in to R and writing data from R. The source or target, respectively, can be local or remote storage, e.g. your computer’s hard drive or an online server.\nThis section covers input/output operations using base R and external packages.",
    "crumbs": [
      "Data Input/Output"
    ]
  },
  {
    "objectID": "baseDataIO.html",
    "href": "baseDataIO.html",
    "title": "12  Base Data I/O",
    "section": "",
    "text": "12.1 CSV\nTabular data typically consists of rows and columns, where the rows correspond to different cases (e.g. patients) and the columns correspond to different variables a.k.a. covariates a.k.a. features. Such data can be stored in multiple different file formats.\nThis includes plain text files, often in a delimited format, and binary files.\nCommon delimited format files includes comma- and tab-separated values (CSV, TSV).\nBinary file formats can be either open (e.g. R’s RDS format) or proprietary (e.g. Microsoft’s XLS).\nR includes built-in support for reading and writing multiple file formats, including delimited format files and its own binary RDS and RData files.\nThird party packages add support for working with virtually any file type.",
    "crumbs": [
      "Data Input/Output",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Base Data I/O</span>"
    ]
  },
  {
    "objectID": "baseDataIO.html#csv",
    "href": "baseDataIO.html#csv",
    "title": "12  Base Data I/O",
    "section": "",
    "text": "12.1.1 Read local CSV\nread.table() is the core function that reads data from formatted text files in R, where cases correspond to lines and variables to columns. Its many arguments allow to read different formats. read.csv() is an alias for read.table() that defaults to commas as separators and dots for decimal points. (Run read.csv in the console to print its source read the documentation with ?read.table).  Some important arguments for read.table() listed here with their default values for read.csv():\n\n\nsep = \",\": Character that separate entries. Default is a comma; use sep = \"\\t\" for tab-separated files (default setting in read.delim())\n\ndec = \".\": Character for the decimal point. Default is a dot; in some cases where a comma is used as the decimal point, the entry separator sep may be a semicolon (default setting in read.csv2())\n\nna.strings = \"NA\": Character vector of strings to be coded as “NA”\n\ncolClasses = NA: Either a character vector defining each column’s type (e.g. c(\"character\", \"numeric\", \"numeric\") recycled as necessary or a named vector defining specific columns’ types (e.g. c(ICD9 = \"character\",  Sex = \"factor\", SBP = \"numeric\", DOB = \"Date\")). Unspecified columns are automatically determined. Note: Set a column to \"NULL\" (with quotes) to exclude that column.\n\nstringsAsFactors = TRUE: Will convert all character vectors to factors\n\n\nmen &lt;-  read.csv(\"../Data/pone.0204161.s001.csv\")\n\n\n\n\n\n\n\nImportant\n\n\n\nWindows users: When working in Windows, system paths should use either single forward slashes (/) or double backslashes (\\\\). The customary Windows path separator, a single backslash (\\), will not work in R.\nFor example, useC:/Users/username/Data/dat.rds or C:\\\\Users\\\\username\\\\Data\\\\dat.rds,NOT C:\\Users\\username\\Data\\dat.rds.\n\n\n\n12.1.2 Read CSV from the web\nread.csv() can directly read an online file. In the second example below, we also define that missing data is coded with ? using the na.strings argument:\n\nhf &lt;- read.csv(\n  \"https://archive.ics.uci.edu/ml/machine-learning-databases/00519/heart_failure_clinical_records_dataset.csv\"\n)\n\nThe above file is read directly from the UCI ML repository (See data repositories).\n\n12.1.3 Read zipped data from the web\n\n12.1.3.1 using gzcon() and read.csv()\n\nread.table() /read.csv() also accepts a “connection” as input.\nHere we define a connection to a zipped file by nesting gzcon() and url():\n\ncon &lt;- gzcon(\n  url(\"https://github.com/EpistasisLab/pmlb/raw/master/datasets/breast_cancer_wisconsin/breast_cancer_wisconsin.tsv.gz\"),\n  text = TRUE\n)\n\nWe read the connection and specify the file is tab-separated, or call read.delim():\n\nbcw &lt;- read.csv(con, header = TRUE, sep = \"\\t\")\n\n#same as\nbcw &lt;- read.delim(con, header = TRUE)\n\n\n12.1.4 Write to CSV\nUse the write.csv() function to write an R object (usually data frame or matrix) to a CSV file. Setting row.names = FALSE is usually a good idea. (Instead of storing data in rownames, it’s usually best to create a new column.)\n\nwrite.csv(iris, \"../Data/iris.csv\", row.names = FALSE)\n\nNote that in this case we did not need to save row names (which are just integers 1 to 150 and would add a useless extra column in the output)",
    "crumbs": [
      "Data Input/Output",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Base Data I/O</span>"
    ]
  },
  {
    "objectID": "baseDataIO.html#rds",
    "href": "baseDataIO.html#rds",
    "title": "12  Base Data I/O",
    "section": "\n12.2 RDS",
    "text": "12.2 RDS\n\n12.2.1 Read single R object from an RDS file\nTo load an object saved in an RDS file, you read it with readRDS() and must assign it to an object:\n\niris_fromFile &lt;- readRDS(\"iris.rds\")\nall(iris == iris_fromFile)\n\nTo read an RDS file directly from a web server, you surround the URL with url():\n\ndat &lt;- readRDS(\n         url(\"https://rtemis.org/pdsr/data/synth2208.rds\")\n       )\n\n\n12.2.2 Write single R object to an RDS file\nYou can write any single R object as an RDS file so that you can recover it later, share it, etc. Remember that since a list can contain any number of objects of any type, you can save essentially any collection of objects in an RDS file.\nFor multiple objects, see also the save.image() command below.\n\nsaveRDS(bcw, \"bcw.rds\")",
    "crumbs": [
      "Data Input/Output",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Base Data I/O</span>"
    ]
  },
  {
    "objectID": "baseDataIO.html#rdata",
    "href": "baseDataIO.html#rdata",
    "title": "12  Base Data I/O",
    "section": "\n12.3 RData",
    "text": "12.3 RData\n\n12.3.1 Write multiple R objects to an RData file\nYou can use the save() function to save multiple R objects to a single .RData file:\n\nmat1 &lt;- sapply(seq_len(10), function(i) rnorm(500))\nmat2 &lt;- sapply(seq_len(10), function(i) rnorm(500))\nsave(mat1, mat2, file = \"./mat.RData\")\n\nNote: we will learn how to use sapply() later under Loop functions\nTo load the variables in the RData file you saved, use the load() command:\n\nload(\"./mat.RData\")\n\nNote that load() adds the objects to your workspace using their original names. You do not assign them to a new object, unlike with the readRDS() call above.\n\n12.3.2 Write your entire workspace to an RData file\nYou can save your entire workspace to a RData file using the save.image() function:\n\nsave.image(\"workspace_2022-08-10.RData\")\n\n\n12.3.3 Load .Rdata\nSame as above, to re-load the workspace saved in the .RData file, use the load() command:\n\nload(\"workspace_2022-08-10.RData\")",
    "crumbs": [
      "Data Input/Output",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Base Data I/O</span>"
    ]
  },
  {
    "objectID": "baseDataIO.html#system-commands",
    "href": "baseDataIO.html#system-commands",
    "title": "12  Base Data I/O",
    "section": "\n12.4 System commands",
    "text": "12.4 System commands\nGet working directory with getwd():\n\ngetwd()\n\nSet the working directory with setwd():\n\nsetwd(\"/Data/\")\n\nYou can set a different working directory with setwd().\nList files in current directory:\n\ndir()\n\nYou can send operating system commands using system():\n\nsystem(\"uname -a\")\n\nNote: See issue here.",
    "crumbs": [
      "Data Input/Output",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Base Data I/O</span>"
    ]
  },
  {
    "objectID": "baseDataIO.html#read-other-common-tabular-data-third-party-formats",
    "href": "baseDataIO.html#read-other-common-tabular-data-third-party-formats",
    "title": "12  Base Data I/O",
    "section": "\n12.5 Read other common tabular data third-party formats",
    "text": "12.5 Read other common tabular data third-party formats\n\n\n\n\n\n\n\nFile type\nFile Extension\npackage::function()\n\n\n\nJSON\n.json\njsonlite::read_json()\n\n\nStata data\n.dta\nhaven::read_dta()\n\n\nSPSS data\n\n.por, .sav, .zsav\n\nhaven::read_spss()\n\n\nSAS transport file\n.xpt\nhaven::read_xpt()\n\n\nMatlab data\n.mat\nrmatio::read.mat()\n\n\nApache Arrow\n.arrow\narrow::read_arrow()\n\n\nApache Arrow\n.feather\narrow::read_feather()\n\n\nApache Arrow\n.parquet\narrow::read_parquet()\n\n\nWeka ARFF\n.arff\nfarff::readARFF()",
    "crumbs": [
      "Data Input/Output",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Base Data I/O</span>"
    ]
  },
  {
    "objectID": "baseDataIO.html#see-also",
    "href": "baseDataIO.html#see-also",
    "title": "12  Base Data I/O",
    "section": "\n12.6 See also",
    "text": "12.6 See also\n\nfast data I/O with data.table",
    "crumbs": [
      "Data Input/Output",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Base Data I/O</span>"
    ]
  },
  {
    "objectID": "baseDataIO.html#resources",
    "href": "baseDataIO.html#resources",
    "title": "12  Base Data I/O",
    "section": "\n12.7 Resources",
    "text": "12.7 Resources\n\n\nR Data Import/Export by the R Core Team.",
    "crumbs": [
      "Data Input/Output",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Base Data I/O</span>"
    ]
  },
  {
    "objectID": "xlsxIO.html",
    "href": "xlsxIO.html",
    "title": "13  Read and Write Excel Data",
    "section": "",
    "text": "13.1 Read .xslx\nTwo popular packages to read Excel .xlsx files in R are:",
    "crumbs": [
      "Data Input/Output",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Read and Write Excel Data</span>"
    ]
  },
  {
    "objectID": "xlsxIO.html#read-.xslx",
    "href": "xlsxIO.html#read-.xslx",
    "title": "13  Read and Write Excel Data",
    "section": "",
    "text": "13.1.1 openxlsx::read.xlsx()\n\nNA strings are defined with argument na.strings.\n\nbcw &lt;- openxlsx::read.xlsx(\"../Data/bcw.xlsx\", na.strings = \".\")\n\n\n13.1.2 readxl::read_xlsx()\n\nNA strings are defined with argument na.\n\nbcw &lt;- readxl::read_xlsx(\"../Data/bcw.xlsx\", na = \".\")",
    "crumbs": [
      "Data Input/Output",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Read and Write Excel Data</span>"
    ]
  },
  {
    "objectID": "xlsxIO.html#write-.xlsx",
    "href": "xlsxIO.html#write-.xlsx",
    "title": "13  Read and Write Excel Data",
    "section": "\n13.2 Write .xlsx",
    "text": "13.2 Write .xlsx\n\n13.2.1 openxlsx::write.xlsx()\n\n\nopenxlsx::write.xlsx(bcw, \"../Data/bcw.xlsx\")\n\nNote: The readxl package does not include a function to write .XLSX files.",
    "crumbs": [
      "Data Input/Output",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Read and Write Excel Data</span>"
    ]
  },
  {
    "objectID": "dtDataIO.html",
    "href": "dtDataIO.html",
    "title": "14  data.table Data I/O",
    "section": "",
    "text": "14.1 Read delimited data with fread()\ndata.table’s “fast read” function fread() offers a replacement for the base read.csv() command. By default, it creates a data.table object, which is likely preferred in most scenarios, but it can create a data.frame by setting data.table = FALSE.\nIt is very useful because it allows:\nAs an example, you can read a gzipped file directly from a URL:\nlibrary(data.table)\ndat &lt;- fread(\"https://archive.ics.uci.edu/ml/machine-learning-databases/00519/heart_failure_clinical_records_dataset.csv\")\ndat\n\n       age anaemia creatinine_phosphokinase diabetes ejection_fraction\n     &lt;num&gt;   &lt;int&gt;                    &lt;int&gt;    &lt;int&gt;             &lt;int&gt;\n  1:    75       0                      582        0                20\n  2:    55       0                     7861        0                38\n  3:    65       0                      146        0                20\n  4:    50       1                      111        0                20\n  5:    65       1                      160        1                20\n ---                                                                  \n295:    62       0                       61        1                38\n296:    55       0                     1820        0                38\n297:    45       0                     2060        1                60\n298:    45       0                     2413        0                38\n299:    50       0                      196        0                45\n     high_blood_pressure platelets serum_creatinine serum_sodium   sex smoking\n                   &lt;int&gt;     &lt;num&gt;            &lt;num&gt;        &lt;int&gt; &lt;int&gt;   &lt;int&gt;\n  1:                   1    265000              1.9          130     1       0\n  2:                   0    263358              1.1          136     1       0\n  3:                   0    162000              1.3          129     1       1\n  4:                   0    210000              1.9          137     1       0\n  5:                   0    327000              2.7          116     0       0\n ---                                                                          \n295:                   1    155000              1.1          143     1       1\n296:                   0    270000              1.2          139     0       0\n297:                   0    742000              0.8          138     0       0\n298:                   0    140000              1.4          140     1       1\n299:                   0    395000              1.6          136     1       1\n      time DEATH_EVENT\n     &lt;int&gt;       &lt;int&gt;\n  1:     4           1\n  2:     6           1\n  3:     7           1\n  4:     7           1\n  5:     8           1\n ---                  \n295:   270           0\n296:   271           0\n297:   278           0\n298:   280           0\n299:   285           0",
    "crumbs": [
      "Data Input/Output",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>data.table Data I/O</span>"
    ]
  },
  {
    "objectID": "dtDataIO.html#read-delimited-data-with-fread",
    "href": "dtDataIO.html#read-delimited-data-with-fread",
    "title": "14  data.table Data I/O",
    "section": "",
    "text": "very fast, parallelized reading of large delimited files, e.g. with millions of rows\ncan directly read zipped files\nsmart automatic discovery of delimiters when sep = \"auto\" (default)\nmultiple other conveniences\n\n\n\n\n\n\n14.1.1 See also\nConvenience features of fread",
    "crumbs": [
      "Data Input/Output",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>data.table Data I/O</span>"
    ]
  },
  {
    "objectID": "dtDataIO.html#write-delimited-data-with-fwrite",
    "href": "dtDataIO.html#write-delimited-data-with-fwrite",
    "title": "14  data.table Data I/O",
    "section": "\n14.2 Write delimited data with fwrite()\n",
    "text": "14.2 Write delimited data with fwrite()\n\nfwrite() similarly provides a faster, parallelized, and more flexible replacement for write.csv():\n\nfwrite(dat, \"/path/to/file.csv\")",
    "crumbs": [
      "Data Input/Output",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>data.table Data I/O</span>"
    ]
  },
  {
    "objectID": "dtDataIO.html#save-a-data.table-to-rds-file",
    "href": "dtDataIO.html#save-a-data.table-to-rds-file",
    "title": "14  data.table Data I/O",
    "section": "\n14.3 Save a data.table to RDS file",
    "text": "14.3 Save a data.table to RDS file\nSame as any R object, you can save a data.table to disk using saveRDS(). Suppose you have read data in with fread() or coerced a dataset using as.data.table(), done some cleaning up, type conversions, data transformations, etc, this is the preferred way to save your work, so you can reload at any time.\n\nsaveRDS(dat, \"/path/to/data.rds\")",
    "crumbs": [
      "Data Input/Output",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>data.table Data I/O</span>"
    ]
  },
  {
    "objectID": "readrDataIO.html",
    "href": "readrDataIO.html",
    "title": "15  readr Data I/O",
    "section": "",
    "text": "15.1 Read delimited data\nThe readr package includes functions read_delim(), read_csv(), read_csv2(), and read_tsv() to read delilmited files.\nImportant arguments:\nlibrary(readr)\ndat &lt;- read_csv(\"https://archive.ics.uci.edu/ml/machine-learning-databases/00519/heart_failure_clinical_records_dataset.csv\")\n\nRows: 299 Columns: 13\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (13): age, anaemia, creatinine_phosphokinase, diabetes, ejection_fractio...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nAs part of the tidyverse, readr returns a tibble.\ndat\n\n# A tibble: 299 × 13\n     age anaemia creatinine_phosphokinase diabetes ejection_fraction\n   &lt;dbl&gt;   &lt;dbl&gt;                    &lt;dbl&gt;    &lt;dbl&gt;             &lt;dbl&gt;\n 1    75       0                      582        0                20\n 2    55       0                     7861        0                38\n 3    65       0                      146        0                20\n 4    50       1                      111        0                20\n 5    65       1                      160        1                20\n 6    90       1                       47        0                40\n 7    75       1                      246        0                15\n 8    60       1                      315        1                60\n 9    65       0                      157        0                65\n10    80       1                      123        0                35\n# ℹ 289 more rows\n# ℹ 8 more variables: high_blood_pressure &lt;dbl&gt;, platelets &lt;dbl&gt;,\n#   serum_creatinine &lt;dbl&gt;, serum_sodium &lt;dbl&gt;, sex &lt;dbl&gt;, smoking &lt;dbl&gt;,\n#   time &lt;dbl&gt;, DEATH_EVENT &lt;dbl&gt;",
    "crumbs": [
      "Data Input/Output",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>readr Data I/O</span>"
    ]
  },
  {
    "objectID": "readrDataIO.html#read-delimited-data",
    "href": "readrDataIO.html#read-delimited-data",
    "title": "15  readr Data I/O",
    "section": "",
    "text": "delim: The field delimiter, for read_delim() only. Defaults to NULL, which means it will try to guess the correct delimiter.\n\nna: Character vector of strings to interpret as missing values, i.e. NA.",
    "crumbs": [
      "Data Input/Output",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>readr Data I/O</span>"
    ]
  },
  {
    "objectID": "readrDataIO.html#write-delimited-data",
    "href": "readrDataIO.html#write-delimited-data",
    "title": "15  readr Data I/O",
    "section": "\n15.2 Write delimited data",
    "text": "15.2 Write delimited data\nThe readr package includes functions write_delim(), write_csv(), write_csv2().\n\nwrite_csv(dat, \"/path/to/file.csv\")",
    "crumbs": [
      "Data Input/Output",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>readr Data I/O</span>"
    ]
  },
  {
    "objectID": "readrDataIO.html#further-reading",
    "href": "readrDataIO.html#further-reading",
    "title": "15  readr Data I/O",
    "section": "\n15.3 Further reading",
    "text": "15.3 Further reading\n\nRead more on tibbles",
    "crumbs": [
      "Data Input/Output",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>readr Data I/O</span>"
    ]
  },
  {
    "objectID": "vroomDataIO.html",
    "href": "vroomDataIO.html",
    "title": "16  vroom Data I/O",
    "section": "",
    "text": "16.1 Read delimited file\nvroom is a high-performance delimited data reader and writer with extended functionality.\nImportant arguments:\ndat &lt;- vroom(\"https://archive.ics.uci.edu/ml/machine-learning-databases/00519/heart_failure_clinical_records_dataset.csv\")\n\nRows: 299 Columns: 13\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (13): age, anaemia, creatinine_phosphokinase, diabetes, ejection_fractio...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nvroom returns a tibble.\ndat\n\n# A tibble: 299 × 13\n     age anaemia creatinine_phosphokinase diabetes ejection_fraction\n   &lt;dbl&gt;   &lt;dbl&gt;                    &lt;dbl&gt;    &lt;dbl&gt;             &lt;dbl&gt;\n 1    75       0                      582        0                20\n 2    55       0                     7861        0                38\n 3    65       0                      146        0                20\n 4    50       1                      111        0                20\n 5    65       1                      160        1                20\n 6    90       1                       47        0                40\n 7    75       1                      246        0                15\n 8    60       1                      315        1                60\n 9    65       0                      157        0                65\n10    80       1                      123        0                35\n# ℹ 289 more rows\n# ℹ 8 more variables: high_blood_pressure &lt;dbl&gt;, platelets &lt;dbl&gt;,\n#   serum_creatinine &lt;dbl&gt;, serum_sodium &lt;dbl&gt;, sex &lt;dbl&gt;, smoking &lt;dbl&gt;,\n#   time &lt;dbl&gt;, DEATH_EVENT &lt;dbl&gt;",
    "crumbs": [
      "Data Input/Output",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>vroom Data I/O</span>"
    ]
  },
  {
    "objectID": "vroomDataIO.html#read-delimited-file",
    "href": "vroomDataIO.html#read-delimited-file",
    "title": "16  vroom Data I/O",
    "section": "",
    "text": "delim: Field delimiter. If NULL, will guess by looking at the data.\n\nna: Character vector of strings to interpret as missing values, i.e. NA.",
    "crumbs": [
      "Data Input/Output",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>vroom Data I/O</span>"
    ]
  },
  {
    "objectID": "vroomDataIO.html#select-columns-to-read",
    "href": "vroomDataIO.html#select-columns-to-read",
    "title": "16  vroom Data I/O",
    "section": "\n16.2 Select columns to read",
    "text": "16.2 Select columns to read\n\ndat &lt;- vroom(\n    \"https://archive.ics.uci.edu/ml/machine-learning-databases/00519/heart_failure_clinical_records_dataset.csv\", \n    col_select = c(\"age\", \"anaemia\", \"ejection_fraction\"))\n\nRows: 299 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (3): age, anaemia, ejection_fraction\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ndat\n\n# A tibble: 299 × 3\n     age anaemia ejection_fraction\n   &lt;dbl&gt;   &lt;dbl&gt;             &lt;dbl&gt;\n 1    75       0                20\n 2    55       0                38\n 3    65       0                20\n 4    50       1                20\n 5    65       1                20\n 6    90       1                40\n 7    75       1                15\n 8    60       1                60\n 9    65       0                65\n10    80       1                35\n# ℹ 289 more rows",
    "crumbs": [
      "Data Input/Output",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>vroom Data I/O</span>"
    ]
  },
  {
    "objectID": "vroomDataIO.html#resources",
    "href": "vroomDataIO.html#resources",
    "title": "16  vroom Data I/O",
    "section": "\n16.3 Resources",
    "text": "16.3 Resources\nRead more about vroom here.",
    "crumbs": [
      "Data Input/Output",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>vroom Data I/O</span>"
    ]
  },
  {
    "objectID": "Vectorization.html",
    "href": "Vectorization.html",
    "title": "17  Vectorized Operations",
    "section": "",
    "text": "17.1 Operations between vectors of equal length\nMany built-in R functions are vectorized and so are many functions from external packages as well.\nVectorization is very efficient: it can save both human (your) time and machine time.\nSuch operations are applied between corresponding elements of each vector:\nx &lt;- 1:10\nz &lt;- 11:20\nx + z\n\n [1] 12 14 16 18 20 22 24 26 28 30\ni.e. the above is equal to c(x[1] + z[1], x[2] + z[2], ..., x[n] + z[n]).\nWeight &lt;- rnorm(20, mean = 80, sd = 1.7)\nWeight\n\n [1] 79.27580 77.07372 80.00327 79.47291 81.42009 79.92871 77.84448 78.29229\n [9] 78.71447 78.20023 79.53383 79.57139 80.67948 82.17516 78.79052 77.29051\n[17] 81.08844 81.29285 81.42259 77.60911\n\nHeight &lt;- rnorm(20, mean = 1.7, sd = 0.1)\nHeight\n\n [1] 1.628971 1.658772 1.674722 1.693329 1.756331 1.699521 1.755047 1.509184\n [9] 1.614873 1.624307 1.775038 1.745995 1.743432 1.761433 1.729579 1.750039\n[17] 1.636869 1.642027 1.630898 1.716704\n\nBMI &lt;- Weight/Height^2\nBMI\n\n [1] 29.87542 28.01127 28.52479 27.71636 26.39482 27.67259 25.27263 34.37438\n [9] 30.18408 29.63957 25.24275 26.10182 26.54319 26.48552 26.33862 25.23658\n[17] 30.26435 30.15032 30.61196 26.33429",
    "crumbs": [
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Vectorized Operations</span>"
    ]
  },
  {
    "objectID": "Vectorization.html#operations-between-a-vector-and-a-scalar",
    "href": "Vectorization.html#operations-between-a-vector-and-a-scalar",
    "title": "17  Vectorized Operations",
    "section": "\n17.2 Operations between a vector and a scalar",
    "text": "17.2 Operations between a vector and a scalar\nIn this cases, the scalar is repeated to match the length of the vector, i.e. it is recycled:\n\nx + 10\n\n [1] 11 12 13 14 15 16 17 18 19 20\n\nx * 2\n\n [1]  2  4  6  8 10 12 14 16 18 20\n\nx / 10\n\n [1] 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0\n\nx ^ 2\n\n [1]   1   4   9  16  25  36  49  64  81 100",
    "crumbs": [
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Vectorized Operations</span>"
    ]
  },
  {
    "objectID": "Vectorization.html#operations-between-vectors-of-unequal-length-value-recycling",
    "href": "Vectorization.html#operations-between-vectors-of-unequal-length-value-recycling",
    "title": "17  Vectorized Operations",
    "section": "\n17.3 Operations between vectors of unequal length: value recycling\n",
    "text": "17.3 Operations between vectors of unequal length: value recycling\n\nOperations between a vector and a scalar are a special case of operations between vectors of unequal length. Whenever you perform an operation between two objects of different length, the shorter object’s elements are recycled:\n\nx + c(2:1)\n\n [1]  3  3  5  5  7  7  9  9 11 11\n\n\n\n\n\n\n\n\nCaution\n\n\n\nOperations between objects of unequal length can occur by mistake. If the shorter object’s length is a multiple of the longer object’s length, there will be no error or warning, as above. Otherwise, there is a warning (which may be confusing at first) BUT recycling still happens and is highly unlikely to be intentional.\n\n\n\nx + c(1, 3, 9)\n\nWarning in x + c(1, 3, 9): longer object length is not a multiple of shorter\nobject length\n\n\n [1]  2  5 12  5  8 15  8 11 18 11",
    "crumbs": [
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Vectorized Operations</span>"
    ]
  },
  {
    "objectID": "Vectorization.html#vectorized-matrix-operations",
    "href": "Vectorization.html#vectorized-matrix-operations",
    "title": "17  Vectorized Operations",
    "section": "\n17.4 Vectorized matrix operations",
    "text": "17.4 Vectorized matrix operations\nOperations between matrices are similarly vectorized, i.e. performed between corresponding elements:\n\na &lt;- matrix(1:4, nrow = 2)\nb &lt;- matrix(11:14, nrow = 2)\na\n\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n\nb\n\n     [,1] [,2]\n[1,]   11   13\n[2,]   12   14\n\na + b\n\n     [,1] [,2]\n[1,]   12   16\n[2,]   14   18\n\na * b\n\n     [,1] [,2]\n[1,]   11   39\n[2,]   24   56\n\na / b\n\n           [,1]      [,2]\n[1,] 0.09090909 0.2307692\n[2,] 0.16666667 0.2857143",
    "crumbs": [
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Vectorized Operations</span>"
    ]
  },
  {
    "objectID": "Vectorization.html#vectorized-functions",
    "href": "Vectorization.html#vectorized-functions",
    "title": "17  Vectorized Operations",
    "section": "\n17.5 Vectorized functions",
    "text": "17.5 Vectorized functions\nSome examples of common mathematical operations that are vectorized:\n\nlog(x)\n\n [1] 0.0000000 0.6931472 1.0986123 1.3862944 1.6094379 1.7917595 1.9459101\n [8] 2.0794415 2.1972246 2.3025851\n\nsqrt(x)\n\n [1] 1.000000 1.414214 1.732051 2.000000 2.236068 2.449490 2.645751 2.828427\n [9] 3.000000 3.162278\n\nsin(x)\n\n [1]  0.8414710  0.9092974  0.1411200 -0.7568025 -0.9589243 -0.2794155\n [7]  0.6569866  0.9893582  0.4121185 -0.5440211\n\ncos(x)\n\n [1]  0.5403023 -0.4161468 -0.9899925 -0.6536436  0.2836622  0.9601703\n [7]  0.7539023 -0.1455000 -0.9111303 -0.8390715",
    "crumbs": [
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Vectorized Operations</span>"
    ]
  },
  {
    "objectID": "ControlFlow.html",
    "href": "ControlFlow.html",
    "title": "18  Control Flow",
    "section": "",
    "text": "18.1 Conditionals\nCode is often executed non-linearly (i.e. not line-by-line). Control flow (or flow of control) operations define the order in which code segments are executed.  Execution is often conditional (using if - else or switch()).  Segments of code may be repeated a defined number of times (for-loop) or as long as certain conditions are met (while-loop). Any loop can be cut short if needed.  Control flow operations form some of the fundamental building blocks of programs. Each operation is very simple - combine enough of them and you can build up to arbitrary complexity.",
    "crumbs": [
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Control Flow</span>"
    ]
  },
  {
    "objectID": "ControlFlow.html#conditionals",
    "href": "ControlFlow.html#conditionals",
    "title": "18  Control Flow",
    "section": "",
    "text": "18.1.1 if - else\n\nConsider a systolic blood pressure measurement:\n\nSBP &lt;- 146 # mmHg\nif (SBP &lt;= 120) {\n  cat(\"SBP is normal\")\n} else {\n  cat(\"SBP is high\")\n}\n\nSBP is high\n\n\n\n18.1.2 if - else if - else\n\nConsider a single blood sodium result\n\nNa &lt;- 142 # mEq/L\nNa\n\n[1] 142\n\nif (Na &gt; 145) {\n  result &lt;- \"Hypernatremia\"\n} else if (Na &lt; 135) {\n  result &lt;- \"Hyponatremia\"\n} else {\n  result &lt;- \"Normal\"\n}\nresult\n\n[1] \"Normal\"\n\n\n\n18.1.3 Conditional assignment with if - else\n\nYou can directly assign the output of an if statement to an object.\n\nNa &lt;- 142 # mEq/L\nresult &lt;- if (Na &gt; 145) {\n  \"Hypernatremia\"\n} else if (Na &lt; 135) {\n  \"Hyponatremia\"\n} else {\n  \"Normal\"\n}\n\n\n18.1.4 Conditional assignment with ifelse()\n\nifelse() is vectorized and can be a great, compact method of conditional assignment.\nConsider a vector of blood bilirubin levels:\n\nconjBil &lt;- sample(runif(100, min = 0, max = 0.5), size = 20)\nconjBil\n\n [1] 0.2036966 0.1424590 0.3737957 0.2863451 0.4854572 0.2377842 0.4321054\n [8] 0.1965843 0.3863984 0.4469768 0.1191254 0.2951860 0.1062061 0.3220131\n[15] 0.2723623 0.3367104 0.2804635 0.3797272 0.2835055 0.4595988\n\n\n\nconjBil_bin &lt;- ifelse(conjBil &gt; 0.3, \"Hyperbilirubinemia\", \"Normal\")\nconjBil_bin\n\n [1] \"Normal\"             \"Normal\"             \"Hyperbilirubinemia\"\n [4] \"Normal\"             \"Hyperbilirubinemia\" \"Normal\"            \n [7] \"Hyperbilirubinemia\" \"Normal\"             \"Hyperbilirubinemia\"\n[10] \"Hyperbilirubinemia\" \"Normal\"             \"Normal\"            \n[13] \"Normal\"             \"Hyperbilirubinemia\" \"Normal\"            \n[16] \"Hyperbilirubinemia\" \"Normal\"             \"Hyperbilirubinemia\"\n[19] \"Normal\"             \"Hyperbilirubinemia\"\n\n\nThe values assigned to the “yes” and “no” conditions can be a vector of the same length as the first argument.\nConsider an arbitrary numeric example:\n\na &lt;- 1:10\ny &lt;- ifelse(a &gt; 5, 11:20, 21:30)\ny\n\n [1] 21 22 23 24 25 16 17 18 19 20\n\n\nSo what did this do?\nIt is equivalent to an if-else statement within a for-loop:\n\nidl &lt;- a &gt; 5\nyes &lt;- 11:20\nno &lt;- 21:30\nout &lt;- vector(\"numeric\", length = 10)\nfor (i in seq(a)) {\n  if (idl[i]) {\n    out[i] &lt;- yes[i]\n  } else {\n    out[i] &lt;- no[i]\n  }\n}\nout\n\n [1] 21 22 23 24 25 16 17 18 19 20\n\n\ni.e.\n\nCreate a logical index using test\n\nfor each element i in test:\n\nif the element i is TRUE, return yes[i], else no[i]\n\n\n\n\nFor another example, lets take integers 1:11 and square the odd ones and cube the even ones. We use the modulo operation %% to test if each element is odd or even:\n\nx &lt;- 1:11\nxsc &lt;- ifelse(x %% 2 == 0, c(1:11)^3, c(1:11)^2)\nxsc\n\n [1]    1    8    9   64   25  216   49  512   81 1000  121\n\n\n\n18.1.5 Conditional assignment with multiple options using switch()\n\nInstead of using multiple if - else if statements, we can build a more compact call using switch, which is best suited for options that are of type character, rather than numeric.\n\nDepartment &lt;- sample(letters[seq(5)], size = 1)\nDepartment\n\n[1] \"c\"\n\noutput &lt;- switch(Department, # 1. Some expression\n  a = \"Outpatient\",          # 2. The possible values of the expression, unquoted\n  b = \"Emergency\",           #    followed by the `=` and the conditional output\n  c = \"Cardiology\",\n  d = \"Neurology\",\n  e = \"Oncology\",\n  \"Unknown Department\"        # 3. An optional last argument is the default\n                              #    value, if there is no match above\n)\noutput\n\n[1] \"Cardiology\"",
    "crumbs": [
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Control Flow</span>"
    ]
  },
  {
    "objectID": "ControlFlow.html#loops",
    "href": "ControlFlow.html#loops",
    "title": "18  Control Flow",
    "section": "\n18.2 Loops",
    "text": "18.2 Loops\n\n18.2.1 for loops\n\n\n\n\n\n\nTip\n\n\n\nUse for loops to repeat execution of a block of code a certain number of times.\n\n\nThe for loop syntax is for (var in vector) expression.\nThe expression is usually surrounded by curly brackets and can include any number of lines, any amount of code:\n\nfor (i in 1:3) {\n  cat(\"This is item\", i, \"\\n\")\n}\n\nThis is item 1 \nThis is item 2 \nThis is item 3 \n\n\nThe loop executes for length(vector) times.\nAt iteration i, var = vector[i].\nYou will often use the value of var inside the loop - but you don’t have to:\n\nfor (i in seq(10)) {\n  cat(i^2, \"\\n\")\n}\n\n1 \n4 \n9 \n16 \n25 \n36 \n49 \n64 \n81 \n100 \n\n\nletters is a built-in constant that includes all 26 lowercase letters of the Roman alphabet; LETTERS similarly includes all 26 uppercase letters.\n\nfor (letter in letters[1:5]) {\n  cat(letter, \"is a letter!\\n\")\n}\n\na is a letter!\nb is a letter!\nc is a letter!\nd is a letter!\ne is a letter!\n\n\n\n18.2.1.1 Working on data within a for loop\nA common scenario involves working on a data object, whether a vector, matrix, list, data.frame, and performing an operation on each elements, one at a time. While a lot of these operations are often performed using loop functions instead, for-loops can also be used.\nYou can start by initializing an object of the appropriate class and dimensions to hold the output. Then, each iteration of the for loop will assign its output to the corresponding element/s of this object.\nIn the following example we transform the mtcars built-in dataset’s features to z-scores. The built-in command scale() will do this for quickly and conveniently, this is for demonstration purposes:\nFirst, initialize the output to be the desired class and dimensions:\n\nclass(mtcars)\n\n[1] \"data.frame\"\n\ndim(mtcars)\n\n[1] 32 11\n\nmtcars_z &lt;- data.frame(matrix(0, nrow = 32, ncol = 11))\ncolnames(mtcars_z) &lt;- colnames(mtcars)\n\nor, it is simpler to just make a copy of mtcars to be overwritten by the for loop later:\n\nmtcars_z &lt;- mtcars\n\nStandardization involves subtracting the mean and dividing by the standard deviation.\nHere is the for loop - we iterate through each column and assign the transformed data:\n\nfor (i in 1:ncol(mtcars)) {\n  mtcars_z[, i] &lt;- (mtcars[, i] - mean(mtcars[, i])) / sd(mtcars[, i])\n}\n\nLet’s compare to the output of the scale() command by print the first 3 rows and columns of each:\n\nmtcars_z2 &lt;- as.data.frame(scale(mtcars))\nmtcars_z[1:3, 1:3]\n\n                    mpg        cyl       disp\nMazda RX4     0.1508848 -0.1049878 -0.5706198\nMazda RX4 Wag 0.1508848 -0.1049878 -0.5706198\nDatsun 710    0.4495434 -1.2248578 -0.9901821\n\nmtcars_z2[1:3, 1:3]\n\n                    mpg        cyl       disp\nMazda RX4     0.1508848 -0.1049878 -0.5706198\nMazda RX4 Wag 0.1508848 -0.1049878 -0.5706198\nDatsun 710    0.4495434 -1.2248578 -0.9901821\n\n\nNote that we wrapped scale() around as.data.frame() because it outputs a matrix.\n\nall.equal(mtcars_z, mtcars_z2)\n\n[1] TRUE\n\n\n\n18.2.1.2 Nested for loops\n\na &lt;- matrix(1:9, nrow = 3)\nfor (i in seq(3)) {\n  for (j in seq(3)) {\n    cat(\"  a[\", i, \",\", j, \"] is \", a[i, j], \"\\n\", sep = \"\")\n  }\n}\n\n  a[1,1] is 1\n  a[1,2] is 4\n  a[1,3] is 7\n  a[2,1] is 2\n  a[2,2] is 5\n  a[2,3] is 8\n  a[3,1] is 3\n  a[3,2] is 6\n  a[3,3] is 9\n\n\n\n18.2.1.3 Printing within a for loop\nIn the R console objects get printed just by typing their name:\n\na &lt;- 4\na\n\n[1] 4\n\n# same as\nprint(a)\n\n[1] 4\n\n\nThis “automatic printing” does not happen within a for loop, so you simply use print() (or cat() as preferred):\nThe following loop does not print out anything:\n\na &lt;- 0\nfor (i in 1:4) {\n  a &lt;- a + i^2\n  a\n}\n\nbut this does:\n\na &lt;- 0\nfor (i in 1:4) {\n  a &lt;- a + i^2\n  print(a)\n}\n\n[1] 1\n[1] 5\n[1] 14\n[1] 30\n\n\n\n18.2.2 while loops\n\na &lt;- 10\nwhile (a &gt; 0) {\n  a &lt;- a - 1\n  cat(\"a is equal to\", a, \"\\n\")\n}\n\na is equal to 9 \na is equal to 8 \na is equal to 7 \na is equal to 6 \na is equal to 5 \na is equal to 4 \na is equal to 3 \na is equal to 2 \na is equal to 1 \na is equal to 0 \n\ncat(\"when all is said and done, a is\", a)\n\nwhen all is said and done, a is 0\n\n\n\n18.2.3 break stops execution of a loop:\n\nfor (i in seq(10)) {\n  if (i == 5) break\n  cat(i, \"squared is\", i^2, \"\\n\")\n}\n\n1 squared is 1 \n2 squared is 4 \n3 squared is 9 \n4 squared is 16 \n\n\n\n18.2.4 next skips the current iteration:\n\nfor (i in seq(7)) {\n  if (i == 5) next\n  cat(i, \"squared is\", i^2, \"\\n\")\n}\n\n1 squared is 1 \n2 squared is 4 \n3 squared is 9 \n4 squared is 16 \n6 squared is 36 \n7 squared is 49 \n\n\n\n18.2.5 repeat loops\nA repeat block initiates an infinite loop and you must use break to exit. They are less commonly used.\n\ni &lt;- 10\nrepeat {\n  i &lt;- i - 1\n  if (i == 0) break\n  cat(\"i is\", i, \"\\n\")\n}\n\ni is 9 \ni is 8 \ni is 7 \ni is 6 \ni is 5 \ni is 4 \ni is 3 \ni is 2 \ni is 1 \n\n\n\n\n\n\n\n\nNote\n\n\n\nAny number of control flow operations can be combined and nested as needed.",
    "crumbs": [
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Control Flow</span>"
    ]
  },
  {
    "objectID": "Summarize.html",
    "href": "Summarize.html",
    "title": "19  Summarizing Data",
    "section": "",
    "text": "19.1 Get summary of an R object with summary()\nLet’s read in a dataset on heart disease from OpenML:\nOne of the first things you might want to know is the size of the dataset:\nSince it does not contain too many columns, you can use str() to get the type of each and a preview of some of the data:\nYou might want to take a look at the first few rows (defaults to 6):\nThere is the equivalent tail() to print the last few rows:\nR includes a summary() method for a number of different objects, including (of course) data.frames:\nsummary(heart)\n\n      age            sex            chest_pain     trestbps          chol      \n Min.   :28.00   female: 81   asympt     :123   Min.   : 92.0   Min.   : 85.0  \n 1st Qu.:42.00   male  :213   atyp_angina:106   1st Qu.:120.0   1st Qu.:209.0  \n Median :49.00                non_anginal: 54   Median :130.0   Median :243.0  \n Mean   :47.83                typ_angina : 11   Mean   :132.6   Mean   :250.8  \n 3rd Qu.:54.00                                  3rd Qu.:140.0   3rd Qu.:282.5  \n Max.   :66.00                                  Max.   :200.0   Max.   :603.0  \n                                                NA's   :1       NA's   :23     \n   fbs                       restecg       thalach       exang    \n f   :266   left_vent_hyper      :  6   Min.   : 82.0   no  :204  \n t   : 20   normal               :235   1st Qu.:122.0   yes : 89  \n NA's:  8   st_t_wave_abnormality: 52   Median :140.0   NA's:  1  \n            NA's                 :  1   Mean   :139.1             \n                                        3rd Qu.:155.0             \n                                        Max.   :190.0             \n                                        NA's   :1                 \n    oldpeak        slope           ca                     thal    \n Min.   :0.0000   down:  1   Min.   :0     fixed_defect     : 10  \n 1st Qu.:0.0000   flat: 91   1st Qu.:0     normal           :  7  \n Median :0.0000   up  : 12   Median :0     reversable_defect: 11  \n Mean   :0.5861   NA's:190   Mean   :0     NA's             :266  \n 3rd Qu.:1.0000              3rd Qu.:0                            \n Max.   :5.0000              Max.   :0                            \n                             NA's   :291                          \n      num     \n '&lt;50'  :188  \n '&gt;50_1':106",
    "crumbs": [
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Summarizing Data</span>"
    ]
  },
  {
    "objectID": "Summarize.html#fast-builtin-column-and-row-operations",
    "href": "Summarize.html#fast-builtin-column-and-row-operations",
    "title": "19  Summarizing Data",
    "section": "\n19.2 Fast builtin column and row operations",
    "text": "19.2 Fast builtin column and row operations\nR has optimized builtin functions for some very common row and columns operations, with self-explanatory names that can be applied to matrices and data.frames:\n\n\ncolSums(): column sums\n\nrowSums(): row sums\n\ncolMeans(): column means\n\nrowMeans(): row means\n\n\na &lt;- data.frame(matrix(1:20, nrow = 5))\na\n\n  X1 X2 X3 X4\n1  1  6 11 16\n2  2  7 12 17\n3  3  8 13 18\n4  4  9 14 19\n5  5 10 15 20\n\n\n\ncolSums(a)\n\n[1] 15 40 65 90\n\n\n\nrowSums(a)\n\n[1] 34 38 42 46 50\n\n\n\ncolMeans(a)\n\n[1]  3  8 13 18\n\n\n\nrowMeans(a)\n\n[1]  8.5  9.5 10.5 11.5 12.5",
    "crumbs": [
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Summarizing Data</span>"
    ]
  },
  {
    "objectID": "Summarize.html#see-also",
    "href": "Summarize.html#see-also",
    "title": "19  Summarizing Data",
    "section": "\n19.3 See also",
    "text": "19.3 See also\n\n\naggregate() for grouped summary statistics.\n\nLoop Functions for applying any function on subsets of data.",
    "crumbs": [
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Summarizing Data</span>"
    ]
  },
  {
    "objectID": "Aggregate.html",
    "href": "Aggregate.html",
    "title": "20  Aggregate",
    "section": "",
    "text": "20.1 Single variable by single grouping\nR includes a number of commands to apply functions on splits of your data. aggregate() is a powerful tools to perform such “group-by” operations.  The function accepts either:\nWe shall see how to perform each operation below with each approach.  The formula interface might be easier to work with interactively on the console. Note that while you can programmatically create a formula, it is easier to use vector inputs when calling aggregate() programmatically.  For this example, we shall use the penguin data from the palmerpenguins package:\nNote that the formula method defaults to na.action = na.omit\nUsing the formula interface:\naggregate(bill_length_mm ~ species,\n          data = penguins,\n          mean, na.rm = TRUE)\n\n    species bill_length_mm\n1    Adelie       38.79139\n2 Chinstrap       48.83382\n3    Gentoo       47.50488\nUsing R objects directly:\naggregate(penguins$bill_length_mm,\n          by = list(penguins$species),\n          mean, na.rm = TRUE)\n\n    Group.1        x\n1    Adelie 38.79139\n2 Chinstrap 48.83382\n3    Gentoo 47.50488\nNote that, unlike the formula notation, if your input is a vector which is unnamed, the output columns are also unnamed.\nIf instead of passing a vector, you pass a data.frame or list with one or more named elements, the output includes the names:\naggregate(penguins[\"bill_length_mm\"],\n          by = penguins[\"species\"],\n          mean, na.rm = TRUE)\n\n    species bill_length_mm\n1    Adelie       38.79139\n2 Chinstrap       48.83382\n3    Gentoo       47.50488\nBy creating a list instead of indexing the given data.frame also allows you to set custom names:\naggregate(list(`Bill length` = penguins$bill_length_mm),\n          by = list(Species = penguins$species),\n          mean, na.rm = TRUE)\n\n    Species Bill.length\n1    Adelie    38.79139\n2 Chinstrap    48.83382\n3    Gentoo    47.50488",
    "crumbs": [
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Aggregate</span>"
    ]
  },
  {
    "objectID": "Aggregate.html#multiple-variables-by-single-grouping",
    "href": "Aggregate.html#multiple-variables-by-single-grouping",
    "title": "20  Aggregate",
    "section": "\n20.2 Multiple variables by single grouping",
    "text": "20.2 Multiple variables by single grouping\nFormula notation:\n\naggregate(cbind(bill_length_mm, flipper_length_mm) ~ species,\n          data = penguins,\n          mean)\n\n    species bill_length_mm flipper_length_mm\n1    Adelie       38.79139          189.9536\n2 Chinstrap       48.83382          195.8235\n3    Gentoo       47.50488          217.1870\n\n\nObjects:\n\naggregate(penguins[, c(\"bill_length_mm\", \"flipper_length_mm\")],\n          by = list(Species = penguins$species),\n          mean, na.rm = TRUE)\n\n    Species bill_length_mm flipper_length_mm\n1    Adelie       38.79139          189.9536\n2 Chinstrap       48.83382          195.8235\n3    Gentoo       47.50488          217.1870",
    "crumbs": [
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Aggregate</span>"
    ]
  },
  {
    "objectID": "Aggregate.html#single-variable-by-multiple-groups",
    "href": "Aggregate.html#single-variable-by-multiple-groups",
    "title": "20  Aggregate",
    "section": "\n20.3 Single variable by multiple groups",
    "text": "20.3 Single variable by multiple groups\nFormula notation:\n\naggregate(bill_length_mm ~ species + island, data = penguins, mean)\n\n    species    island bill_length_mm\n1    Adelie    Biscoe       38.97500\n2    Gentoo    Biscoe       47.50488\n3    Adelie     Dream       38.50179\n4 Chinstrap     Dream       48.83382\n5    Adelie Torgersen       38.95098\n\n\nObjects:\n\naggregate(penguins[\"bill_length_mm\"],\n          by = list(Species = penguins$species, \n                    Island = penguins$island),\n          mean, na.rm = TRUE)\n\n    Species    Island bill_length_mm\n1    Adelie    Biscoe       38.97500\n2    Gentoo    Biscoe       47.50488\n3    Adelie     Dream       38.50179\n4 Chinstrap     Dream       48.83382\n5    Adelie Torgersen       38.95098",
    "crumbs": [
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Aggregate</span>"
    ]
  },
  {
    "objectID": "Aggregate.html#multiple-variables-by-multiple-groupings",
    "href": "Aggregate.html#multiple-variables-by-multiple-groupings",
    "title": "20  Aggregate",
    "section": "\n20.4 Multiple variables by multiple groupings",
    "text": "20.4 Multiple variables by multiple groupings\nFormula notation:\n\naggregate(cbind(bill_length_mm, flipper_length_mm) ~ species + island,\n          data = penguins, mean)\n\n    species    island bill_length_mm flipper_length_mm\n1    Adelie    Biscoe       38.97500          188.7955\n2    Gentoo    Biscoe       47.50488          217.1870\n3    Adelie     Dream       38.50179          189.7321\n4 Chinstrap     Dream       48.83382          195.8235\n5    Adelie Torgersen       38.95098          191.1961\n\n\nObjects:\n\naggregate(penguins[, c(\"bill_length_mm\", \"flipper_length_mm\")],\n          by = list(Species = penguins$species, \n                    Island = penguins$island),\n          mean, na.rm = TRUE)\n\n    Species    Island bill_length_mm flipper_length_mm\n1    Adelie    Biscoe       38.97500          188.7955\n2    Gentoo    Biscoe       47.50488          217.1870\n3    Adelie     Dream       38.50179          189.7321\n4 Chinstrap     Dream       48.83382          195.8235\n5    Adelie Torgersen       38.95098          191.1961",
    "crumbs": [
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Aggregate</span>"
    ]
  },
  {
    "objectID": "Aggregate.html#using-with",
    "href": "Aggregate.html#using-with",
    "title": "20  Aggregate",
    "section": "\n20.5 Using with()\n",
    "text": "20.5 Using with()\n\nR’s with() allows you to use expression of the form with(data, expression). data can be a data.frame, list, or environment, and within the expression you can refer to any elements of data directly by their name.\nFor example, with(df, expression) means you can use the data.frame’s column names directly within the expression without the need to use df[[\"column_name\"]] or df$column_name:\n\nwith(penguins,\n     aggregate(list(`Bill length` = bill_length_mm),\n               by = list(Species = species),\n               mean, na.rm = TRUE))\n\n    Species Bill.length\n1    Adelie    38.79139\n2 Chinstrap    48.83382\n3    Gentoo    47.50488",
    "crumbs": [
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Aggregate</span>"
    ]
  },
  {
    "objectID": "Aggregate.html#see-also",
    "href": "Aggregate.html#see-also",
    "title": "20  Aggregate",
    "section": "\n20.6 See also",
    "text": "20.6 See also\n\n\ntapply() for an alternative methods of applying function on subsets of a single variable (probably faster).\nFor large datasets, it is recommended to use data.table for fast group-by data summarization.",
    "crumbs": [
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Aggregate</span>"
    ]
  },
  {
    "objectID": "Functions.html",
    "href": "Functions.html",
    "title": "Functions",
    "section": "",
    "text": "Contents:\n\nWriting functions\nScoping of functions\nPipes",
    "crumbs": [
      "Functions"
    ]
  },
  {
    "objectID": "WritingFunctions.html",
    "href": "WritingFunctions.html",
    "title": "21  Writing Functions",
    "section": "",
    "text": "21.1 Simple functions\nWriting functions is a core part of programming.\nWhen should you write a function?\n-&gt; Whenever you find yourself repeating pieces of code.\nWhy is it important?\n-&gt; Writing functions helps reduce the total amount of code, which increases efficiency, reduces the chances of error, and can make code more readable.\nFunctions in R are “first-class objects”.\nThis means they can be stored inside other objects (e.g. a list), they can be passed as arguments to other functions (as we see in Chapter 24) and can be returned as output from functions.  Functions in R are for the most part like mathematical functions: they have one or more inputs and one output. The inputs are known as the function arguments. If you want to return multiple outputs, you can return a list containing any number of R objects.  Functions are referred to as “closures” in R. A closure is made of a function and its environment. Closures are distinct from primitive functions (i.e. internally implemented / built-in functions, which are written in C).\nLet’s start with a very simple function: single argument with no default value:\nDefine the function:\nsquare &lt;- function(x) {\n  x^2\n}\nTry our new function:\nsquare(4)\n\n[1] 16\nNotice above that x^2 is automatically returned by the function. It is the same as explicitly returning it with return():\nsquare &lt;- function(x) {\n  return(x^2)\n}\n\nsquare(4)\n\n[1] 16\nalso same:\nsquare &lt;- function(x) {\n  out &lt;- x^2\n  return(out)\n}\n\nsquare(4)\n\n[1] 16\nstill same:\nsquare &lt;- function(x) {\n  out &lt;- x^2\n  out\n}\n\nsquare(5)\n\n[1] 25\nA function returns either:\nMultiple arguments, with and without defaults:\nraise &lt;- function(x, power = 2) {\n  x^power\n}\n\nx &lt;- sample(10, size = 1)\nx\n\n[1] 10\n\nraise(x)\n\n[1] 100\n\nraise(x, power = 3)\n\n[1] 1000\n\nraise(x, 3)\n\n[1] 1000\nIn the following example, return() is used to exit the function early if no negative values are found. This is shown only as a trivial example; it is not particularly useful in this case, but can be useful in more complex functions.\npreproc &lt;- function(x) {\n  if (all(x &gt;= 0)) {\n    return(x) \n  } else {\n    cat(\"Negative values found, returning absolute \\n\")\n    return(abs(x))\n  }\n}\nThe following stops early and no message is printed:\npreproc(0:10)\n\n [1]  0  1  2  3  4  5  6  7  8  9 10\nThe following does not stop early and message is printed:\npreproc(-5:5)\n\nNegative values found, returning absolute \n\n\n [1] 5 4 3 2 1 0 1 2 3 4 5",
    "crumbs": [
      "Functions",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Writing Functions</span>"
    ]
  },
  {
    "objectID": "WritingFunctions.html#simple-functions",
    "href": "WritingFunctions.html#simple-functions",
    "title": "21  Writing Functions",
    "section": "",
    "text": "the value of the last expression within the function definition such as out or x^2 above.\nan object passed to return().\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nreturn() can be used to exit a function early",
    "crumbs": [
      "Functions",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Writing Functions</span>"
    ]
  },
  {
    "objectID": "WritingFunctions.html#argument-matching",
    "href": "WritingFunctions.html#argument-matching",
    "title": "21  Writing Functions",
    "section": "\n21.2 Argument matching",
    "text": "21.2 Argument matching\nR will match unambiguous abbreviations of arguments:\n\nfn &lt;- function(alpha = 2, beta = 3, gamma = 4) {\n  alpha * beta + gamma\n}\nfn(g = 2)\n\n[1] 8",
    "crumbs": [
      "Functions",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Writing Functions</span>"
    ]
  },
  {
    "objectID": "WritingFunctions.html#arguments-with-prescribed-set-of-allowed-values",
    "href": "WritingFunctions.html#arguments-with-prescribed-set-of-allowed-values",
    "title": "21  Writing Functions",
    "section": "\n21.3 Arguments with prescribed set of allowed values",
    "text": "21.3 Arguments with prescribed set of allowed values\nYou can match specific values for an argument using match.arg():\n\nmyfn &lt;- function(type = c(\"alpha\", \"beta\", \"gamma\")) {\n  type &lt;- match.arg(type)\n  cat(\"You have selected type '\", type, \"'\\n\", sep = \"\")\n}\n\nmyfn(\"a\")\n\nYou have selected type 'alpha'\n\nmyfn(\"b\")\n\nYou have selected type 'beta'\n\nmyfn(\"g\")\n\nYou have selected type 'gamma'\n\nmyfn(\"d\")\n\nError in match.arg(type): 'arg' should be one of \"alpha\", \"beta\", \"gamma\"\n\n\nAbove you see that partial matching using match.arg() was able to identify a valid option, and when there was no match, an informative error was printed.\nPartial matching is also automatically done on the argument names themselves, but it’s important to avoid depending on that.\n\nadsr &lt;- function(attack = 100,\n                 decay = 250,\n                 sustain = 40,\n                 release = 1000) {\n  cat(\"Attack time:\", attack, \"ms\\n\",\n      \"Decay time:\", decay, \"ms\\n\",\n      \"Sustain level:\", sustain, \"\\n\",\n      \"Release time:\", release, \"ms\\n\")\n}\n\nadsr(50, s = 100, r = 500)\n\nAttack time: 50 ms\n Decay time: 250 ms\n Sustain level: 100 \n Release time: 500 ms",
    "crumbs": [
      "Functions",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Writing Functions</span>"
    ]
  },
  {
    "objectID": "WritingFunctions.html#passing-extra-arguments-to-another-function-with-the-...-argument",
    "href": "WritingFunctions.html#passing-extra-arguments-to-another-function-with-the-...-argument",
    "title": "21  Writing Functions",
    "section": "\n21.4 Passing extra arguments to another function with the ... argument",
    "text": "21.4 Passing extra arguments to another function with the ... argument\nMany functions include a ... argument at the end. Any arguments not otherwise matched are collected there. A common use for this is to pass them to another function:\n\ncplot &lt;- function(x, y,\n                  cex = 1.5,\n                  pch = 16,\n                  col = \"#18A3AC\",\n                  bty = \"n\", ...) {\n\n  plot(x, y, \n       cex = cex, \n       pch = pch, \n       col = col, \n       bty = bty, ...)\n\n}\n\n... is also used for variable number of inputs, often as the first argument of a function. For example, look at the documentation of c(), cat(), cbind(), paste().\n\n\n\n\n\n\nNote\n\n\n\nAny arguments after the ..., must be named fully, i.e. will not be partially matched.",
    "crumbs": [
      "Functions",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Writing Functions</span>"
    ]
  },
  {
    "objectID": "WritingFunctions.html#return-multiple-objects",
    "href": "WritingFunctions.html#return-multiple-objects",
    "title": "21  Writing Functions",
    "section": "\n21.5 Return multiple objects",
    "text": "21.5 Return multiple objects\nR function can only return a single object. This is not much of a problem because you can simply put any collection of objects into a list and return it:\n\nlfn &lt;- function(x, fn = square) {\n  xfn &lt;- fn(x)\n  \n  list(x = x,\n       xfn = xfn,\n       fn = fn)\n}\n\nlfn(3)\n\n$x\n[1] 3\n\n$xfn\n[1] 9\n\n$fn\nfunction(x) {\n  out &lt;- x^2\n  out\n}\n&lt;bytecode: 0x10df82e38&gt;",
    "crumbs": [
      "Functions",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Writing Functions</span>"
    ]
  },
  {
    "objectID": "WritingFunctions.html#warnings-and-errors",
    "href": "WritingFunctions.html#warnings-and-errors",
    "title": "21  Writing Functions",
    "section": "\n21.6 Warnings and errors",
    "text": "21.6 Warnings and errors\nYou can use warning(\"some warning message\") at any point inside a function to produce a warning message during execution. The message gets printed to the R console, but function execution is not stopped.\nOn the other hand, you can use stop(\"some error message\") to print an error message to console and stop function execution.\nThe following function (el10) calculates: \\[ e^{log_{10}(x)} \\]\n\nel10 &lt;- function(x) {\n  exp(log10(x))\n}\n\nwhich is not defined for negative x. In this case, we could let R give a warning when it tries to compute log10(x):\n\nval1 &lt;- el10(-3)\n\nWe could instead produce our own warning message:\n\nel10 &lt;- function(x) {\n  if (x &lt; 0) warning(\"x must be positive\")\n  exp(log10(x))\n}\nval2 &lt;- el10(-3)\nval2\n\n[1] NaN\n\n\nAs you see, the output (NaN) still gets returned.\nAlternatively, we can use stop() to end function execution:\n\nel10 &lt;- function(x) {\n  if (x &lt; 0) stop(\"x must be positive\")\n  exp(log10(x))\n}\nval3 &lt;- el10(-3)\n\nError in el10(-3): x must be positive\n\n\nNote how, in this case, function evaluation is stopped and no value is returned.",
    "crumbs": [
      "Functions",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Writing Functions</span>"
    ]
  },
  {
    "objectID": "WritingFunctions.html#documenting-functions",
    "href": "WritingFunctions.html#documenting-functions",
    "title": "21  Writing Functions",
    "section": "\n21.7 Documenting Functions",
    "text": "21.7 Documenting Functions\nIt is essential to document every function you write, especially if you plan to share it with. The roxygen2 allows you to write special inline comments that can generate complete documentation for your functions. Visit the link to read its documentation.\n\n\n\n\n\n\nTip\n\n\n\nMake it a habit to document your functions as you write them. As you write more & more complex functions, it becomes harder and more time-consuming to document them later. After all, a function with incomplete or no documentation is of little use.",
    "crumbs": [
      "Functions",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Writing Functions</span>"
    ]
  },
  {
    "objectID": "Scoping.html",
    "href": "Scoping.html",
    "title": "22  Function Scoping",
    "section": "",
    "text": "22.1 Function vs. for-loop\nFunctions exist in their own environment. This means that variables defined within a function are not available outside of it. This is known as “lexical scoping”.\nHowever, if a variable is referenced within a function but no local definition exists, the interpreter will look for the variable at the parent environment. It is best to ensure all objects needed within a function are specified as arguments and passed appropriately when the function is called.\nIn the following example, x is only defined outside the function definition, but referenced within it.\nLet’s z-score the built-in mtcars dataset once with a for loop and once with a custom function. This links back to the example seen earlier in the for loop section. In practice, this would be performed with the scale() command.\nWithin the for loop, we are assigning columns directly to the object initialized before the loop. In the following example, we use print(environment()) to print the environment outside and inside the loop function to show that it is the same. This is purely for demonstration:\n# initialize new object 'mtcars_z'\nmtcars_z &lt;- mtcars\n{\n  cat(\"environment outside for loop is: \")\n  print(environment())\n}\n\nenvironment outside for loop is: &lt;environment: R_GlobalEnv&gt;\nNote: the curly brackets in the above code block are used to force Quarto to print both lines together. You don’t need to do this in a regular R script.\n# z-score one column at a time in a for loop\nfor (i in seq_len(ncol(mtcars))) {\n  mtcars_z[, i] &lt;- (mtcars[, i] - mean(mtcars[, i])) / sd(mtcars[, i])\n  cat(\"environment inside for loop also is: \")\n  print(environment())\n}\n\nenvironment inside for loop also is: &lt;environment: R_GlobalEnv&gt;\nenvironment inside for loop also is: &lt;environment: R_GlobalEnv&gt;\nenvironment inside for loop also is: &lt;environment: R_GlobalEnv&gt;\nenvironment inside for loop also is: &lt;environment: R_GlobalEnv&gt;\nenvironment inside for loop also is: &lt;environment: R_GlobalEnv&gt;\nenvironment inside for loop also is: &lt;environment: R_GlobalEnv&gt;\nenvironment inside for loop also is: &lt;environment: R_GlobalEnv&gt;\nenvironment inside for loop also is: &lt;environment: R_GlobalEnv&gt;\nenvironment inside for loop also is: &lt;environment: R_GlobalEnv&gt;\nenvironment inside for loop also is: &lt;environment: R_GlobalEnv&gt;\nenvironment inside for loop also is: &lt;environment: R_GlobalEnv&gt;\nIn contrast, all operations remain local within a function and the output must be returned:\nztransform &lt;- function(x) {\n  cat(\"environment inside function body is: \")\n  print(environment())\n  z &lt;- as.data.frame(sapply(mtcars, function(i) (i - mean(i))/sd(i)))\n  rownames(z) &lt;- rownames(x)\n  z\n}\nmtcars_z2 &lt;- ztransform(mtcars)\n\nenvironment inside function body is: &lt;environment: 0x107d0d808&gt;\n\ncat(\"environment outside function body is: \")\n\nenvironment outside function body is: \n\nprint(environment())\n\n&lt;environment: R_GlobalEnv&gt;\nNotice how the environment outside and inside the loop function is the same, it is the Global environment, but the environment within the function is different. That is why any objects created or changed within a function must be returned if we want to make them available.",
    "crumbs": [
      "Functions",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>Function Scoping</span>"
    ]
  },
  {
    "objectID": "Pipes.html",
    "href": "Pipes.html",
    "title": "23  Pipes",
    "section": "",
    "text": "23.1 Introduction\nFigure 23.1: Illustration of pipes in R.\nA pipe operator was first introduced to R by the magrittr package with the %&gt;% symbol. Note that a number of other packages that endorse the use of pipes export the pipe operator as well.\nStarting with R version 4.1 (May 2021), a native pipe operator is included with the |&gt; symbol.\nA pipe allows writing f(x) as x |&gt; f() (native pipe) or x %&gt;% f (magrittr).\nNote that the native pipe requires parentheses, but magrittr works with or without them.\nA pipe is often used to:\nSome packages and developers promote its use, others discourage it. You should try and see if/when it suits your needs.\nThe following:\nx &lt;- f1(x)\nx &lt;- f2(x)\nx &lt;- f3(x)\nis equivalent to:\nx &lt;- f3(f2(f1(x)))\nis equivalent to:\nx &lt;- x |&gt; f1() |&gt; f2() |&gt; f3()\niris[, -5] |&gt;\n  split(iris$Species) |&gt;\n  lapply(function(i) sapply(i, mean))\n\n$setosa\nSepal.Length  Sepal.Width Petal.Length  Petal.Width \n       5.006        3.428        1.462        0.246 \n\n$versicolor\nSepal.Length  Sepal.Width Petal.Length  Petal.Width \n       5.936        2.770        4.260        1.326 \n\n$virginica\nSepal.Length  Sepal.Width Petal.Length  Petal.Width \n       6.588        2.974        5.552        2.026\nPipes are used extensively in the tidyverse packages and many other third-party packages.\nYou can learn more about the magrittr pipe operator in the vignette.",
    "crumbs": [
      "Functions",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>Pipes</span>"
    ]
  },
  {
    "objectID": "Pipes.html#introduction",
    "href": "Pipes.html#introduction",
    "title": "23  Pipes",
    "section": "",
    "text": "Note\n\n\n\nIn its basic form, a pipe allows writing: f(x) as x |&gt; f() and, similarly, g(f(x)) as x |&gt; f() |&gt; g().\n\n\n\n\n\n\n\n\n\navoid multiple temporary assignments in a multistep procedure, or\nas an alternative to nesting functions.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nIn RStudio the keyboard shortcut for the pipe operator is Shift-Command-M (MacOS) or Ctrl-Shift-M (Windows).",
    "crumbs": [
      "Functions",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>Pipes</span>"
    ]
  },
  {
    "objectID": "Pipes.html#differences-between-native-pipe-and-magrittr",
    "href": "Pipes.html#differences-between-native-pipe-and-magrittr",
    "title": "23  Pipes",
    "section": "\n23.2 Differences between native pipe and magrittr\n",
    "text": "23.2 Differences between native pipe and magrittr\n\nNative pipe requires parenthesis (()) after function name, magrittr works with or without them. For example,\n\nx &lt;- rnorm(300)\n\n\nx |&gt; mean()\n\n[1] 0.01181341\n\n\nbut this would fail:\n\nx |&gt; mean\n\nwhile either works in magrittr:\n\nlibrary(magrittr)\nx %&gt;% mean()\n\n[1] 0.01181341\n\n\n\nx %&gt;% mean\n\n[1] 0.01181341\n\n\nThe native pipe passes its LHS to the first unnamed argument on the RHS. Alternatively, it can be passed to any named argument using an underscore (“_“) symbol.\nOn the other hand, magrittr allows using a period . to pipe to any position on the RHS. The native pipe workaround is using an anonymous function (can use the new shorter syntax \\(x) instead of function(x)).  Example: Find the position of “r” in the latin alphabet\nHere, we want to pass the LHS to the second argument of grep().\nUsing native pipe, we name the first argument pattern and the LHS is passed to the first unnamed argument, i.e. the second (which is x, the character vector where matches are looked for):\nNative pipe or magrittr: pass to the first unnamed argument:\n\nletters |&gt; grep(pattern = \"r\")\n\n[1] 18\n\n\n\nletters %&gt;% grep(pattern = \"r\")\n\n[1] 18\n\n\nNative pipe: pass to any named argument using an underscore (_) placeholder, but argument must be named:\n\nletters |&gt; grep(\"r\", x = _)\n\n[1] 18\n\n\nmagrittr: pass to any argument using a period (.) placeholder. Argument can be named or not (i.e. positional):\n\nletters %&gt;% grep(\"r\", x = .)\n\n[1] 18\n\n\n\nletters %&gt;% grep(\"r\", .)\n\n[1] 18\n\n\nFor demonstration purposes, here’s how you can achieve the same using the native pipe and an anonymous function.\n\n# positional:\nletters |&gt; {\\(x) grep(\"r\", x)}()\n\n[1] 18\n\n# named:\nletters |&gt; {\\(x) grep(\"r\", x=x)}()\n\n[1] 18",
    "crumbs": [
      "Functions",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>Pipes</span>"
    ]
  },
  {
    "objectID": "Apply.html",
    "href": "Apply.html",
    "title": "24  The Apply Family",
    "section": "",
    "text": "24.1 apply()\nLoop functions are some of the most widely used R functions. They replace longer expressions created with a for loop, for example.\nThey can result in more compact and readable code.\nMARGIN can be an integer vector or character indicating the dimensions over which ‘FUN’ will be applied.\nBy convention, rows come first (just like in indexing), therefore:\nLet’s create an example dataset:\ndat &lt;- data.frame(Age = rnorm(50, mean = 42, sd = 8),\n                  Weight = rnorm(50, mean = 80, sd = 10),\n                  Height = rnorm(50, mean = 1.72, sd = 0.14),\n                  SBP = rnorm(50, mean = 134, sd = 4))\nhead(dat)\n\n       Age   Weight   Height      SBP\n1 33.53517 79.99227 1.437829 138.6748\n2 35.23837 76.06266 1.782321 142.0525\n3 46.03977 86.39338 1.516113 140.9807\n4 51.51741 87.18997 1.583751 137.9623\n5 40.47961 68.31458 1.790967 135.1164\n6 35.91377 78.44711 1.734494 137.1234\nLet’s calculate the mean value of each column:\ndat_column_mean &lt;- apply(dat, MARGIN = 2, FUN = mean) \ndat_column_mean\n\n       Age     Weight     Height        SBP \n 41.355183  80.976511   1.697381 134.461052\nPurely as an example to understand what apply() does, here is the equivalent procedure using a for-loop. You notice how much more code is needed, and why apply() and similar functions might be very convenient for many different tasks.\ndat_column_mean &lt;- numeric(ncol(dat))\nnames(dat_column_mean) &lt;- names(dat)\n\nfor (i in seq(dat)) {\n  dat_column_mean[i] &lt;- mean(dat[, i])\n}\ndat_column_mean\n\n       Age     Weight     Height        SBP \n 41.355183  80.976511   1.697381 134.461052\nLet’s create a different example dataset, where we record weight at multiple timepoints:\ndat2 &lt;- data.frame(ID = seq(8001, 8020),\n                   Weight_week_1 = rnorm(20, mean = 110, sd = 10))\ndat2$Weight_week_3 &lt;- dat2$Weight_week_1 + rnorm(20, mean = -2, sd = 1)\ndat2$Weight_week_5 &lt;- dat2$Weight_week_3 + rnorm(20, mean = -3, sd = 1.1)\ndat2$Weight_week_7 &lt;- dat2$Weight_week_5 + rnorm(20, mean = -1.8, sd = 1.3)\ndat2\n\n     ID Weight_week_1 Weight_week_3 Weight_week_5 Weight_week_7\n1  8001     111.04289     106.95935     102.94787     102.26928\n2  8002     103.47004      99.86460      97.28305      94.69024\n3  8003     107.84784     105.56062     103.45063      99.78788\n4  8004     110.51762     106.99228     103.04543     100.48099\n5  8005      99.40784      97.95236      94.94075      92.40207\n6  8006      84.47913      81.95258      79.39812      76.72131\n7  8007     122.33160     118.92493     115.52585     112.26189\n8  8008     110.39227     109.09013     107.37802     105.08889\n9  8009     120.47485     117.36276     114.55699     112.60647\n10 8010     126.07963     123.21005     119.54050     120.28907\n11 8011     102.07681      98.88423      97.50637      96.38840\n12 8012     105.66671     102.57275     101.96515      99.71209\n13 8013     103.17450     101.36019      96.82128      95.65377\n14 8014     110.04679     108.47441     105.37404     103.83360\n15 8015     107.93642     106.05161     104.30609      99.92998\n16 8016      94.20825      91.72154      88.78518      87.30292\n17 8017     111.65724     109.86404     107.08026     103.46465\n18 8018     125.34182     122.31146     119.47672     116.62459\n19 8019      98.89971      97.72247      93.65328      89.70032\n20 8020     113.11428     110.18300     107.58005     108.57944\nLet’s get the mean weight per week:\napply(dat2[, -1], 2, mean)\n\nWeight_week_1 Weight_week_3 Weight_week_5 Weight_week_7 \n     108.4083      105.8508      103.0308      100.8894\nLet’s get the mean weight per individual across all weeks:\napply(dat2[, -1], 1, mean)\n\n [1] 105.80485  98.82698 104.16174 105.25908  96.17575  80.63779 117.26107\n [8] 107.98732 116.25027 122.27981  98.71396 102.47918  99.25244 106.93221\n[15] 104.55603  90.50447 108.01655 120.93865  94.99395 109.86419\nBecause of the above, see what happens when you use apply on the iris data.frame which contains 4 numeric variables and one factor:\nstr(iris)\n\n'data.frame':   150 obs. of  5 variables:\n $ Sepal.Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...\n $ Sepal.Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...\n $ Petal.Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...\n $ Petal.Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...\n $ Species     : Factor w/ 3 levels \"setosa\",\"versicolor\",..: 1 1 1 1 1 1 1 1 1 1 ...\napply(iris, 2, class)\n\nSepal.Length  Sepal.Width Petal.Length  Petal.Width      Species \n \"character\"  \"character\"  \"character\"  \"character\"  \"character\"",
    "crumbs": [
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>The Apply Family</span>"
    ]
  },
  {
    "objectID": "Apply.html#apply",
    "href": "Apply.html#apply",
    "title": "24  The Apply Family",
    "section": "",
    "text": "Tip\n\n\n\napply() applies a function over one or more dimensions of an array of 2 dimensions or more (this includes matrices) or a data frame:\napply(array, MARGIN, FUN)\n\n\n\n\n\n\nMARGIN = 1: apply function on each row\n\n\nMARGIN = 2: apply function on each column\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nHint: It is possibly easiest to think of the “MARGIN” as the dimension you want to keep.\nIn the above case, we want the mean for each variable, i.e. we want to keep columns and collapse rows.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCaution\n\n\n\napply() converts 2-dimensional objects to matrices before applying the function. Therefore, if applied on a data.frame with mixed data types, it will be coerced to a character matrix.\nThis is explained in the apply() documentation under “Details”:\n“If X is not an array but an object of a class with a non-null dim value (such as a data frame), apply attempts to coerce it to an array via as.matrix if it is two-dimensional (e.g., a data frame) or via as.array.”",
    "crumbs": [
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>The Apply Family</span>"
    ]
  },
  {
    "objectID": "Apply.html#lapply",
    "href": "Apply.html#lapply",
    "title": "24  The Apply Family",
    "section": "\n24.2 lapply()\n",
    "text": "24.2 lapply()\n\n\n\n\n\n\n\nTip\n\n\n\nlapply() applies a function on each element of its input and returns a list of the outputs.\n\n\nNote: The ‘elements’ of a data frame are its columns (remember, a data frame is a list with equal-length elements). The ‘elements’ of a matrix are each cell one by one, by column. Therefore, unlike apply(), lapply() has a very different effect on a data frame and a matrix. lapply() is commonly used to iterate over the columns of a data frame.\n\n\n\n\n\n\nTip\n\n\n\nlapply() is the only function of the *apply() family that always returns a list.\n\n\n\ndat_median &lt;- lapply(dat, median)\ndat_median\n\n$Age\n[1] 40.8132\n\n$Weight\n[1] 81.48206\n\n$Height\n[1] 1.697626\n\n$SBP\n[1] 135.3969\n\n\nTo understand what lapply() does, here is the equivalent for-loop:\n\ndat_median &lt;- vector(\"list\", length = 4)\nnames(dat_median) &lt;- colnames(dat)\nfor (i in 1:4) {\n  dat_median[[i]] &lt;- median(dat[, i])\n}\ndat_median\n\n$Age\n[1] 40.8132\n\n$Weight\n[1] 81.48206\n\n$Height\n[1] 1.697626\n\n$SBP\n[1] 135.3969",
    "crumbs": [
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>The Apply Family</span>"
    ]
  },
  {
    "objectID": "Apply.html#sapply",
    "href": "Apply.html#sapply",
    "title": "24  The Apply Family",
    "section": "\n24.3 sapply()\n",
    "text": "24.3 sapply()\n\nsapply() is an alias for lapply(), followed by a call to simplify2array().\n(Check the source code for sapply() by typing sapply at the console).\n\n\n\n\n\n\nNote\n\n\n\nUnlike lapply(), the output of sapply() is variable, when the argument simplify is set to TRUE, which is the default:\nIt is the simplest R object that can hold the data type/s resulting from the operations, i.e. a vector, matrix, data frame, or list.\n\n\n\ndat_median &lt;- sapply(dat, median)\ndat_median\n\n       Age     Weight     Height        SBP \n 40.813197  81.482061   1.697626 135.396861 \n\n\n\ndat_summary &lt;- data.frame(Mean = sapply(dat, mean),\n                           SD = sapply(dat, sd))\ndat_summary\n\n             Mean       SD\nAge     41.355183 9.214191\nWeight  80.976511 9.219459\nHeight   1.697381 0.132754\nSBP    134.461052 4.460144\n\n\n\n24.3.1 Example: Get index of numeric variables\nLet’s use sapply() to get an index of numeric columns in dat2:\n\nhead(dat2)\n\n    ID Weight_week_1 Weight_week_3 Weight_week_5 Weight_week_7\n1 8001     111.04289     106.95935     102.94787     102.26928\n2 8002     103.47004      99.86460      97.28305      94.69024\n3 8003     107.84784     105.56062     103.45063      99.78788\n4 8004     110.51762     106.99228     103.04543     100.48099\n5 8005      99.40784      97.95236      94.94075      92.40207\n6 8006      84.47913      81.95258      79.39812      76.72131\n\n\nlogical index of numeric columns:\n\nnumidl &lt;- sapply(dat2, is.numeric)\nnumidl\n\n           ID Weight_week_1 Weight_week_3 Weight_week_5 Weight_week_7 \n         TRUE          TRUE          TRUE          TRUE          TRUE \n\n\ninteger index of numeric columns:\n\nnumidi &lt;- which(sapply(dat2, is.numeric))\nnumidi\n\n           ID Weight_week_1 Weight_week_3 Weight_week_5 Weight_week_7 \n            1             2             3             4             5",
    "crumbs": [
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>The Apply Family</span>"
    ]
  },
  {
    "objectID": "Apply.html#vapply",
    "href": "Apply.html#vapply",
    "title": "24  The Apply Family",
    "section": "\n24.4 vapply()\n",
    "text": "24.4 vapply()\n\nMuch less commonly used (possibly underused) than lapply() or sapply(), vapply() allows you to specify what the expected output looks like - for example a numeric vector of length 2, a character vector of length 1.\nThis can have two advantages:\n\nIt is safer against errors\nIt will sometimes be a little faster\n\nYou add the argument FUN.VALUE which must be of the correct type and length of the expected result of each iteration.\n\nvapply(dat, median, FUN.VALUE = 0.0)\n\n       Age     Weight     Height        SBP \n 40.813197  81.482061   1.697626 135.396861 \n\n\nHere, each iteration returns the median of each column, i.e. a numeric vector of length 1.\nTherefore FUN.VALUE can be any numeric scalar.\nFor example, if we instead returned the range of each column, FUN.VALUE should be a numeric vector of length 2:\n\nvapply(dat, range, FUN.VALUE = rep(0.0, 2))\n\n          Age   Weight   Height      SBP\n[1,] 21.36434 59.10752 1.430183 121.0585\n[2,] 66.19577 98.14315 1.982392 142.0525\n\n\nIf FUN.VALUE does not match the returned value, we get an informative error:\n\nvapply(dat, range, FUN.VALUE = 0.0)\n\nError in vapply(dat, range, FUN.VALUE = 0): values must be length 1,\n but FUN(X[[1]]) result is length 2",
    "crumbs": [
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>The Apply Family</span>"
    ]
  },
  {
    "objectID": "Apply.html#tapply",
    "href": "Apply.html#tapply",
    "title": "24  The Apply Family",
    "section": "\n24.5 tapply()\n",
    "text": "24.5 tapply()\n\ntapply() is one way (of many) to apply a function on subgroups of data as defined by one or more factors.\n\ndat$Group &lt;- factor(sample(c(\"A\", \"B\", \"C\"), size = 50, replace = TRUE))\nhead(dat)\n\n       Age   Weight   Height      SBP Group\n1 33.53517 79.99227 1.437829 138.6748     C\n2 35.23837 76.06266 1.782321 142.0525     B\n3 46.03977 86.39338 1.516113 140.9807     A\n4 51.51741 87.18997 1.583751 137.9623     B\n5 40.47961 68.31458 1.790967 135.1164     C\n6 35.91377 78.44711 1.734494 137.1234     A\n\n\n\nmean_Age_by_Group &lt;- tapply(dat[[\"Age\"]], dat[\"Group\"], mean)\nmean_Age_by_Group\n\nGroup\n       A        B        C \n39.95888 43.84275 39.67471 \n\n\nThe for-loop equivalent of the above is:\n\ngroups &lt;- levels(dat$Group)\nmean_Age_by_Group &lt;- vector(\"numeric\", length = length(groups))\nnames(mean_Age_by_Group) &lt;- groups\n\nfor (i in seq(groups)) {\n  mean_Age_by_Group[i] &lt;- \n    mean(dat$Age[dat$Group == groups[i]])\n}\nmean_Age_by_Group\n\n       A        B        C \n39.95888 43.84275 39.67471",
    "crumbs": [
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>The Apply Family</span>"
    ]
  },
  {
    "objectID": "Apply.html#mapply",
    "href": "Apply.html#mapply",
    "title": "24  The Apply Family",
    "section": "\n24.6 mapply()\n",
    "text": "24.6 mapply()\n\nThe functions we have looked at so far work well when you iterating over elements of a single object.\nmapply() allows you to execute a function that accepts two or more inputs, say fn(x, z) using the i-th element of each input, and will return:fn(x[1], z[1]), fn(x[2], z[2]), …, fn(x[n], z[n])\nLet’s create a simple function that accepts two numeric arguments, and two vectors length 5 each:\n\nraise &lt;- function(x, power) x^power\nx &lt;- 2:6\np &lt;- 6:2\n\nUse mapply to raise each x to the corresponding p:\n\nout &lt;- mapply(raise, x, p)\nout\n\n[1]  64 243 256 125  36\n\n\nThe above is equivalent to:\n\nout &lt;- vector(\"numeric\", length = 5)\nfor (i in seq(5)) {\n  out[i] &lt;- raise(x[i], p[i])\n}\nout\n\n[1]  64 243 256 125  36",
    "crumbs": [
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>The Apply Family</span>"
    ]
  },
  {
    "objectID": "Apply.html#applying-on-matrices-vs.-data-frames",
    "href": "Apply.html#applying-on-matrices-vs.-data-frames",
    "title": "24  The Apply Family",
    "section": "\n24.7 *apply()ing on matrices vs. data frames",
    "text": "24.7 *apply()ing on matrices vs. data frames\nTo consolidate some of what was learned above, let’s focus on the difference between working on a matrix vs. a data frame.\nFirst, let’s create a matrix and a data frame with the same data:\n\namat &lt;- matrix(21:70, nrow = 10)\ncolnames(amat) &lt;- paste0(\"Feature_\", 1:ncol(amat))\namat\n\n      Feature_1 Feature_2 Feature_3 Feature_4 Feature_5\n [1,]        21        31        41        51        61\n [2,]        22        32        42        52        62\n [3,]        23        33        43        53        63\n [4,]        24        34        44        54        64\n [5,]        25        35        45        55        65\n [6,]        26        36        46        56        66\n [7,]        27        37        47        57        67\n [8,]        28        38        48        58        68\n [9,]        29        39        49        59        69\n[10,]        30        40        50        60        70\n\nadf &lt;- as.data.frame(amat)\nadf\n\n   Feature_1 Feature_2 Feature_3 Feature_4 Feature_5\n1         21        31        41        51        61\n2         22        32        42        52        62\n3         23        33        43        53        63\n4         24        34        44        54        64\n5         25        35        45        55        65\n6         26        36        46        56        66\n7         27        37        47        57        67\n8         28        38        48        58        68\n9         29        39        49        59        69\n10        30        40        50        60        70\n\n\nWe’ve seen that with apply() we specify the dimension to operate on and it works the same way on both matrices and data frames:\n\napply(amat, 2, mean)\n\nFeature_1 Feature_2 Feature_3 Feature_4 Feature_5 \n     25.5      35.5      45.5      55.5      65.5 \n\napply(adf, 2, mean)\n\nFeature_1 Feature_2 Feature_3 Feature_4 Feature_5 \n     25.5      35.5      45.5      55.5      65.5 \n\n\nHowever, sapply() (and lapply(), vapply()) acts on each element of the object, therefore it is not meaningful to pass a matrix to it:\n\nsapply(amat, mean)\n\n [1] 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45\n[26] 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70\n\n\nThe above returns the mean of each element, i.e. the element itself, which is meaningless.\nSince a data frame is a list, and its columns are its elements, it works great for column operations on data frames:\n\nsapply(adf, mean)\n\nFeature_1 Feature_2 Feature_3 Feature_4 Feature_5 \n     25.5      35.5      45.5      55.5      65.5 \n\n\nIf you want to use sapply() on a matrix, you could iterate over an integer sequence as shown in the previous section:\n\nsapply(1:ncol(amat), function(i) mean(amat[, i]))\n\n[1] 25.5 35.5 45.5 55.5 65.5\n\n\nThis is shown to help emphasize the differences between the function and the data structures. In practice, you would use apply() on a matrix.",
    "crumbs": [
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>The Apply Family</span>"
    ]
  },
  {
    "objectID": "Apply.html#anonfns",
    "href": "Apply.html#anonfns",
    "title": "24  The Apply Family",
    "section": "\n24.8 Anonymous functions",
    "text": "24.8 Anonymous functions\nAnonymous functions are just like regular functions but they are not assigned to an object - i.e. they are not “named”.\nThey are usually passed as arguments to other functions to be used once, hence no need to assign them.\nAnonymous functions are often used with the apply family of functions.\nExample of a simple regular function:\n\nsquared &lt;- function(x) {\n  x^2\n}\n\nSince this is a short function definition, it can also be written in a single line:\n\nsquared &lt;- function(x) x^2\n\nAn anonymous function definition is just like a regular function - minus it is not assigned:\n\nfunction(x) x^2\n\nSince R version 4.1 (May 2021), a compact anonymous function syntax is available, where a single back slash replaces function:\n\n\\(x) x^2\n\nLet’s use the squared() function within sapply() to square the first four columns of the iris dataset. In these examples, we often wrap functions around head() which prints the first few lines of an object to avoid:\n\nhead(dat[, 1:4])\n\n       Age   Weight   Height      SBP\n1 33.53517 79.99227 1.437829 138.6748\n2 35.23837 76.06266 1.782321 142.0525\n3 46.03977 86.39338 1.516113 140.9807\n4 51.51741 87.18997 1.583751 137.9623\n5 40.47961 68.31458 1.790967 135.1164\n6 35.91377 78.44711 1.734494 137.1234\n\ndat_sq &lt;- sapply(dat[, 1:4], squared)\nhead(dat_sq)\n\n          Age   Weight   Height      SBP\n[1,] 1124.608 6398.763 2.067352 19230.71\n[2,] 1241.743 5785.528 3.176667 20178.91\n[3,] 2119.660 7463.815 2.298598 19875.57\n[4,] 2654.043 7602.091 2.508268 19033.58\n[5,] 1638.599 4666.882 3.207564 18256.44\n[6,] 1289.799 6153.950 3.008468 18802.83\n\n\nLet’s do the same as above, but this time using an anonymous function:\n\ndat_sqtoo &lt;- sapply(dat[, 1:4], function(x) x^2)\nhead(dat_sqtoo)\n\n          Age   Weight   Height      SBP\n[1,] 1124.608 6398.763 2.067352 19230.71\n[2,] 1241.743 5785.528 3.176667 20178.91\n[3,] 2119.660 7463.815 2.298598 19875.57\n[4,] 2654.043 7602.091 2.508268 19033.58\n[5,] 1638.599 4666.882 3.207564 18256.44\n[6,] 1289.799 6153.950 3.008468 18802.83\n\n\nThe entire anonymous function definition is passed to the FUN argument.",
    "crumbs": [
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>The Apply Family</span>"
    ]
  },
  {
    "objectID": "Apply.html#iterating-over-a-sequence-instead-of-an-object",
    "href": "Apply.html#iterating-over-a-sequence-instead-of-an-object",
    "title": "24  The Apply Family",
    "section": "\n24.9 Iterating over a sequence instead of an object",
    "text": "24.9 Iterating over a sequence instead of an object\nWith lapply(), sapply() and vapply() there is a very simple trick that may often come in handy:\nInstead of iterating over elements of an object, you can iterate over an integer index of whichever elements you want to access and use it accordingly within the anonymous function.\nThis alternative approach is much closer to how we would use an integer sequence in a for loop.\nIt will be clearer through an example, where we get the mean of the first four columns of iris:\n\n# original way: iterate through elements i.e. columns:\nsapply(dat, function(i) mean(i))\n\nWarning in mean.default(i): argument is not numeric or logical: returning NA\n\n\n       Age     Weight     Height        SBP      Group \n 41.355183  80.976511   1.697381 134.461052         NA \n\n# alternative way: iterate over integer index of elements:\nsapply(1:4, function(i) mean(dat[, i]))\n\n[1]  41.355183  80.976511   1.697381 134.461052\n\n# equivalent to:\nfor (i in 1:4) {\n  mean(dat[, i])\n}\n\nNotice that in this approach, since you are not passing the object (dat, in the above example) as the input to lapply(), it needs to be accessed within the anonymous function.",
    "crumbs": [
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>The Apply Family</span>"
    ]
  },
  {
    "objectID": "DataFrames.html",
    "href": "DataFrames.html",
    "title": "Data Frames",
    "section": "",
    "text": "See also\nThe data.frame is, like we saw in 9  Data Structures, one of the core R data structures used in Statistics, Machine Learning, Data Science. Data frames store tabular data, where rows usually represent cases and columns usually represent variables. Columns can be of different classes/types, e.g. numeric (float), integer, character, factor.  When working with tabular data structures, core data science techniques to learn include:",
    "crumbs": [
      "Data Frames"
    ]
  },
  {
    "objectID": "DataFrames.html#see-also",
    "href": "DataFrames.html#see-also",
    "title": "Data Frames",
    "section": "",
    "text": "data.table, a modern, highly optimized and powerful alternative to data.frame.",
    "crumbs": [
      "Data Frames"
    ]
  },
  {
    "objectID": "dfBasics.html",
    "href": "dfBasics.html",
    "title": "25  Working with Data frames",
    "section": "",
    "text": "25.1 Synthetic Data\nCore data.frame operations:\nset.seed(2022)\nn &lt;- 10\ndat &lt;- data.frame(\n  PID = 8001:8010,\n  Sex = sample(c(\"Male\", \"Female\"), size = n, replace = TRUE),\n  Age = rnorm(n, mean = 58, sd = 12),\n  Height = rnorm(n, mean = 178, sd = 10),\n  Weight = rnorm(n, mean = 80, sd = 12),\n  Group = sample(c(\"A\", \"B\"), size = n, replace = TRUE)\n)",
    "crumbs": [
      "Data Frames",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Working with Data frames</span>"
    ]
  },
  {
    "objectID": "dfBasics.html#filter",
    "href": "dfBasics.html#filter",
    "title": "25  Working with Data frames",
    "section": "\n25.2 Filter",
    "text": "25.2 Filter\nFilter & select operations are performed by indexing rows and cases, respectively.",
    "crumbs": [
      "Data Frames",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Working with Data frames</span>"
    ]
  },
  {
    "objectID": "dfBasics.html#column-and-row-names",
    "href": "dfBasics.html#column-and-row-names",
    "title": "25  Working with Data frames",
    "section": "\n25.3 Column and row names",
    "text": "25.3 Column and row names\nLet’s start with a simple example data.frame:\n\ndf &lt;- data.frame(PID = c(111:119),\n                 Hospital = c(\"UCSF\", \"HUP\", \"Stanford\",\n                             \"Stanford\", \"UCSF\", \"HUP\", \n                             \"HUP\", \"Stanford\", \"UCSF\"),\n                Age = c(22, 34, 41, 19, 53, 21, 63, 22, 19),\n                Sex = c(1, 1, 0, 1, 0, 0, 1, 0, 0))\ndf\n\n  PID Hospital Age Sex\n1 111     UCSF  22   1\n2 112      HUP  34   1\n3 113 Stanford  41   0\n4 114 Stanford  19   1\n5 115     UCSF  53   0\n6 116      HUP  21   0\n7 117      HUP  63   1\n8 118 Stanford  22   0\n9 119     UCSF  19   0\n\n\nThe optional row.names argument (see data.frame usage in the R documentation) can be used to define row names at the time of the data frame creation. It accepts either:\n\na single integer or a character specifying a column of the data.frame being created whose values should be used as row names, or\na vector of values (character or integer) of the row names to be used\n\nFor example, we can use the “PID” column:\n\ndf &lt;- data.frame(PID = c(111:119),\n                 Hospital = c(\"UCSF\", \"HUP\", \"Stanford\",\n                             \"Stanford\", \"UCSF\", \"HUP\", \n                             \"HUP\", \"Stanford\", \"UCSF\"),\n                Age = c(22, 34, 41, 19, 53, 21, 63, 22, 19),\n                Sex = c(1, 1, 0, 1, 0, 0, 1, 0, 0),\n                row.names = \"PID\")\n\n\n\n\n\n\n\nNote\n\n\n\nIt is recommended to not use/depend on row names to identify or index data.frames, and instead include a column of case IDs.\n\n\nWe can get column names and row names with colnames() and rownames(), respectively:\n\ncolnames(df)\n\n[1] \"Hospital\" \"Age\"      \"Sex\"     \n\nrownames(df)\n\n[1] \"111\" \"112\" \"113\" \"114\" \"115\" \"116\" \"117\" \"118\" \"119\"\n\n\nTo set new column or row names use the form:\ncolnames(df) &lt;- new.colnames\nrownames(df) &lt;- new.rownames\nwhere new.colnames and new.rownames is a character vector.\nYou can rename all columns/rows or use indexing to replace specific names:\nRename all rows:\n\nrownames(df) &lt;- paste0(\"Patient_\", 1:9)\ndf\n\n          Hospital Age Sex\nPatient_1     UCSF  22   1\nPatient_2      HUP  34   1\nPatient_3 Stanford  41   0\nPatient_4 Stanford  19   1\nPatient_5     UCSF  53   0\nPatient_6      HUP  21   0\nPatient_7      HUP  63   1\nPatient_8 Stanford  22   0\nPatient_9     UCSF  19   0\n\n\nRename first two columns:\n\ncolnames(df)[1:2] &lt;- c(\"Center\", \"Age_at_Dx\")\ndf\n\n            Center Age_at_Dx Sex\nPatient_1     UCSF        22   1\nPatient_2      HUP        34   1\nPatient_3 Stanford        41   0\nPatient_4 Stanford        19   1\nPatient_5     UCSF        53   0\nPatient_6      HUP        21   0\nPatient_7      HUP        63   1\nPatient_8 Stanford        22   0\nPatient_9     UCSF        19   0",
    "crumbs": [
      "Data Frames",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Working with Data frames</span>"
    ]
  },
  {
    "objectID": "dfBasics.html#delete-columns-or-rows",
    "href": "dfBasics.html#delete-columns-or-rows",
    "title": "25  Working with Data frames",
    "section": "\n25.4 Delete columns or rows",
    "text": "25.4 Delete columns or rows\nTo delete a data.frame column, set it to NULL:\n\ndf$Sex &lt;- NULL\ndf\n\n            Center Age_at_Dx\nPatient_1     UCSF        22\nPatient_2      HUP        34\nPatient_3 Stanford        41\nPatient_4 Stanford        19\nPatient_5     UCSF        53\nPatient_6      HUP        21\nPatient_7      HUP        63\nPatient_8 Stanford        22\nPatient_9     UCSF        19\n\n\nTo delete a data.frame row, you can “index it out”.\nFor example, to remove the third and fifths rows of the above data.frame using an integer index:\n\ndf &lt;- df[-c(3, 5), ]\ndf\n\n            Center Age_at_Dx\nPatient_1     UCSF        22\nPatient_2      HUP        34\nPatient_4 Stanford        19\nPatient_6      HUP        21\nPatient_7      HUP        63\nPatient_8 Stanford        22\nPatient_9     UCSF        19\n\n\nYou can similarly exclude a row using a logical index. Logical indexing occurs usually following some filtering condition.\nFor example, exclude patients under 20 years old:\n\ndf &lt;- df[!df$Age &lt; 20, ]\ndf\n\n            Center Age_at_Dx\nPatient_1     UCSF        22\nPatient_2      HUP        34\nPatient_6      HUP        21\nPatient_7      HUP        63\nPatient_8 Stanford        22",
    "crumbs": [
      "Data Frames",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Working with Data frames</span>"
    ]
  },
  {
    "objectID": "dfBasics.html#subset",
    "href": "dfBasics.html#subset",
    "title": "25  Working with Data frames",
    "section": "\n25.5 subset()\n",
    "text": "25.5 subset()\n\nsubset() allows you to\n\n\nfilter cases that meet certain conditions using the subset argument\n\nselect columns using the select argument\n\n(head() returns the first few lines of a data frame. We use it to avoid printing too many lines)\n\nhead(iris)\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n\niris_sl.gt.med &lt;- subset(iris, Sepal.Length &gt; median(Sepal.Length))\n\nNote: You can use the column name Sepal.Length directly, i.e. unquoted and you don’t need to use iris$Sepal.Length.\nThis is called Non-Standard Evaluation (NSE).\n\nx &lt;- data.frame(one = 1:10,\n                two = rnorm(10),\n                group = c(rep(\"alpha\", 4),  rep(\"beta\", 6)))\nsubset(x, subset = two &gt; 0, select = two)\n\n          two\n2  0.80776842\n5  0.06035668\n7  0.34027593\n10 0.36817344\n\nsubset(x, two &gt; 0, -one)\n\n          two group\n2  0.80776842 alpha\n5  0.06035668  beta\n7  0.34027593  beta\n10 0.36817344  beta\n\nsubset(x, two &gt; 0, two:one)\n\n          two one\n2  0.80776842   2\n5  0.06035668   5\n7  0.34027593   7\n10 0.36817344  10\n\nsubset(x, two &gt; 0, two:group)\n\n          two group\n2  0.80776842 alpha\n5  0.06035668  beta\n7  0.34027593  beta\n10 0.36817344  beta",
    "crumbs": [
      "Data Frames",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Working with Data frames</span>"
    ]
  },
  {
    "objectID": "dfBasics.html#split",
    "href": "dfBasics.html#split",
    "title": "25  Working with Data frames",
    "section": "\n25.6 split()\n",
    "text": "25.6 split()\n\nSplit a data frame into multiple data frames by groups defined by a factor:\n\nx_by_group &lt;- split(x, x$group)\nx_by_group\n\n$alpha\n  one        two group\n1   1 -0.2690377 alpha\n2   2  0.8077684 alpha\n3   3 -1.1247172 alpha\n4   4 -1.4307880 alpha\n\n$beta\n   one         two group\n5    5  0.06035668  beta\n6    6 -0.79298250  beta\n7    7  0.34027593  beta\n8    8 -0.25946873  beta\n9    9 -1.30484865  beta\n10  10  0.36817344  beta",
    "crumbs": [
      "Data Frames",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Working with Data frames</span>"
    ]
  },
  {
    "objectID": "dfBasics.html#with",
    "href": "dfBasics.html#with",
    "title": "25  Working with Data frames",
    "section": "\n25.7 with()\n",
    "text": "25.7 with()\n\nWithin a with() expression, you can access list elements or data.frame columns without quoting or using the $ operator:\n\nwith(x, one + two)\n\n [1]  0.7309623  2.8077684  1.8752828  2.5692120  5.0603567  5.2070175\n [7]  7.3402759  7.7405313  7.6951514 10.3681734\n\nwith(x, x[group == \"alpha\", ])\n\n  one        two group\n1   1 -0.2690377 alpha\n2   2  0.8077684 alpha\n3   3 -1.1247172 alpha\n4   4 -1.4307880 alpha\n\nwith(x, x[two &gt; 0, ])\n\n   one        two group\n2    2 0.80776842 alpha\n5    5 0.06035668  beta\n7    7 0.34027593  beta\n10  10 0.36817344  beta",
    "crumbs": [
      "Data Frames",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Working with Data frames</span>"
    ]
  },
  {
    "objectID": "dfBasics.html#feature-transformation-with-transform",
    "href": "dfBasics.html#feature-transformation-with-transform",
    "title": "25  Working with Data frames",
    "section": "\n25.8 Feature transformation with transform()\n",
    "text": "25.8 Feature transformation with transform()\n\nMake up some data:\n\ndat &lt;- data.frame(Sex = c(0, 0, 1, 1, 0),\n                  Height = c(1.5, 1.6, 1.55, 1.73, 1.8),\n                  Weight = c(55, 70, 69, 76, 91))\n\n\ndat &lt;- transform(dat, BMI = Weight/Height^2)\ndat\n\n  Sex Height Weight      BMI\n1   0   1.50     55 24.44444\n2   0   1.60     70 27.34375\n3   1   1.55     69 28.72008\n4   1   1.73     76 25.39343\n5   0   1.80     91 28.08642\n\n\ntransform() is probably not used too often, because it is trivial to do the same with direct assignment:\n\ndat$BMI &lt;- dat$Weight/dat$Height^2\n\nbut can be useful when adding multiple variables and/or used in a pipe:\n\ndat |&gt; \n  subset(Sex == 0) |&gt; \n  transform(DeltaWeightFromMean = Weight - mean(Weight),\n            BMI = Weight/Height^2,\n            CI = Weight/Height^3)\n\n  Sex Height Weight      BMI DeltaWeightFromMean       CI\n1   0    1.5     55 24.44444                 -17 16.29630\n2   0    1.6     70 27.34375                  -2 17.08984\n5   0    1.8     91 28.08642                  19 15.60357",
    "crumbs": [
      "Data Frames",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Working with Data frames</span>"
    ]
  },
  {
    "objectID": "dfBasics.html#identify-and-remove-duplicated-rows-with-duplicated-and-unique",
    "href": "dfBasics.html#identify-and-remove-duplicated-rows-with-duplicated-and-unique",
    "title": "25  Working with Data frames",
    "section": "\n25.9 Identify and remove duplicated rows with duplicated() and unique()\n",
    "text": "25.9 Identify and remove duplicated rows with duplicated() and unique()\n\nWhen applied on a data.frame, the duplicated() function returns a logical index specifying the location of duplicated rows - specifically, a logical index of rows which are the duplicate of another row further up the data.frame. This means that if rows 20 and 23 are identical, duplicated() will return TRUE for row 23.\nOn the other hand, unique() will remove duplicate rows from a data.frame.\n\nx &lt;- data.frame(ID = c(203, 808, 909, 707, 808),\n                Age = c(23, 44, 33, 42, 44))\n\n\nduplicated(x)\n\n[1] FALSE FALSE FALSE FALSE  TRUE\n\n\n\nunique(x)\n\n   ID Age\n1 203  23\n2 808  44\n3 909  33\n4 707  42",
    "crumbs": [
      "Data Frames",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Working with Data frames</span>"
    ]
  },
  {
    "objectID": "dfBasics.html#see-also",
    "href": "dfBasics.html#see-also",
    "title": "25  Working with Data frames",
    "section": "\n25.10 See also",
    "text": "25.10 See also\n\nSee the data frame section for an introduction to data frames.",
    "crumbs": [
      "Data Frames",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Working with Data frames</span>"
    ]
  },
  {
    "objectID": "dfReshape.html",
    "href": "dfReshape.html",
    "title": "26  Reshaping",
    "section": "",
    "text": "26.1 Long to Wide\nTabular data can be stored in different formats. Two of the most common ones are wide and long.\nWe want to be able to reshape from one form to the other because different programs (e.g. statistical models, plotting functions) expect data in one or the other format for different applications (e.g. longitudinal modeling or grouped visualizations).\nR’s reshape() function is very powerful, but can seem intimidating at first, because its documentation is not very clear, especially if you’re not familiar with the jargon.  This chapter includes detailed diagrams and step-by-step instructions to explain how to build calls for long-to-wide and wide-to-long reshaping.",
    "crumbs": [
      "Data Frames",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>Reshaping</span>"
    ]
  },
  {
    "objectID": "dfReshape.html#long-to-wide",
    "href": "dfReshape.html#long-to-wide",
    "title": "26  Reshaping",
    "section": "",
    "text": "26.1.1 Key-value pairs\nIt is very common to receive data in long format. For example, many tables with electronic health records are stored in long format.  Let’s start with a small synthetic dataset:\n\ndat_long &lt;- data.frame(\n    Account_ID = c(8001, 8002, 8003, 8004, 8001, 8002, 8003, 8004, \n            8001, 8002, 8003, 8004, 8001, 8002, 8003, 8004), \n    Age = c(67.8017038366664, 42.9198507293701, 46.2301756642422, \n            39.665983196671, 67.8017038366664, 42.9198507293701, \n            46.2301756642422, 39.665983196671, 67.8017038366664, \n            42.9198507293701, 46.2301756642422, 39.665983196671, \n            67.8017038366664, 42.9198507293701, 46.2301756642422, \n            39.665983196671), \n    Admission = c(\"ED\", \"Planned\", \"Planned\", \"ED\", \"ED\", \"Planned\", \n            \"Planned\", \"ED\", \"ED\", \"Planned\", \"Planned\", \"ED\", \"ED\", \"Planned\", \n            \"Planned\", \"ED\"), \n    Lab_key = c(\"RBC\", \"RBC\", \"RBC\", \"RBC\", \"WBC\", \"WBC\", \"WBC\", \"WBC\", \n            \"Hematocrit\", \"Hematocrit\", \"Hematocrit\", \"Hematocrit\", \n            \"Hemoglobin\", \"Hemoglobin\", \"Hemoglobin\", \"Hemoglobin\"), \n    Lab_value = c(4.63449321082268, 3.34968550627897, 4.27037213597765, \n            4.93897736897793, 8374.22887757195, 7612.37380499927, \n            8759.27855519425, 6972.28096216548, 36.272693147236, \n            40.5716317809522, 39.9888624177955, 39.8786884058422, \n            12.6188444991545, 12.1739747363806, 15.1293426442183, \n            14.8885696185238)\n)\ndat_long &lt;- dat_long[order(dat_long$Account_ID), ]\ndat_long\n\n   Account_ID      Age Admission    Lab_key   Lab_value\n1        8001 67.80170        ED        RBC    4.634493\n5        8001 67.80170        ED        WBC 8374.228878\n9        8001 67.80170        ED Hematocrit   36.272693\n13       8001 67.80170        ED Hemoglobin   12.618844\n2        8002 42.91985   Planned        RBC    3.349686\n6        8002 42.91985   Planned        WBC 7612.373805\n10       8002 42.91985   Planned Hematocrit   40.571632\n14       8002 42.91985   Planned Hemoglobin   12.173975\n3        8003 46.23018   Planned        RBC    4.270372\n7        8003 46.23018   Planned        WBC 8759.278555\n11       8003 46.23018   Planned Hematocrit   39.988862\n15       8003 46.23018   Planned Hemoglobin   15.129343\n4        8004 39.66598        ED        RBC    4.938977\n8        8004 39.66598        ED        WBC 6972.280962\n12       8004 39.66598        ED Hematocrit   39.878688\n16       8004 39.66598        ED Hemoglobin   14.888570\n\n\nThe dataset consists of an Account_ID, denoting a unique patient identifier, Age, Admission, and a pair of Lab_key and a Lab_value columns. The lab data contains information on four lab results: RBC, WBC, Hematocrit, and Hemoglobin.  Use the following figure to understand reshape()’s long-to-wide syntax. You can use it as a reference when building a call to reshape() by following steps 1 through 3.\n\n\n\n\n\n\n\nFigure 26.2: reshape() syntax for Long to Wide transformation.\n\n\n\n\n\ndat_wide &lt;- reshape(\n    dat_long,\n    idvar = \"Account_ID\",\n    timevar = \"Lab_key\",\n    v.names = \"Lab_value\",\n    direction = \"wide\")\ndat_wide\n\n  Account_ID      Age Admission Lab_value.RBC Lab_value.WBC\n1       8001 67.80170        ED      4.634493      8374.229\n2       8002 42.91985   Planned      3.349686      7612.374\n3       8003 46.23018   Planned      4.270372      8759.279\n4       8004 39.66598        ED      4.938977      6972.281\n  Lab_value.Hematocrit Lab_value.Hemoglobin\n1             36.27269             12.61884\n2             40.57163             12.17397\n3             39.98886             15.12934\n4             39.87869             14.88857\n\n\nYou can optionally clean up column names using gsub(), e.g.\n\ncolnames(dat_wide) &lt;- gsub(\"Lab_value.\", \"\", colnames(dat_wide))\ndat_wide\n\n  Account_ID      Age Admission      RBC      WBC Hematocrit Hemoglobin\n1       8001 67.80170        ED 4.634493 8374.229   36.27269   12.61884\n2       8002 42.91985   Planned 3.349686 7612.374   40.57163   12.17397\n3       8003 46.23018   Planned 4.270372 8759.279   39.98886   15.12934\n4       8004 39.66598        ED 4.938977 6972.281   39.87869   14.88857\n\n\n\n26.1.2 Incomplete data\nIt is very common that not all cases have entries for all variables. We can simulate this by removing a few lines from the data frame above.\n\ndat_long &lt;- dat_long[-4, ]\ndat_long &lt;- dat_long[-6, ]\ndat_long &lt;- dat_long[-13, ]\ndat_long\n\n   Account_ID      Age Admission    Lab_key   Lab_value\n1        8001 67.80170        ED        RBC    4.634493\n5        8001 67.80170        ED        WBC 8374.228878\n9        8001 67.80170        ED Hematocrit   36.272693\n2        8002 42.91985   Planned        RBC    3.349686\n6        8002 42.91985   Planned        WBC 7612.373805\n14       8002 42.91985   Planned Hemoglobin   12.173975\n3        8003 46.23018   Planned        RBC    4.270372\n7        8003 46.23018   Planned        WBC 8759.278555\n11       8003 46.23018   Planned Hematocrit   39.988862\n15       8003 46.23018   Planned Hemoglobin   15.129343\n4        8004 39.66598        ED        RBC    4.938977\n8        8004 39.66598        ED        WBC 6972.280962\n16       8004 39.66598        ED Hemoglobin   14.888570\n\n\nIn such cases, long to wide conversion will include NA values where no data is available:\n\ndat_wide &lt;- reshape(dat_long,\n    idvar = \"Account_ID\",\n    timevar = \"Lab_key\",\n    v.names = \"Lab_value\",\n    direction = \"wide\"\n)\ndat_wide\n\n  Account_ID      Age Admission Lab_value.RBC Lab_value.WBC\n1       8001 67.80170        ED      4.634493      8374.229\n2       8002 42.91985   Planned      3.349686      7612.374\n3       8003 46.23018   Planned      4.270372      8759.279\n4       8004 39.66598        ED      4.938977      6972.281\n  Lab_value.Hematocrit Lab_value.Hemoglobin\n1             36.27269                   NA\n2                   NA             12.17397\n3             39.98886             15.12934\n4                   NA             14.88857\n\n\n\n26.1.3 Longitudinal data\n\ndat2 &lt;- data.frame(\n    pat_enc_csn_id = rep(c(14568:14571), each = 5),\n    result_date = rep(c(\n        seq(as.Date(\"2019-08-01\"),\n            as.Date(\"2019-08-05\"),\n            length.out = 5\n        )), 4\n    ),\n    order_description = rep(\"WBC\", 20),\n    result_component_value = c(\n        rnorm(5, mean = 6800, sd = 3840),\n        rnorm(5, mean = 7900, sd = 3100),\n        rnorm(5, mean = 8100, sd = 4030),\n        rnorm(5, mean = 3200, sd = 1100)\n    ))\n\ndat2\n\n   pat_enc_csn_id result_date order_description result_component_value\n1           14568  2019-08-01               WBC               7772.795\n2           14568  2019-08-02               WBC               7146.819\n3           14568  2019-08-03               WBC               2529.658\n4           14568  2019-08-04               WBC               9592.025\n5           14568  2019-08-05               WBC               8195.162\n6           14569  2019-08-01               WBC              11049.717\n7           14569  2019-08-02               WBC              10922.226\n8           14569  2019-08-03               WBC               7416.969\n9           14569  2019-08-04               WBC               7024.867\n10          14569  2019-08-05               WBC              10343.027\n11          14570  2019-08-01               WBC              11415.288\n12          14570  2019-08-02               WBC               5936.171\n13          14570  2019-08-03               WBC               9115.976\n14          14570  2019-08-04               WBC               8360.018\n15          14570  2019-08-05               WBC              10205.501\n16          14571  2019-08-01               WBC               4030.794\n17          14571  2019-08-02               WBC               3444.678\n18          14571  2019-08-03               WBC               4044.613\n19          14571  2019-08-04               WBC               5882.935\n20          14571  2019-08-05               WBC               3439.582\n\n\nIn this example, we have four unique patient IDs, with five measurements taken on different days.  Following the same recipe as above, we convert to wide format:\n\ndat2_wide &lt;- reshape(dat2,\n    idvar = \"pat_enc_csn_id\",\n    timevar = \"result_date\",\n    v.names = \"result_component_value\",\n    direction = \"wide\"\n)\ndat2_wide\n\n   pat_enc_csn_id order_description result_component_value.2019-08-01\n1           14568               WBC                          7772.795\n6           14569               WBC                         11049.717\n11          14570               WBC                         11415.288\n16          14571               WBC                          4030.794\n   result_component_value.2019-08-02 result_component_value.2019-08-03\n1                           7146.819                          2529.658\n6                          10922.226                          7416.969\n11                          5936.171                          9115.976\n16                          3444.678                          4044.613\n   result_component_value.2019-08-04 result_component_value.2019-08-05\n1                           9592.025                          8195.162\n6                           7024.867                         10343.027\n11                          8360.018                         10205.501\n16                          5882.935                          3439.582",
    "crumbs": [
      "Data Frames",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>Reshaping</span>"
    ]
  },
  {
    "objectID": "dfReshape.html#wide-to-long",
    "href": "dfReshape.html#wide-to-long",
    "title": "26  Reshaping",
    "section": "\n26.2 Wide to Long",
    "text": "26.2 Wide to Long\nSynthetic data:\n\nset.seed(2022)\ndat_wide &lt;- data.frame(\n    Account_ID = c(8001, 8002, 8003, 8004),\n    Age = rnorm(4, mean = 57, sd = 12),\n    RBC = rnorm(4, mean = 4.8, sd = 0.5),\n    WBC = rnorm(4, mean = 7250, sd = 1500),\n    Hematocrit = rnorm(4, mean = 40.2, sd = 4),\n    Hemoglobin = rnorm(4, mean = 13.6, sd = 1.5),\n    Admission = sample(c(\"ED\", \"Planned\"), size = 4, replace = TRUE)\n)\ndat_wide\n\n  Account_ID      Age      RBC      WBC Hematocrit Hemoglobin Admission\n1       8001 67.80170 4.634493 8374.229   36.27269   12.61884        ED\n2       8002 42.91985 3.349686 7612.374   40.57163   12.17397   Planned\n3       8003 46.23018 4.270372 8759.279   39.98886   15.12934   Planned\n4       8004 39.66598 4.938977 6972.281   39.87869   14.88857   Planned\n\n\nUse the following figure to understand reshape()’s wide-to-long syntax. Use it as a reference when building a call to reshape() by following steps 1 through 5. It’s important to note which arguments refer to the input vs.  the output data frames.\n\n\n\n\n\n\n\nFigure 26.3: reshape() syntax for Wide to Long transformation.\n\n\n\n\n\ndat_wide2long &lt;- reshape(# Data in wide format\n                         data = dat_wide,\n                         # The column name that defines case IDs\n                         idvar = \"Account_ID\",\n                         # The columns whose values we want to keep\n                         varying = list(3:6),\n                         # The name of the new column which will contain all \n                         # the values from the columns above\n                         v.names = \"Lab value\",\n                         # The values/names, of length = (N columns in \"varying\"), \n                         # that will be recycled to indicate which column from the \n                         # wide dataset each row corresponds to\n                         times = c(colnames(dat_wide)[3:6]),\n                         # The name of the new column created to hold the values \n                         # defined by \"times\"\n                         timevar = \"Lab key\",                  \n                         direction = \"long\")\ndat_wide2long\n\n                Account_ID      Age Admission    Lab key   Lab value\n8001.RBC              8001 67.80170        ED        RBC    4.634493\n8002.RBC              8002 42.91985   Planned        RBC    3.349686\n8003.RBC              8003 46.23018   Planned        RBC    4.270372\n8004.RBC              8004 39.66598   Planned        RBC    4.938977\n8001.WBC              8001 67.80170        ED        WBC 8374.228878\n8002.WBC              8002 42.91985   Planned        WBC 7612.373805\n8003.WBC              8003 46.23018   Planned        WBC 8759.278555\n8004.WBC              8004 39.66598   Planned        WBC 6972.280962\n8001.Hematocrit       8001 67.80170        ED Hematocrit   36.272693\n8002.Hematocrit       8002 42.91985   Planned Hematocrit   40.571632\n8003.Hematocrit       8003 46.23018   Planned Hematocrit   39.988862\n8004.Hematocrit       8004 39.66598   Planned Hematocrit   39.878688\n8001.Hemoglobin       8001 67.80170        ED Hemoglobin   12.618844\n8002.Hemoglobin       8002 42.91985   Planned Hemoglobin   12.173975\n8003.Hemoglobin       8003 46.23018   Planned Hemoglobin   15.129343\n8004.Hemoglobin       8004 39.66598   Planned Hemoglobin   14.888570\n\n\nYou can also define varying with a character vector:\nvarying = list(c(\"RBC\", \"WBC\", \"Hematocrit\", \"Hemoglobin\")\nExplore the resulting data frame’s attributes:\n\nattributes(dat_wide2long)\n\n$row.names\n [1] \"8001.RBC\"        \"8002.RBC\"        \"8003.RBC\"        \"8004.RBC\"       \n [5] \"8001.WBC\"        \"8002.WBC\"        \"8003.WBC\"        \"8004.WBC\"       \n [9] \"8001.Hematocrit\" \"8002.Hematocrit\" \"8003.Hematocrit\" \"8004.Hematocrit\"\n[13] \"8001.Hemoglobin\" \"8002.Hemoglobin\" \"8003.Hemoglobin\" \"8004.Hemoglobin\"\n\n$names\n[1] \"Account_ID\" \"Age\"        \"Admission\"  \"Lab key\"    \"Lab value\" \n\n$class\n[1] \"data.frame\"\n\n$reshapeLong\n$reshapeLong$varying\n$reshapeLong$varying[[1]]\n[1] \"RBC\"        \"WBC\"        \"Hematocrit\" \"Hemoglobin\"\n\n\n$reshapeLong$v.names\n[1] \"Lab value\"\n\n$reshapeLong$idvar\n[1] \"Account_ID\"\n\n$reshapeLong$timevar\n[1] \"Lab key\"\n\n\nThese attributes are present if and only if a long data.frame was created from a wide data.frame as above. In this case, reshaping back to wide format is as easy as calling reshape() on the previously converted data.frame with no arguments:\n\ndat_wideagain &lt;- reshape(dat_wide2long)\ndat_wideagain\n\n         Account_ID      Age Admission      RBC      WBC Hematocrit Hemoglobin\n8001.RBC       8001 67.80170        ED 4.634493 8374.229   36.27269   12.61884\n8002.RBC       8002 42.91985   Planned 3.349686 7612.374   40.57163   12.17397\n8003.RBC       8003 46.23018   Planned 4.270372 8759.279   39.98886   15.12934\n8004.RBC       8004 39.66598   Planned 4.938977 6972.281   39.87869   14.88857\n\n\nNote that the reverse does not work, you need to specify the wide to long reshaping normally.",
    "crumbs": [
      "Data Frames",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>Reshaping</span>"
    ]
  },
  {
    "objectID": "dfReshape.html#see-also",
    "href": "dfReshape.html#see-also",
    "title": "26  Reshaping",
    "section": "\n26.3 See also",
    "text": "26.3 See also\n\ndata.table reshape\ntidyr reshape",
    "crumbs": [
      "Data Frames",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>Reshaping</span>"
    ]
  },
  {
    "objectID": "dfJoin.html",
    "href": "dfJoin.html",
    "title": "27  Joins",
    "section": "",
    "text": "27.1 merge()\nWe often have data from separate sources that we want to combine into a single data.frame. Table joins allow you to specify how to perform such a merge.\nThere are four main types of join operations:\nScenario: You have received two tables with clinical data. Each table contains a column with a unique identifier (ID) plus a number of variables which are unique to each table. You want to merge them into one big table so that for each ID you have all available variables. You want to make sure that the same ID number (e.g. 108) corresponds to the same case in both datasets, but not all IDs needs to be present in both datasets.\nLet’s make up some synthetic data:\nR’s merge() function is used to perform table joins.\nSyntax: merge(x, y, by)\nwhere x and y and the two data.frames to join, and by is the column name of the ID variable used to identify rows. If the two datasets’ ID column has a different name, e.g. “PatientID” in one and “PID” in the other, you can either rename one of them to match the other, or use the following syntax:\nmerge(x, y, by.x, by.y)\nwhere by.x is the name of the ID column for the x dataset and by.y is the name of the ID column for the y dataset.\nIf you do not specify by or by.x and by.y arguments, merge() defaults to using the intersection of column names of the two input datasets. From merge()’s documentation: by = intersect(names(x), names(y))  In our example datasets above, this works as expected and identifies “PID” as the common column:\nintersect(names(a), names(b))\n\n[1] \"PID\"",
    "crumbs": [
      "Data Frames",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>Joins</span>"
    ]
  },
  {
    "objectID": "dfJoin.html#inner-join",
    "href": "dfJoin.html#inner-join",
    "title": "27  Joins",
    "section": "\n27.2 Inner join",
    "text": "27.2 Inner join\nThe default arguments of merge() perform an inner join:\n\nab_inner &lt;- merge(a, b)\n# same as\nab_inner &lt;- merge(a, b, by = \"PID\")\n# same as\nab_inner &lt;- merge(a, b, all = FALSE)\nab_inner\n\n  PID Hospital Age Sex  V1 Department\n1 106      HUP  21   0 153  Neurology\n2 107      HUP  63   1  89  Radiology\n3 108 Stanford  22   0 112  Emergency\n4 109     UCSF  19   0 228 Cardiology\n\n\nNote that the resulting table only contains cases found in both datasets, i.e. IDs 106 through 109",
    "crumbs": [
      "Data Frames",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>Joins</span>"
    ]
  },
  {
    "objectID": "dfJoin.html#outer-join",
    "href": "dfJoin.html#outer-join",
    "title": "27  Joins",
    "section": "\n27.3 Outer join",
    "text": "27.3 Outer join\nYou can perform an outer join by specifying all = TRUE:\n\nab_outer &lt;- merge(a, b, all = TRUE)\n# same as\nab_outer &lt;- merge(a, b, by = \"PID\", all = TRUE)\nab_outer\n\n   PID Hospital Age Sex  V1 Department\n1  101     UCSF  22   1  NA       &lt;NA&gt;\n2  102      HUP  34   1  NA       &lt;NA&gt;\n3  103 Stanford  41   0  NA       &lt;NA&gt;\n4  104 Stanford  19   1  NA       &lt;NA&gt;\n5  105     UCSF  53   0  NA       &lt;NA&gt;\n6  106      HUP  21   0 153  Neurology\n7  107      HUP  63   1  89  Radiology\n8  108 Stanford  22   0 112  Emergency\n9  109     UCSF  19   0 228 Cardiology\n10 110     &lt;NA&gt;  NA  NA  91    Surgery\n11 111     &lt;NA&gt;  NA  NA 190  Neurology\n12 112     &lt;NA&gt;  NA  NA 101 Psychiatry\n\n\nNote that the resulting data frame contains all cases found in either dataset and missing values are represented with NA.",
    "crumbs": [
      "Data Frames",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>Joins</span>"
    ]
  },
  {
    "objectID": "dfJoin.html#left-outer-join",
    "href": "dfJoin.html#left-outer-join",
    "title": "27  Joins",
    "section": "\n27.4 Left outer join",
    "text": "27.4 Left outer join\nYou can perform a left outer join by specifying all.x = TRUE:\n\nab_leftOuter &lt;- merge(a, b, all.x = TRUE)\nab_leftOuter\n\n  PID Hospital Age Sex  V1 Department\n1 101     UCSF  22   1  NA       &lt;NA&gt;\n2 102      HUP  34   1  NA       &lt;NA&gt;\n3 103 Stanford  41   0  NA       &lt;NA&gt;\n4 104 Stanford  19   1  NA       &lt;NA&gt;\n5 105     UCSF  53   0  NA       &lt;NA&gt;\n6 106      HUP  21   0 153  Neurology\n7 107      HUP  63   1  89  Radiology\n8 108 Stanford  22   0 112  Emergency\n9 109     UCSF  19   0 228 Cardiology\n\n\nNote that the resulting data frame contains all cases present in the left input dataset (i.e. the one defined first in the arguments) only.",
    "crumbs": [
      "Data Frames",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>Joins</span>"
    ]
  },
  {
    "objectID": "dfJoin.html#right-outer-join",
    "href": "dfJoin.html#right-outer-join",
    "title": "27  Joins",
    "section": "\n27.5 Right outer join",
    "text": "27.5 Right outer join\nYou can perform a right outer join by specifying all.y = TRUE:\n\nab_rightOuter &lt;- merge(a, b, all.y = TRUE)\nab_rightOuter\n\n  PID Hospital Age Sex  V1 Department\n1 106      HUP  21   0 153  Neurology\n2 107      HUP  63   1  89  Radiology\n3 108 Stanford  22   0 112  Emergency\n4 109     UCSF  19   0 228 Cardiology\n5 110     &lt;NA&gt;  NA  NA  91    Surgery\n6 111     &lt;NA&gt;  NA  NA 190  Neurology\n7 112     &lt;NA&gt;  NA  NA 101 Psychiatry\n\n\nNote how the resulting data frame contains all cases present in the right input dataset (i.e. the one defined second in the arguments) only.",
    "crumbs": [
      "Data Frames",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>Joins</span>"
    ]
  },
  {
    "objectID": "dfJoin.html#specifying-columns",
    "href": "dfJoin.html#specifying-columns",
    "title": "27  Joins",
    "section": "\n27.6 Specifying columns",
    "text": "27.6 Specifying columns\nAs mentioned above, if the ID columns in the two data.frames to be merged do not have the same name, you can specify them directly:\n\na &lt;- data.frame(PID = 101:109,\n                Hospital = c(\"UCSF\", \"HUP\", \"Stanford\",\n                             \"Stanford\", \"UCSF\", \"HUP\", \n                             \"HUP\", \"Stanford\", \"UCSF\"),\n                Age = c(22, 34, 41, 19, 53, 21, 63, 22, 19),\n                Sex = c(1, 1, 0, 1, 0, 0, 1, 0, 0))\na\n\n  PID Hospital Age Sex\n1 101     UCSF  22   1\n2 102      HUP  34   1\n3 103 Stanford  41   0\n4 104 Stanford  19   1\n5 105     UCSF  53   0\n6 106      HUP  21   0\n7 107      HUP  63   1\n8 108 Stanford  22   0\n9 109     UCSF  19   0\n\n\n\nb &lt;- data.frame(PatientID = 106:112,\n                 V1 = c(153, 89, 112, 228,  91, 190, 101),\n                 Department = c(\"Neurology\", \"Radiology\",\n                                \"Emergency\", \"Cardiology\",\n                                \"Surgery\", \"Neurology\", \"Psychiatry\"))\nb\n\n  PatientID  V1 Department\n1       106 153  Neurology\n2       107  89  Radiology\n3       108 112  Emergency\n4       109 228 Cardiology\n5       110  91    Surgery\n6       111 190  Neurology\n7       112 101 Psychiatry\n\n\n\nab_inner &lt;- merge(a, b, by.x = \"PID\", by.y = \"PatientID\")\nab_inner\n\n  PID Hospital Age Sex  V1 Department\n1 106      HUP  21   0 153  Neurology\n2 107      HUP  63   1  89  Radiology\n3 108 Stanford  22   0 112  Emergency\n4 109     UCSF  19   0 228 Cardiology",
    "crumbs": [
      "Data Frames",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>Joins</span>"
    ]
  },
  {
    "objectID": "dfJoin.html#subsetting",
    "href": "dfJoin.html#subsetting",
    "title": "27  Joins",
    "section": "\n27.7 Subsetting",
    "text": "27.7 Subsetting\nRemember that whatever operation you are performing on one or multiple data.frames, you can always subset rows and/or columns as needed. If, for example, you don’t need to include the “V1” variables in your join, you can directly exclude it:\n\nmerge(a, b[, -2], by.x = \"PID\", by.y = \"PatientID\")\n\n  PID Hospital Age Sex Department\n1 106      HUP  21   0  Neurology\n2 107      HUP  63   1  Radiology\n3 108 Stanford  22   0  Emergency\n4 109     UCSF  19   0 Cardiology",
    "crumbs": [
      "Data Frames",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>Joins</span>"
    ]
  },
  {
    "objectID": "dfJoin.html#joining-wide-and-long-tables",
    "href": "dfJoin.html#joining-wide-and-long-tables",
    "title": "27  Joins",
    "section": "\n27.8 Joining wide and long tables",
    "text": "27.8 Joining wide and long tables\nThe columns defined using the by or by.x and by.y arguments determine which rows from each table to include in the merge. These do not have to identify unique rows in either dataset: for example, if you are merging on a PID column, either table can include repeated PIDs. This allows merging wide and long tables.\nAs an example, we create a long and a wide table and merge them:\n\ndat_long &lt;- data.frame(\n    Account_ID = c(8001, 8002, 8003, 8004, 8001, 8002, 8003, 8004, \n            8001, 8002, 8003, 8004, 8001, 8002, 8003, 8004), \n    Age = c(67.8017038366664, 42.9198507293701, 46.2301756642422, \n            39.665983196671, 67.8017038366664, 42.9198507293701, \n            46.2301756642422, 39.665983196671, 67.8017038366664, \n            42.9198507293701, 46.2301756642422, 39.665983196671, \n            67.8017038366664, 42.9198507293701, 46.2301756642422, \n            39.665983196671), \n    Admission = c(\"ED\", \"Planned\", \"Planned\", \"ED\", \"ED\", \"Planned\", \n            \"Planned\", \"ED\", \"ED\", \"Planned\", \"Planned\", \"ED\", \"ED\", \"Planned\", \n            \"Planned\", \"ED\"), \n    Lab_key = c(\"RBC\", \"RBC\", \"RBC\", \"RBC\", \"WBC\", \"WBC\", \"WBC\", \"WBC\", \n            \"Hematocrit\", \"Hematocrit\", \"Hematocrit\", \"Hematocrit\", \n            \"Hemoglobin\", \"Hemoglobin\", \"Hemoglobin\", \"Hemoglobin\"), \n    Lab_value = c(4.63449321082268, 3.34968550627897, 4.27037213597765, \n            4.93897736897793, 8374.22887757195, 7612.37380499927, \n            8759.27855519425, 6972.28096216548, 36.272693147236, \n            40.5716317809522, 39.9888624177955, 39.8786884058422, \n            12.6188444991545, 12.1739747363806, 15.1293426442183, \n            14.8885696185238)\n)\ndat_long &lt;- dat_long[order(dat_long$Account_ID), ]\ndat_long\n\n   Account_ID      Age Admission    Lab_key   Lab_value\n1        8001 67.80170        ED        RBC    4.634493\n5        8001 67.80170        ED        WBC 8374.228878\n9        8001 67.80170        ED Hematocrit   36.272693\n13       8001 67.80170        ED Hemoglobin   12.618844\n2        8002 42.91985   Planned        RBC    3.349686\n6        8002 42.91985   Planned        WBC 7612.373805\n10       8002 42.91985   Planned Hematocrit   40.571632\n14       8002 42.91985   Planned Hemoglobin   12.173975\n3        8003 46.23018   Planned        RBC    4.270372\n7        8003 46.23018   Planned        WBC 8759.278555\n11       8003 46.23018   Planned Hematocrit   39.988862\n15       8003 46.23018   Planned Hemoglobin   15.129343\n4        8004 39.66598        ED        RBC    4.938977\n8        8004 39.66598        ED        WBC 6972.280962\n12       8004 39.66598        ED Hematocrit   39.878688\n16       8004 39.66598        ED Hemoglobin   14.888570\n\n\n\ndat_wide &lt;- data.frame(\n    Account_ID = c(8002, 8003, 8005),\n    Department = c(\"Cardiology\", \"Neurology\", \"Surgery\"),\n    Site = c(\"ZSFG\", \"Mission_Bay\", \"Mt_Zion\")\n)\ndat_wide\n\n  Account_ID Department        Site\n1       8002 Cardiology        ZSFG\n2       8003  Neurology Mission_Bay\n3       8005    Surgery     Mt_Zion\n\n\nInner join:\n\nmerge(dat_wide, dat_long)\n\n  Account_ID Department        Site      Age Admission    Lab_key   Lab_value\n1       8002 Cardiology        ZSFG 42.91985   Planned        RBC    3.349686\n2       8002 Cardiology        ZSFG 42.91985   Planned        WBC 7612.373805\n3       8002 Cardiology        ZSFG 42.91985   Planned Hematocrit   40.571632\n4       8002 Cardiology        ZSFG 42.91985   Planned Hemoglobin   12.173975\n5       8003  Neurology Mission_Bay 46.23018   Planned        RBC    4.270372\n6       8003  Neurology Mission_Bay 46.23018   Planned        WBC 8759.278555\n7       8003  Neurology Mission_Bay 46.23018   Planned Hematocrit   39.988862\n8       8003  Neurology Mission_Bay 46.23018   Planned Hemoglobin   15.129343\n\n\nOuter join:\n\nmerge(dat_wide, dat_long, all = TRUE)\n\n   Account_ID Department        Site      Age Admission    Lab_key   Lab_value\n1        8001       &lt;NA&gt;        &lt;NA&gt; 67.80170        ED        RBC    4.634493\n2        8001       &lt;NA&gt;        &lt;NA&gt; 67.80170        ED        WBC 8374.228878\n3        8001       &lt;NA&gt;        &lt;NA&gt; 67.80170        ED Hematocrit   36.272693\n4        8001       &lt;NA&gt;        &lt;NA&gt; 67.80170        ED Hemoglobin   12.618844\n5        8002 Cardiology        ZSFG 42.91985   Planned        RBC    3.349686\n6        8002 Cardiology        ZSFG 42.91985   Planned        WBC 7612.373805\n7        8002 Cardiology        ZSFG 42.91985   Planned Hematocrit   40.571632\n8        8002 Cardiology        ZSFG 42.91985   Planned Hemoglobin   12.173975\n9        8003  Neurology Mission_Bay 46.23018   Planned        RBC    4.270372\n10       8003  Neurology Mission_Bay 46.23018   Planned        WBC 8759.278555\n11       8003  Neurology Mission_Bay 46.23018   Planned Hematocrit   39.988862\n12       8003  Neurology Mission_Bay 46.23018   Planned Hemoglobin   15.129343\n13       8004       &lt;NA&gt;        &lt;NA&gt; 39.66598        ED        RBC    4.938977\n14       8004       &lt;NA&gt;        &lt;NA&gt; 39.66598        ED        WBC 6972.280962\n15       8004       &lt;NA&gt;        &lt;NA&gt; 39.66598        ED Hematocrit   39.878688\n16       8004       &lt;NA&gt;        &lt;NA&gt; 39.66598        ED Hemoglobin   14.888570\n17       8005    Surgery     Mt_Zion       NA      &lt;NA&gt;       &lt;NA&gt;          NA\n\n\nAs you see above, the output of a join between a wide and long table will be a long table. Depending on the specific analysis goals, one can keep the data in long format, reshape one table prior to merging, or reshape the merged table after joining (See Chapter 26 for reshaping).",
    "crumbs": [
      "Data Frames",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>Joins</span>"
    ]
  },
  {
    "objectID": "dfJoin.html#renaming-non-unique-columns",
    "href": "dfJoin.html#renaming-non-unique-columns",
    "title": "27  Joins",
    "section": "\n27.9 Renaming non-unique columns",
    "text": "27.9 Renaming non-unique columns\nTwo tables may contain shared column names on columns other than those used for merging. In such cases, the suffixes argument, which defaults to c(\".x\",\".y\"), defines the suffix to be added to the left and right tables, respectively.\n\nvisit1 &lt;- data.frame(ID = c(8001, 8002, 8003),\n        Height = c(1.67, 1.79, 1.74),\n        SBP = c(124, 138, 129))\nvisit2 &lt;- data.frame(ID = c(8002, 8003, 8004),\n        Department = c(\"Cardiology\", \"Neurology\", \"Surgery\"),\n        SBP = c(128, 136, 131))\nmerge(visit1, visit2, by = \"ID\", suffixes = c(\"_visit1\", \"_visit2\"))\n\n    ID Height SBP_visit1 Department SBP_visit2\n1 8002   1.79        138 Cardiology        128\n2 8003   1.74        129  Neurology        136\n\n\nNote that in these cases, the by argument, or the by.x and by.y arguments, need to be specified so that the other shared column is not erroneously included in the matching.",
    "crumbs": [
      "Data Frames",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>Joins</span>"
    ]
  },
  {
    "objectID": "dfJoin.html#see-also",
    "href": "dfJoin.html#see-also",
    "title": "27  Joins",
    "section": "\n27.10 See also",
    "text": "27.10 See also\n\ndata.table joins\ndplyr joins",
    "crumbs": [
      "Data Frames",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>Joins</span>"
    ]
  },
  {
    "objectID": "DataTrans.html",
    "href": "DataTrans.html",
    "title": "28  Data Transformations",
    "section": "",
    "text": "28.1 Continuous variables",
    "crumbs": [
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>Data Transformations</span>"
    ]
  },
  {
    "objectID": "DataTrans.html#continuous-variables",
    "href": "DataTrans.html#continuous-variables",
    "title": "28  Data Transformations",
    "section": "",
    "text": "28.1.1 Standardization / Scaling & Centering with scale()\n\nScaling of a numeric vector is achieved by elementwise division with the standard deviation. A scaled vector therefore has standard deviation equal to 1.\nCentering of a numeric vector is achieved by elementwise subtraction of its mean. A centered vector therefore has mean equal to 0.\nStandardizing, a.k.a. converting to Z-scores, involves scaling and centering. Scaling and centering is performed in R with the scale() function.\nDepending on your modeling needs / the algorithms you plan to use, it is often important to scale and/or center your data. Note that many functions, but not all, may automatically scale and center data internally if it is required by the algorithm. Check the function documentation to see if you should manually scale or not.\nscale() can be applied to a single vector or a matrix/data.frame. In the case of a matrix or data.frame, scaling is applied on each column individually. By default, both arguments scale and center are set to TRUE.\nScale a vector:\n\nhead(iris$Sepal.Length)\n\n[1] 5.1 4.9 4.7 4.6 5.0 5.4\n\nPetal.Length_scaled &lt;- scale(iris$Petal.Length)\nhead(Petal.Length_scaled)\n\n          [,1]\n[1,] -1.335752\n[2,] -1.335752\n[3,] -1.392399\n[4,] -1.279104\n[5,] -1.335752\n[6,] -1.165809\n\n\nScale multiple columns of a matrix/data.frame:\n\niris.scaled &lt;- scale(iris[, -5])\nhead(iris.scaled)\n\n     Sepal.Length Sepal.Width Petal.Length Petal.Width\n[1,]   -0.8976739  1.01560199    -1.335752   -1.311052\n[2,]   -1.1392005 -0.13153881    -1.335752   -1.311052\n[3,]   -1.3807271  0.32731751    -1.392399   -1.311052\n[4,]   -1.5014904  0.09788935    -1.279104   -1.311052\n[5,]   -1.0184372  1.24503015    -1.335752   -1.311052\n[6,]   -0.5353840  1.93331463    -1.165809   -1.048667\n\n\nFirst, let’s verify that scale() did what we wanted:\n\ncolMeans(iris.scaled)\n\n Sepal.Length   Sepal.Width  Petal.Length   Petal.Width \n-1.457168e-15 -1.638319e-15 -1.292300e-15 -5.543714e-16 \n\n\n\napply(iris.scaled, 2, sd)\n\nSepal.Length  Sepal.Width Petal.Length  Petal.Width \n           1            1            1            1 \n\n\nWe got effectively 0 mean and standard deviation of 1 for each column.\nscale() outputs the scaled vector(s) along with the scaling and/or centering parameters saved as attributes in the output.\nNote that in both cases, whether a vector input or data.frame, the output is a matrix:\n\nclass(Petal.Length_scaled)\n\n[1] \"matrix\" \"array\" \n\nclass(iris.scaled)\n\n[1] \"matrix\" \"array\" \n\n\nGet the output attributes:\n\nattributes(Petal.Length_scaled)\n\n$dim\n[1] 150   1\n\n$`scaled:center`\n[1] 3.758\n\n$`scaled:scale`\n[1] 1.765298\n\n\ncenter is the mean:\n\nmean(iris$Petal.Length)\n\n[1] 3.758\n\n\nscale is the standard deviation:\n\nsd(iris$Petal.Length)\n\n[1] 1.765298\n\n\nFor a matrix/data.frame input, you get center and scale attributes per column:\n\nattributes(iris.scaled)\n\n$dim\n[1] 150   4\n\n$dimnames\n$dimnames[[1]]\nNULL\n\n$dimnames[[2]]\n[1] \"Sepal.Length\" \"Sepal.Width\"  \"Petal.Length\" \"Petal.Width\" \n\n\n$`scaled:center`\nSepal.Length  Sepal.Width Petal.Length  Petal.Width \n    5.843333     3.057333     3.758000     1.199333 \n\n$`scaled:scale`\nSepal.Length  Sepal.Width Petal.Length  Petal.Width \n   0.8280661    0.4358663    1.7652982    0.7622377 \n\n\nLet’s save the scale and center attributes and then double check the calculations:\n\n.center &lt;- attr(iris.scaled, \"scaled:center\")\n.center\n\nSepal.Length  Sepal.Width Petal.Length  Petal.Width \n    5.843333     3.057333     3.758000     1.199333 \n\n.scale &lt;- attr(iris.scaled, \"scaled:scale\")\n.scale\n\nSepal.Length  Sepal.Width Petal.Length  Petal.Width \n   0.8280661    0.4358663    1.7652982    0.7622377 \n\nSepal.Length_scaled &lt;- (iris$Sepal.Length - .center[1]) / .scale[1]\nall(Sepal.Length_scaled == iris.scaled[, \"Sepal.Length\"])\n\n[1] TRUE\n\n\n(Note: Due to limitation in numerical precision, checking sets of floats for equality after multiple operations is tricky. all.equal() is a good option here and tests for “near equality”.)\n\nall.equal(Sepal.Length_scaled, iris.scaled[, \"Sepal.Length\"])\n\n[1] TRUE\n\n\n\n\n\n\n\n\nNote\n\n\n\nIf you are manually scaling and/or centering data for supervised learning, you must:\n\nPerform scaling and centering on your training data,\nSave the centering and scaling parameters for each feature, and\nApply the training set-derived centering and scaling parameters to the test set prior to prediction/inference.\n\n\n\nA common mistake is to either scale training and testing data together in the beginning, or scale them independently.\n\n28.1.2 Normalization\nNormalization has different meanings in different contexts; in the context of a numeric variable it usually refers to converting to a 0-1 range.\nLet’s write a simple function to achieve this:\n\nnormalize &lt;- function(x) {\n  .min &lt;- min(x, na.rm = TRUE)\n  (x - .min) / max(x - .min, na.rm = TRUE)\n}\n\n\nx &lt;- rnorm(20, mean = 13, sd = 1.4)\nx\n\n [1] 12.770468 12.465735 16.012055 13.479437 12.986218 13.120437 13.552462\n [8] 14.670063 15.160900 12.415136 13.046739 13.421280  9.204957 13.617690\n[15] 13.122372 13.437604 11.808112 12.841868 12.875993 13.895773\n\n\n\nx_normalized &lt;- normalize(x)\nx_normalized\n\n [1] 0.19876694 0.80464577 0.42065249 0.31872618 0.10026779 0.34928303\n [7] 0.36507296 0.13168251 0.50925422 0.68403959 0.45534707 1.00000000\n[13] 0.58712524 0.05571725 0.11874613 0.53256784 0.00000000 0.25163201\n[19] 0.31595511 0.45863174\n\nmin(x_normalized)\n\n[1] 0\n\nmax(x_normalized)\n\n[1] 1\n\n\nNote that it is easy to make the normalize() function more general, by adding lo and hi arguments to convert to any range:\n\ndr &lt;- function(x, lo = 0, hi = 1) {\n    .min &lt;- min(x, na.rm = TRUE)\n   (x - .min) / max(x - .min, na.rm = TRUE) * (hi - lo) + lo\n  }\n\n\ndr(x, -1, 1)\n\n [1] -0.60246612  0.60929154 -0.15869503 -0.36254764 -0.79946441 -0.30143394\n [7] -0.26985408 -0.73663497  0.01850844  0.36807918 -0.08930585  1.00000000\n[13]  0.17425049 -0.88856550 -0.76250775  0.06513568 -1.00000000 -0.49673598\n[19] -0.36808978 -0.08273652\n\n\n\n28.1.3 Log-transform with log()\n\nFor the following example, x is an unknown feature in a new dataset we were just given.\nWe start by plotting its distribution:\n\nmplot3_x(x)\n\n\n\n\n\n\n\nWe can see it is skewed right. A log transform can help here:\n\nmplot3_x(log(x))\n\n\n\n\n\n\n\n\n28.1.4 Data binning with cut()\n\nA different approach for the above variable might be to bin it.\nLet’s look at a few different ways to bin continuous data.\n\n28.1.4.1 Evenly-spaced interval\ncut() allows us to bin a numeric variable into evenly-spaced intervals.\nThe breaks argument defines the number of intervals:\n\nx_cut4 &lt;- cut(x, breaks = 4)\nhead(x_cut4)\n\n[1] (0.291,178] (0.291,178] (0.291,178] (0.291,178] (0.291,178] (0.291,178]\nLevels: (0.291,178] (178,355] (355,533] (533,711]\n\ntable(x_cut4)\n\nx_cut4\n(0.291,178]   (178,355]   (355,533]   (533,711] \n        977          19           3           1 \n\n\n\n\n\n\n\n\nImportant\n\n\n\nInterval Notation\n[3, 9) represents the interval of real numbers between 3 and 9, including 3 and excluding 9.\n\n\nBecause the data is so skewed, equal intervals are not helpful in this case. The majority of the data points get grouped into a single bin.\nLet’s visualize the cuts:\n\nxcuts5 &lt;- seq(min(x), max(x), length.out = 5)\nxcuts5\n\n[1]   1.0000 178.2453 355.4905 532.7358 709.9811\n\n\n\nmplot3_x(x, par.reset = FALSE)\n# plot(density(x)) # in base R\nabline(v = xcuts5, col = \"red\", lwd = 1.5)\n\n\n\n\n\n\n\n[Note: We used par.reset = FALSE to stop mplot3_x() from resetting its custom par() settings so that we can continue adding elements to the same plot, in this case with the abline() command.]\n\n28.1.4.2 Quantile cuts\nInstead of evenly-spaced intervals, we can get quantiles with quantile(). We ask for 5 quantiles using the length.out argument, which corresponds to 4 intervals:\n\nxquants5 &lt;- quantile(x, probs = seq(0, 1, length.out = 5))\nmplot3_x(x, par.reset = FALSE)\n# plot(density(x)) # in base R\nabline(v = xquants5, col = \"green\", lwd = 1.5)\n\n\n\n\n\n\n\nThe breaks argument of cut() allows us to pass either an integer to define the number of evenly-spaced breaks, or a numeric vector defining the position of breaks.\nWe can therefore pass the quantile values as break points.\nSince the quantile values begin at the lowest value in the data, we need to define include.lowest = TRUE so that the first interval is inclusive of the lowest value:\n\nx_cutq4 &lt;- cut(x, breaks = xquants5, include.lowest = TRUE)\ntable(x_cutq4)\n\nx_cutq4\n   [1,11.5] (11.5,23.2] (23.2,47.2]  (47.2,710] \n        250         250         250         250 \n\n\nWith quantile cuts, each bin contains roughly the same number of observations (+/- 1).",
    "crumbs": [
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>Data Transformations</span>"
    ]
  },
  {
    "objectID": "DataTrans.html#categorical-variables",
    "href": "DataTrans.html#categorical-variables",
    "title": "28  Data Transformations",
    "section": "\n28.2 Categorical variables",
    "text": "28.2 Categorical variables\nMany algorithms (or their implementations) do not directly support categorical variables. To use them, you must therefore convert all categorical variables to some type of numerical encoding.\n\n28.2.1 Integer encoding\nIf the categorical data is ordinal, you can simply convert it to integers.\nFor example, the following ordered factor:\n\nbrightness &lt;- factor(c(\"bright\", \"brightest\", \"darkest\",\n                        \"bright\", \"dark\", \"dim\", \"dark\"),\n                      levels = c(\"darkest\", \"dark\", \"dim\", \"bright\", \"brightest\"),\n                      ordered = TRUE)\nbrightness\n\n[1] bright    brightest darkest   bright    dark      dim       dark     \nLevels: darkest &lt; dark &lt; dim &lt; bright &lt; brightest\n\n\ncan be directly coerced to an integer:\n\nas.integer(brightness)\n\n[1] 4 5 1 4 2 3 2\n\n\n\n28.2.2 One-hot encoding\nWhen categorical features are not ordinal, and your algorithm cannot handle them directly, you can one-hot encode them. In one-hot encoding, each categorical feature is converted to k binary features, where k = number of unique values in the input, such that only one feature has the value 1 per case. This is similar to creating dummy variables in statistics, with the difference that dummy variables create k - 1 new variables.\n\nset.seed(21)\nadmission_reasons &lt;- c(\"plannedSurgery\", \"emergencySurgery\", \"medical\")\nadmission &lt;- sample(admission_reasons, size = 12, replace = TRUE)\nadmission\n\n [1] \"medical\"          \"plannedSurgery\"   \"medical\"          \"plannedSurgery\"  \n [5] \"emergencySurgery\" \"medical\"          \"plannedSurgery\"   \"medical\"         \n [9] \"medical\"          \"emergencySurgery\" \"emergencySurgery\" \"emergencySurgery\"\n\n\nMultiple packages include functions that perform one-hot encoding. It’s a simple operation and we don’t necessarily need to install a large package with many dependencies.\nLet’s write a simple function to perform one-hot encoding. Note, you may have heard that for loops can be slow in R, but that depends on the operations performed. Here, we loop over an integer matrix and it is plenty fast.\n\nonehot &lt;- function(x, xname = NULL) {\n  if (is.null(xname)) xname &lt;- deparse(substitute(x))\n  x &lt;- factor(x)\n  .levels &lt;- levels(x)      # Get factor levels\n  ncases &lt;- NROW(x)         # Get number of cases\n  index &lt;- as.integer(x)    # Convert levels to integer\n  oh &lt;- matrix(0, nrow = ncases, ncol = length(.levels))  # Initialize zeros matrix\n  colnames(oh) &lt;- paste(xname, .levels, sep = \"_\")  # Name columns by levels\n  for (i in seq(ncases)) oh[i, index[i]] &lt;- 1  # Assign \"1\" to appropriate level\n  oh\n}\n\nLet’s apply our new function to the admission vector:\n\nonehot(admission)\n\n      admission_emergencySurgery admission_medical admission_plannedSurgery\n [1,]                          0                 1                        0\n [2,]                          0                 0                        1\n [3,]                          0                 1                        0\n [4,]                          0                 0                        1\n [5,]                          1                 0                        0\n [6,]                          0                 1                        0\n [7,]                          0                 0                        1\n [8,]                          0                 1                        0\n [9,]                          0                 1                        0\n[10,]                          1                 0                        0\n[11,]                          1                 0                        0\n[12,]                          1                 0                        0\n\n\nNote: deparse(substitute(x)) above is used to automatically get the name of the input object (in this case “admission”). This is similar to how many of R’s internal functions (e.g. plot()) get the names of input objects.",
    "crumbs": [
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>Data Transformations</span>"
    ]
  },
  {
    "objectID": "Strings.html",
    "href": "Strings.html",
    "title": "29  Strings",
    "section": "",
    "text": "29.1 Creating character vectors\n“Strings”, in programming, refer to collections of characters, i.e. text data. In R, text is usually stored as objects of class “character” (See Chapter 8). In statistics/machine learning/data science, we come across text in a few different ways. All the following are character vectors:\nSome important string operations include:\nReminder: To initialize, coerce, test character vectors, use:\nInitialize character vector:\nx &lt;- character(10)\nx\n\n [1] \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\"\nCoerce to character:\nv &lt;- c(10, 20, 22, 43)\nx &lt;- as.character(v)\nx\n\n[1] \"10\" \"20\" \"22\" \"43\"\nTest object is character vector:\nx &lt;- c(\"PID\", \"Age\", \"Sex\", \"Handedness\")\nis.character(x)\n\n[1] TRUE",
    "crumbs": [
      "<span class='chapter-number'>29</span>  <span class='chapter-title'>Strings</span>"
    ]
  },
  {
    "objectID": "Strings.html#creating-character-vectors",
    "href": "Strings.html#creating-character-vectors",
    "title": "29  Strings",
    "section": "",
    "text": "character(): Initialize empty character vector\n\nas.character(): Coerce vector to character vector\n\nis.character(): Test if object is character\n\n\n\n\n\n\n\n\n29.1.1 cat(): Concatenate and print\n\ncat() concatenates its inputs to prints to screen (console) or to file.\ncat() does not return any object. It is therefore useful for producing informative messages in your programs.\nIt can concatenate strings along with the output of expressions:\n\nsbp &lt;- 130\ntemp &lt;- 98.4\ncat(\"The blood pressure was\", sbp, \"and the temperature was\", temp, \"\\n\")\n\nThe blood pressure was 130 and the temperature was 98.4 \n\n\n\nweight &lt;- 74\nheight &lt;- 1.78\ncat(\"The weight is\", weight, \"and the height is\", height, \n    \"giving a BMI of\", signif(weight/height^2, 3), \"\\n\")\n\nThe weight is 74 and the height is 1.78 giving a BMI of 23.4 \n\n\nUse the file argument to write to a text file. The append argument allows using multiple consecutive cat() calls to append to the same file.\n\n\n\n\n\n\nNote\n\n\n\nif you use cat() on a factor, it will print the integer index of the factor levels.\n\n\nIf you wish to print the levels themselves, use as.character() on the factor vector:\n\ncat(head(iris$Species), \"\\n\")\n\n1 1 1 1 1 1 \n\n\n\ncat(as.character(head(iris$Species)), \"\\n\")\n\nsetosa setosa setosa setosa setosa setosa \n\n\n\n29.1.2 paste(): Concatenate character vectors\nIn its simplest form, paste() acts like as.character():\n\nv &lt;- c(10, 20, 22, 43)\npaste(v)\n\n[1] \"10\" \"20\" \"22\" \"43\"\n\n\nBut, its main job is to combine strings.\nIt can combine two or more strings into one:\n\nfirst &lt;- \"Jane\"\nlast &lt;- \"Artiste\"\nID &lt;- \"8001\"\npaste(ID, last, first)\n\n[1] \"8001 Artiste Jane\"\n\n\nThe sep argument defaults to a single space (” “) and defines the separator:\n\npaste(ID, last, first, sep = \" | \")\n\n[1] \"8001 | Artiste | Jane\"\n\n\npaste() is vectorized, which means it can combine character vectors elementwise:\n\nid &lt;- c(\"001\", \"010\", \"018\", \"020\", \"021\", \"051\")\ndept &lt;- c(\"Emergency\", \"Cardiology\", \"Neurology\",\n         \"Anesthesia\", \"Surgery\", \"Psychiatry\")\npaste(id, dept)\n\n[1] \"001 Emergency\"  \"010 Cardiology\" \"018 Neurology\"  \"020 Anesthesia\"\n[5] \"021 Surgery\"    \"051 Psychiatry\"\n\n\npaste0() is an alias for the commonly used paste(..., sep = \"\"):\n\npaste0(id, dept)\n\n[1] \"001Emergency\"  \"010Cardiology\" \"018Neurology\"  \"020Anesthesia\"\n[5] \"021Surgery\"    \"051Psychiatry\"\n\n\nAs with other vectorized operations, value recycling can be very convenient. In the example below, the shorter vector (i.e. “Feature”, a character vector of length 1) is recycled to match the length of the longest vector (1:10).\n\npaste0(\"Feature_\", 1:10)\n\n [1] \"Feature_1\"  \"Feature_2\"  \"Feature_3\"  \"Feature_4\"  \"Feature_5\" \n [6] \"Feature_6\"  \"Feature_7\"  \"Feature_8\"  \"Feature_9\"  \"Feature_10\"\n\n\nThe argument collapse helps output a single character object after combining with some string:\n\npaste0(\"Feature_\", 1:10, collapse = \", \")\n\n[1] \"Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10\"",
    "crumbs": [
      "<span class='chapter-number'>29</span>  <span class='chapter-title'>Strings</span>"
    ]
  },
  {
    "objectID": "Strings.html#common-string-utilities",
    "href": "Strings.html#common-string-utilities",
    "title": "29  Strings",
    "section": "\n29.2 Common string utilities",
    "text": "29.2 Common string utilities\n\n29.2.1 Get number of characters in element with nchar():\nnchar() counts the number of characters in each element of a character vector:\n\nx &lt;- c(\"a\", \"bb\", \"ccc\")\nnchar(x)\n\n[1] 1 2 3\n\n\n\n29.2.2 Extract/replace substring with substr():\nsubstr() allows you to get and set individual (literal) characters from a character vector, by position.\nFor example, extract the first three characters of each character element as:\n\nx &lt;- c(\"001Emergency\", \"010Cardiology\", \"018Neurology\", \n       \"020Anesthesia\", \"021Surgery\", \"051Psychiatry\")\nsubstr(x, start = 1, stop = 3)\n\n[1] \"001\" \"010\" \"018\" \"020\" \"021\" \"051\"\n\n\nNeither start nor stop need to be valid character positions.\nFor example, if you want to get all characters from the fourth one to the last one, you can specify a very large stop as:\n\nsubstr(x, 4, 99)\n\n[1] \"Emergency\"  \"Cardiology\" \"Neurology\"  \"Anesthesia\" \"Surgery\"   \n[6] \"Psychiatry\"\n\n\nIf you start with too high an index, you end up with empty strings:\n\nsubstr(x, 20, 24)\n\n[1] \"\" \"\" \"\" \"\" \"\" \"\"\n\n\nNote: substring() is also available, with similar syntax to substr(): (first, last) instead of (start, stop). It is available for compatibility with S - check its source code to see how it’s an alias for substr().\nTo replace the first three letters, use:\n\nx &lt;- c(\"Jan_1987\")\nx\n\n[1] \"Jan_1987\"\n\n\n\nsubstr(x, 1, 3) &lt;- \"Feb\"\nx\n\n[1] \"Feb_1987\"\n\n\nNote that if the replacement is longer, it is “cropped” to the length of the substring being replaced:\n\nsubstr(x, 1, 3) &lt;- \"April\"\nx\n\n[1] \"Apr_1987\"\n\n\n\n29.2.3 Split strings with strsplit():\nstrsplit() allows you to split a character vector’s elements based on any character or regular expression.\nFor example, extract individual words by splitting a sentence on each space character:\n\nx &lt;- \"This is one sentence\"\nstrsplit(x, \" \")\n\n[[1]]\n[1] \"This\"     \"is\"       \"one\"      \"sentence\"\n\n\n\nx &lt;- \"14,910\"\nstrsplit(x, \",\")\n\n[[1]]\n[1] \"14\"  \"910\"\n\n\nAs with all functions, you can compose multiple string operations in complex ways, and as with all function compositions remember to build and test them step-by-step.\n\nx &lt;- c(\"1,950\", \"2,347\")\nx\n\n[1] \"1,950\" \"2,347\"\n\n\n\nlapply(strsplit(x, \",\"), \\(i) \n  paste(i, c(\"thousand\", \"dollars\"), collapse = \" and \"))\n\n[[1]]\n[1] \"1 thousand and 950 dollars\"\n\n[[2]]\n[1] \"2 thousand and 347 dollars\"",
    "crumbs": [
      "<span class='chapter-number'>29</span>  <span class='chapter-title'>Strings</span>"
    ]
  },
  {
    "objectID": "Strings.html#string-formatting",
    "href": "Strings.html#string-formatting",
    "title": "29  Strings",
    "section": "\n29.3 String formatting",
    "text": "29.3 String formatting\n\n29.3.1 Change case with toupper() and tolower()\n\n\nfeatures &lt;- c(\"id\", \"age\", \"sex\", \"sbp\", \"dbp\", \"hct\", \"urea\", \"creatinine\")\nfeatures\n\n[1] \"id\"         \"age\"        \"sex\"        \"sbp\"        \"dbp\"       \n[6] \"hct\"        \"urea\"       \"creatinine\"\n\n\n\nfeatures_upper &lt;- toupper(features)\nfeatures_upper\n\n[1] \"ID\"         \"AGE\"        \"SEX\"        \"SBP\"        \"DBP\"       \n[6] \"HCT\"        \"UREA\"       \"CREATININE\"\n\n\n\nfeatures_lower &lt;- tolower(features_upper)\nfeatures_lower\n\n[1] \"id\"         \"age\"        \"sex\"        \"sbp\"        \"dbp\"       \n[6] \"hct\"        \"urea\"       \"creatinine\"\n\n\n\n29.3.2 Convert to Title Case\nThe tools package comes with the base R installation, but is not loaded at startup, because it contains rather specialized functions for package development, administration, and documentation. However, it includes the toTitleCase() function, which can be handy for formatting variable names, e.g. before plotting, etc.\n\nfeatures &lt;- c(\"full name\", \"admission type\", \"attending name\", \"date of admission\")\ntools::toTitleCase(features)\n\n[1] \"Full Name\"         \"Admission Type\"    \"Attending Name\"   \n[4] \"Date of Admission\"\n\n\n\n29.3.3 Abbreviate\nabbreviate() allows reducing character vector elements to short, unique abbreviations of a minimum length (defaults to 4). For example,\n\nx &lt;- c(\"Emergency\", \"Cardiology\", \"Surgery\", \"Anesthesia\", \n       \"Neurology\", \"Psychiatry\", \"Clinical Psychology\")\nabbreviate(x)\n\n          Emergency          Cardiology             Surgery          Anesthesia \n             \"Emrg\"              \"Crdl\"              \"Srgr\"              \"Anst\" \n          Neurology          Psychiatry Clinical Psychology \n             \"Nrlg\"              \"Psyc\"              \"ClnP\" \n\nabbreviate(x, minlength = 4)\n\n          Emergency          Cardiology             Surgery          Anesthesia \n             \"Emrg\"              \"Crdl\"              \"Srgr\"              \"Anst\" \n          Neurology          Psychiatry Clinical Psychology \n             \"Nrlg\"              \"Psyc\"              \"ClnP\" \n\nabbreviate(x, minlength = 5)\n\n          Emergency          Cardiology             Surgery          Anesthesia \n            \"Emrgn\"             \"Crdlg\"             \"Srgry\"             \"Ansth\" \n          Neurology          Psychiatry Clinical Psychology \n            \"Nrlgy\"             \"Psych\"             \"ClncP\"",
    "crumbs": [
      "<span class='chapter-number'>29</span>  <span class='chapter-title'>Strings</span>"
    ]
  },
  {
    "objectID": "Strings.html#pattern-matching",
    "href": "Strings.html#pattern-matching",
    "title": "29  Strings",
    "section": "\n29.4 Pattern matching",
    "text": "29.4 Pattern matching\nA very common task in programming is to find +/- replace string patterns in a vector of strings. - grep() and grepl() help find strings that contain a given pattern.\n- sub() and gsub() help find and replace strings.\n\n29.4.1 grep(): Get integer index of elements that match a pattern\n\nx &lt;- c(\"001Age\", \"002Sex\", \"010Temp\", \"014SBP\", \n       \"018Hct\", \"022PFratio\", \"030GCS\", \"112SBP-DBP\")\ngrep(pattern = \"SBP\", x = x)\n\n[1] 4 8\n\n\ngrep()’s value argument, which defaults to FALSE, allows returning the matched string itself (the value of the element) instead of its integer index, e.g.\n\ngrep(\"SBP\", x, value = TRUE)\n\n[1] \"014SBP\"     \"112SBP-DBP\"\n\n\n\n29.4.2 grepl(): Get logical index of elements that match a pattern\ngrepl() is similar to grep(), but returns a logical index:\n\ngrepl(\"SBP\", x)\n\n[1] FALSE FALSE FALSE  TRUE FALSE FALSE FALSE  TRUE\n\n\n\n29.4.3 sub(): Replace first match of a pattern\n\nx &lt;- c(\"The most important variable was PF ratio. Other significant variables are listed \nin the supplementary information.\")\nx\n\n[1] \"The most important variable was PF ratio. Other significant variables are listed \\nin the supplementary information.\"\n\n\n\nsub(pattern = \"variable\", replacement = \"feature\", x = x)\n\n[1] \"The most important feature was PF ratio. Other significant variables are listed \\nin the supplementary information.\"\n\n\nsub() is vectorized and “first match” refers to each element of a character vector:\n\nx &lt;- c(\"var 1, var 2\", \"var 3, var 4\")\nsub(\"var\", \"feat\", x)\n\n[1] \"feat 1, var 2\" \"feat 3, var 4\"\n\n\n\n29.4.4 gsub(): Replace all matches of a pattern\n\nx &lt;- c(\"The most important variable was P/F ratio. Other significant variables are listed in the supplementary information.\")\nx\n\n[1] \"The most important variable was P/F ratio. Other significant variables are listed in the supplementary information.\"\n\n\n\ngsub(pattern = \"variable\", replacement = \"feature\", x = x)\n\n[1] \"The most important feature was P/F ratio. Other significant features are listed in the supplementary information.\"\n\n\n“All matches” means all matches across all elements:\n\nx &lt;- c(\"var 1, var 2\", \"var 3, var 4\")\ngsub(\"var\", \"feat\", x)\n\n[1] \"feat 1, feat 2\" \"feat 3, feat 4\"\n\n\n\n29.4.5 Match one or more patterns\nYou can use a vertical bar (|) in the pattern string to match one of multiple patterns:\n\nx &lt;- c(\"Emergency\", \"Cardiology\", \"Neurology\", \"Anesthesia\", \n       \"Surgery\", \"Psychiatry\")\n\n\ngrep(\"Cardio|Neuro\", x, value = TRUE)\n\n[1] \"Cardiology\" \"Neurology\" \n\n\n\ngrep(\"Emerg|Surg|Anesth\", x, value = TRUE)\n\n[1] \"Emergency\"  \"Anesthesia\" \"Surgery\"",
    "crumbs": [
      "<span class='chapter-number'>29</span>  <span class='chapter-title'>Strings</span>"
    ]
  },
  {
    "objectID": "Strings.html#regex",
    "href": "Strings.html#regex",
    "title": "29  Strings",
    "section": "\n29.5 Regular expressions",
    "text": "29.5 Regular expressions\nRegular expressions allow you to perform flexible pattern matching. For example, you can look for a pattern specifically at the beginning or the end of a word, or for a variable pattern with certain characteristics.  Regular expressions are very powerful and heavily used. They exist in multiple programming languages - with many similarities and some differences in their syntax.  There are many rules in defining regular expressions and they take a little getting used to. You can read the R manual by typing ?base::regex.  Some of the most important rules are listed below:\n\n29.5.1 Match a pattern at the beginning of a line/string with ^ and \\\\&lt;\n\nUse the caret sign ^ in the beginning of a pattern to only match strings that begin with that pattern.\nPattern 012 matches both 2nd and 3rd elements:\n\nx &lt;- c(\"001_xyz_993\", \"012_qwe_764\", \"029_aqw_012\")\nx\n\n[1] \"001_xyz_993\" \"012_qwe_764\" \"029_aqw_012\"\n\ngrep(\"012\", x)\n\n[1] 2 3\n\n\nBy adding ^ or \\\\&lt;, only the 2nd element in our character vector matches:\n\ngrep(\"^012\", x)\n\n[1] 2\n\ngrep(\"\\\\&lt;012\", x)\n\n[1] 2\n\n\n\n29.5.2 Match a pattern at the end of a line/string with $ and \\\\&gt;\n\nThe dollar sign $ is used at the end of a pattern to only match strings which end with this pattern:\n\nx\n\n[1] \"001_xyz_993\" \"012_qwe_764\" \"029_aqw_012\"\n\ngrep(\"012$\", x)\n\n[1] 3\n\ngrep(\"012\\\\&gt;\", x)\n\n[1] 3\n\n\n\nx &lt;- c(\"1one\", \"2one\", \"3two\", \"3three\")\ngrep(\"one$\", x)\n\n[1] 1 2\n\ngrep(\"one\\\\&gt;\", x)\n\n[1] 1 2\n\n\n\n29.5.3 Match any character with .\n\n\ngrep(\"e.X\", c(\"eX\", \"enX\", \"ennX\", \"ennnX\", \"ennnnX\"))\n\n[1] 2\n\n\n\n29.5.4 Match preceding character one or more times with +\n\n\ngrep(\"en+X\", c(\"eX\", \"enX\", \"ennX\", \"ennnX\", \"ennnnX\"))\n\n[1] 2 3 4 5\n\n\n\n29.5.5 Match preceding character n times with {n}\n\n\ngrep(\"en{2}X\", c(\"eX\", \"enX\", \"ennX\", \"ennnX\", \"ennnnX\"))\n\n[1] 3\n\n\n\n29.5.6 Match preceding character n or more times with {n,}\n\n\ngrep(\"en{2,}X\", c(\"eX\", \"enX\", \"ennX\", \"ennnX\", \"ennnnX\"))\n\n[1] 3 4 5\n\n\n\n29.5.7 Match preceding character at least n times and no more than m times with {n,m}\n\n\ngrep(\"en{2,3}X\", c(\"eX\", \"enX\", \"ennX\", \"ennnX\", \"ennnnX\"))\n\n[1] 3 4\n\n\n\n29.5.8 Character classes\nYou can define a set of characters to be matched using square brackets. Any number of the characters in the set will be matched.\nFor example match and replace $ and/or @ with an underscore:\n\nx &lt;- c(\"Feat1$alpha\", \"Feat2$gamma@5\", \"Feat9@zeta2\")\ngsub(\"[$@]\", \"_\", x)\n\n[1] \"Feat1_alpha\"   \"Feat2_gamma_5\" \"Feat9_zeta2\"  \n\n\n\n29.5.8.1 Predefined character classes\nA number of character classes are predefined. Perhaps confusingly, they are themselves surrounded by brackets and to use them as a character class, you need a second set of brackets around them. Some of the most common ones include:\n\n\n[:alnum:]: alphanumeric, i.e. all letters and numbers\n\n[:alpha:]: all letters\n\n[:digit:]: all numbers\n\n[:lower:]: all lowercase letters\n\n[:upper:]: all uppercase letters\n\n[:punct:]: all punctuation characters (! ” # $ % & ’ ( ) * + , - . / : ; &lt; = &gt; ? @ [  ] ^ _ ` { | } ~.)\n\n[:blank:]: all spaces and tabs\n\n[:space:]: all spaces, tabs, newline characters, and some more\n\nLet’s look at some examples using them.\nHere we use [:digit:] to remove all numbers:\n\nx &lt;- c(\"001Emergency\", \"010Cardiology\", \"018Neurology\", \"020Anesthesia\", \n       \"021Surgery\", \"051Psychiatry\")\nx\n\n[1] \"001Emergency\"  \"010Cardiology\" \"018Neurology\"  \"020Anesthesia\"\n[5] \"021Surgery\"    \"051Psychiatry\"\n\ngsub(\"[[:digit:]]\", \"\", x)\n\n[1] \"Emergency\"  \"Cardiology\" \"Neurology\"  \"Anesthesia\" \"Surgery\"   \n[6] \"Psychiatry\"\n\n\nWe can use [:alpha:] to remove all letters instead:\n\ngsub(\"[[:alpha:]]\", \"\", x)\n\n[1] \"001\" \"010\" \"018\" \"020\" \"021\" \"051\"\n\n\nWe can use a caret ^ in the beginning of a character class to match any character not in the character set:\n\nx &lt;- c(\"001$Emergency\", \"010@Cardiology\", \"018*Neurology\", \"020!Anesthesia\", \n       \"021!Surgery\", \"051*Psychiatry\")\ngsub(\"[^[:alnum:]]\", \"_\", x)\n\n[1] \"001_Emergency\"  \"010_Cardiology\" \"018_Neurology\"  \"020_Anesthesia\"\n[5] \"021_Surgery\"    \"051_Psychiatry\"\n\n\n\n29.5.9 Match from multiple character classes\n\nx &lt;- c(\"123#$%alphaBeta\")\ngsub(\"[[:digit:][:punct:]]\", \"\", x)\n\n[1] \"alphaBeta\"\n\n\n\n\n\n\n\n\nNote\n\n\n\nFor more information on regular expressions, start by reading the built-in documentation: ?regex.\n\n\n\n29.5.10 Escaping metacharacters\nMetacharacters are characters that have a special meaning within a regular expression. They include:\n. \\ | ( ) [ { ^ $ * + ?.\nFor example, we have seen above that the period matches any character and the square brackets are used to define character classes If you want to match one of these characters itself, you must “escape” it using a double backslash. Escaping a character simply means “this is not part of a regular expression, match it as is”.  For example, to match a period (.) and replace it with underscores:\n\nx &lt;- c(\"systolic.blood.pressure\", \"diastolic.blood.pressure\")\nx\n\n[1] \"systolic.blood.pressure\"  \"diastolic.blood.pressure\"\n\ngsub(\"\\\\.\", \"_\", x)\n\n[1] \"systolic_blood_pressure\"  \"diastolic_blood_pressure\"\n\n\nIf we didn’t escape the period above, it would have matched any character:\n\ngsub(\".\", \"_\", x)\n\n[1] \"_______________________\"  \"________________________\"\n\n\nAnother example, include an escaped metacharacter within a regular expression. In the example below we want to remove everything up to and including the dollar sign:\n\nx &lt;- c(\"df$ID\", \"df$Age\")\ngsub(\".*\\\\$\", \"\", x)\n\n[1] \"ID\"  \"Age\"\n\n\nOur regular expression .*\\\\$, decomposed:\n\n\n.: match any character\n\n.*: match any character any number of times\n\n.*\\\\$: match any character any number of times till you find a dollar sign\n\nIf we had not escaped the $, it wouldn’t have worked:\n\ngsub(\".*$\", \"\", x)\n\n[1] \"\" \"\"",
    "crumbs": [
      "<span class='chapter-number'>29</span>  <span class='chapter-title'>Strings</span>"
    ]
  },
  {
    "objectID": "DateTime.html",
    "href": "DateTime.html",
    "title": "30  Date and Time",
    "section": "",
    "text": "30.1 Date format specifications\nR includes support for working with date and time data. There are three builtin classes:\nPOSIXct is more efficient and faster than POSIXlt and therefore is the recommended structure for date-time data.\nThe data.table package includes the following classes:\nBackground info: Portable Operating System Interface (POSIX) is a set of standards for maintaining compatibility among operating systems.\nThis list serves as a reference for formatting functions later in the chapter.\nThere are many more specifications available, see the Details section in the documentation for strptime().  Note that some conversions are locale-specific, i.e. will not work the same across systems.  Regarding the ambiguous %y, the documentation states: “%y Year without century (00–99). On input, values 00 to 68 are prefixed by 20 and 69 to 99 by 19 – that is the behaviour specified by the 2018 POSIX standard, but it does also say ‘it is expected that in a future version the default century inferred from a 2-digit year will change’.”",
    "crumbs": [
      "<span class='chapter-number'>30</span>  <span class='chapter-title'>Date and Time</span>"
    ]
  },
  {
    "objectID": "DateTime.html#date-format-specifications",
    "href": "DateTime.html#date-format-specifications",
    "title": "30  Date and Time",
    "section": "",
    "text": "%Y: Year with century, (0-9999 accepted) e.g. 2020\n\n\n%y: 2-digit year, e.g. 22\n\n\n%m: Month, 01-12, e.g. 03\n\n\n%d: Day, 01-31, e.g. 04\n\n\n%H: Hours, 00-23, e.g. 13\n\n\n%I: Hours, 01-12, e.g. 01\n\n\n%M: Minutes, 00-59, e.g. 38\n\n\n%S: Seconds, 00-61 (sic!) allowing for up to two leap seconds, e.g. 54",
    "crumbs": [
      "<span class='chapter-number'>30</span>  <span class='chapter-title'>Date and Time</span>"
    ]
  },
  {
    "objectID": "DateTime.html#date-objects",
    "href": "DateTime.html#date-objects",
    "title": "30  Date and Time",
    "section": "\n30.2 Date objects",
    "text": "30.2 Date objects\n\n30.2.1 Character to Date: as.Date()\n\nYou can create a Date object from a character:\n\nx &lt;- as.Date(\"1981-02-12\")\nx\n\n[1] \"1981-02-12\"\n\nclass(x)\n\n[1] \"Date\"\n\n\nThe tryFormats argument defines which format(s) are recognized.  The default is tryFormats = c(\"%Y-%m-%d\", \"%Y/%m/%d\"), i.e. will recognize dates of the form “2020-11-16” or “2020/11/16”.  Let’s see what happens if a date format is not recognized. Consider the 16th of November, 2021 written as follows:\n\nz &lt;- \"11.09.21\"\n\nResults in an error if passed to as.Date():\n\nzt &lt;- as.Date(z)\n\nError in charToDate(x): character string is not in a standard unambiguous format\n\n\nPassing the appropriate format, will allow the date to be read correctly:\n\nzt &lt;- as.Date(z, tryFormats = \"%m.%d.%y\")\n\nYou can convert to data.table’s IDate class using as.IDate():\n\nlibrary(data.table)\nxi &lt;- as.IDate(\"1981-02-12\")\nxi\n\n[1] \"1981-02-12\"\n\nclass(xi)\n\n[1] \"IDate\" \"Date\" \n\n\nas.IDate() supports extra arguments just like base as.Date(). Using the same example as above, we can specify the same tryFormats argument:\n\nzi &lt;- as.IDate(z, tryFormats = \"%m.%d.%y\")\nzi\n\n[1] \"2021-11-16\"\n\nclass(zi)\n\n[1] \"IDate\" \"Date\" \n\n\n\n\n\n\n\n\nImportant\n\n\n\nIt’s always safest to specify the format of your date string explicitly.\n\n\n\n30.2.2 Get current date & time\nGet current date:\n\ntoday &lt;- Sys.Date()\ntoday\n\n[1] \"2023-11-16\"\n\nclass(today)\n\n[1] \"Date\"\n\n\nGet current date and time:\n\nnow &lt;- Sys.time()\nnow\n\n[1] \"2023-11-16 02:47:14 PST\"\n\nclass(now)\n\n[1] \"POSIXct\" \"POSIXt\" \n\n\nGet local timezone:\n\nSys.timezone()\n\n[1] \"America/Los_Angeles\"\n\n\n\n30.2.3 Math on Dates\n\nThe reason we use special date and date-time classes is because they allow us to perform mathematical operations on them.\n\nFor example, we can subtract date objects to get time intervals:\n\nstart_date &lt;- as.Date(\"2020-09-15\")\ntime_diff &lt;- Sys.Date() - start_date\ntime_diff\n\nTime difference of 1157 days\n\nclass(time_diff)\n\n[1] \"difftime\"\n\n\n\n\n\n\n\n\nImportant\n\n\n\nNote: While you can use the subtraction operator -, it is advised you use the difftime() function to perform subtraction on dates instead, because it allows you to specify units.\n\n\n\ntimepoint1 &lt;- as.Date(\"2020-01-07\")\ntimepoint2 &lt;- as.Date(\"2020-02-03\")\ndifftime(timepoint2, timepoint1, units = \"weeks\")\n\nTime difference of 3.857143 weeks\n\ndifftime(timepoint2, timepoint1, units = \"days\")\n\nTime difference of 27 days\n\ndifftime(timepoint2, timepoint1, units = \"hours\")\n\nTime difference of 648 hours\n\ndifftime(timepoint2, timepoint1, units = \"mins\")\n\nTime difference of 38880 mins\n\ndifftime(timepoint2, timepoint1, units = \"secs\")\n\nTime difference of 2332800 secs\n\n\n\n\n\n\n\n\nTip\n\n\n\nWhy is there no option for “months” or “years” in units?\nBecause, unlike seconds, minutes, hours, days, and weeks, months and years do not have fixed length, i.e. literally a month or a year are not “units” of time.  You can always get a difference in days and divide by 365.2422 or some other approximation.\n\n\n\nDOB &lt;- as.Date(\"1969-08-04\")\nAge &lt;- difftime(Sys.Date(), DOB, units = \"days\")\nAge\n\nTime difference of 19827 days\n\n\ndifftime() outputs objects of class difftime:\n\nclass(Age)\n\n[1] \"difftime\"\n\n\n\n\n\n\n\n\nCaution\n\n\n\nIf you convert the output of difftime() using an appropriate mathematical operation, e.g. division, the units will remain, even though they are no longer correct. Use as.numeric() to convert the difftime object to a regular numeric vector and remove the units which are no longer valid.\n\n\nNote that the units remain after a mathematical operation:\n\nAge &lt;- Age / 365.2422\nAge\n\nTime difference of 54.28453 days\n\n\nEliminate them by converting to numeric:\n\nAge &lt;- as.numeric(difftime(Sys.Date(), DOB, units = \"days\") / 365.2422)\nAge\n\n[1] 54.32012\n\n\n\n30.2.4 mean/median Date\n\nx &lt;- as.Date(c(5480, 5723, 5987, 6992), origin = \"1970-01-01\")\nx\n\n[1] \"1985-01-02\" \"1985-09-02\" \"1986-05-24\" \"1989-02-22\"\n\n\n\nmean_date &lt;- mean(x)\nmean_date\n\n[1] \"1986-07-21\"\n\nclass(mean_date)\n\n[1] \"Date\"\n\n\n\nmedian_date &lt;- median(x)\nmedian_date\n\n[1] \"1986-01-12\"\n\nclass(median_date)\n\n[1] \"Date\"\n\n\nTo verify the median, we can do a mathematical operations using multiplication, subtraction, and addition, and the result is still a Date(!):\n\nmedian_date_too &lt;- x[2] + 0.5 * (x[3] - x[2])\n\n\n30.2.5 Sequence of dates\nYou can create a sequence of dates using seq().\nIf an integer is passed to by, the unit is assumed to be days:\n\nstart_date &lt;- as.Date(\"2020-09-14\")\nend_date &lt;- as.Date(\"2020-12-07\")\nseq(from = start_date, to = end_date, by = 7)\n\n [1] \"2020-09-14\" \"2020-09-21\" \"2020-09-28\" \"2020-10-05\" \"2020-10-12\"\n [6] \"2020-10-19\" \"2020-10-26\" \"2020-11-02\" \"2020-11-09\" \"2020-11-16\"\n[11] \"2020-11-23\" \"2020-11-30\" \"2020-12-07\"\n\n\nUnlike mathematical operations like difftime() which require strict units of time, seq() can work with months and years.\nArgument by can be one of:\n“day”, “week”, “month”, “quarter”, “year”.\nThe above is therefore equivalent to:\n\nseq(from = start_date, to = end_date, by = \"week\")\n\n [1] \"2020-09-14\" \"2020-09-21\" \"2020-09-28\" \"2020-10-05\" \"2020-10-12\"\n [6] \"2020-10-19\" \"2020-10-26\" \"2020-11-02\" \"2020-11-09\" \"2020-11-16\"\n[11] \"2020-11-23\" \"2020-11-30\" \"2020-12-07\"\n\n\nAs with numeric sequences, you can also define the length.out argument:\n\nstart_date &lt;- as.Date(\"2020-01-20\")\nseq(from = start_date, by = \"year\", length.out = 4)\n\n[1] \"2020-01-20\" \"2021-01-20\" \"2022-01-20\" \"2023-01-20\"\n\n\nAn integer can be provided as part of character input to by:\n\nstart_date &lt;- as.Date(\"2020-01-20\")\nend_date &lt;- as.Date(\"2021-01-20\")\nseq(start_date, end_date, by = \"2 months\")\n\n[1] \"2020-01-20\" \"2020-03-20\" \"2020-05-20\" \"2020-07-20\" \"2020-09-20\"\n[6] \"2020-11-20\" \"2021-01-20\"",
    "crumbs": [
      "<span class='chapter-number'>30</span>  <span class='chapter-title'>Date and Time</span>"
    ]
  },
  {
    "objectID": "DateTime.html#date-time-objects",
    "href": "DateTime.html#date-time-objects",
    "title": "30  Date and Time",
    "section": "\n30.3 Date-Time objects",
    "text": "30.3 Date-Time objects\n\n30.3.1 Character to Date-Time: as.POSIXct(), as.POSIXlt():\nAs always, it can be very informative to look at the source code. Many of these functions call each other internally.\nRead strptime()’s documentation for conversion specifications. These define the order and format of characters to be read as year, month, day, hour, minute, and second information.\nFor example, the international ISO 8601 standard is defined as:\"%Y-%m-%d %H:%M:%S\"\n\ndt &lt;- \"2020-03-04 13:38:54\"\ndt\n\n[1] \"2020-03-04 13:38:54\"\n\nclass(dt)\n\n[1] \"character\"\n\n\nUse attributes() to see the difference between the POSIXct and POSIXlt classes:\n\ndt_posixct &lt;- as.POSIXct(dt)\ndt_posixct\n\n[1] \"2020-03-04 13:38:54 PST\"\n\nclass(dt_posixct)\n\n[1] \"POSIXct\" \"POSIXt\" \n\nstr(dt_posixct)\n\n POSIXct[1:1], format: \"2020-03-04 13:38:54\"\n\nattributes(dt_posixct)\n\n$class\n[1] \"POSIXct\" \"POSIXt\" \n\n$tzone\n[1] \"\"\n\n\n\ndt_posixlt &lt;- as.POSIXlt(dt)\ndt_posixlt\n\n[1] \"2020-03-04 13:38:54 PST\"\n\nclass(dt_posixlt)\n\n[1] \"POSIXlt\" \"POSIXt\" \n\nstr(dt_posixlt)\n\n POSIXlt[1:1], format: \"2020-03-04 13:38:54\"\n\ndt_posixlt$year\n\n[1] 120\n\nattributes(dt_posixlt)\n\n$names\n [1] \"sec\"    \"min\"    \"hour\"   \"mday\"   \"mon\"    \"year\"   \"wday\"   \"yday\"  \n [9] \"isdst\"  \"zone\"   \"gmtoff\"\n\n$class\n[1] \"POSIXlt\" \"POSIXt\" \n\n$tzone\n[1] \"\"    \"PST\" \"PDT\"\n\n$balanced\n[1] TRUE\n\n\nYou can compose a large number of combinations of specification to match your data.\n\ndt2 &lt;- c(\"03.04.20 01:38.54 pm\")\ndt2_posix &lt;- as.POSIXct(dt2, format = \"%m.%d.%y %I:%M.%S %p\")\ndt2_posix\n\n[1] \"2020-03-04 13:38:54 PST\"",
    "crumbs": [
      "<span class='chapter-number'>30</span>  <span class='chapter-title'>Date and Time</span>"
    ]
  },
  {
    "objectID": "DateTime.html#format-date",
    "href": "DateTime.html#format-date",
    "title": "30  Date and Time",
    "section": "\n30.4 format() Date",
    "text": "30.4 format() Date\nformat() operates on Date and POSIX objects to convert between representations\nDefine Date in US format:\n\ndt_us &lt;- as.Date(\"07-04-2020\", format = \"%m-%d-%Y\")\ndt_us\n\n[1] \"2020-07-04\"\n\n\nConvert to European format:\n\ndt_eu &lt;- format(dt_us, \"%d.%m.%y\")\ndt_eu\n\n[1] \"04.07.20\"",
    "crumbs": [
      "<span class='chapter-number'>30</span>  <span class='chapter-title'>Date and Time</span>"
    ]
  },
  {
    "objectID": "DateTime.html#format-posixct",
    "href": "DateTime.html#format-posixct",
    "title": "30  Date and Time",
    "section": "\n30.5 format() POSIXct",
    "text": "30.5 format() POSIXct\n\ndt &lt;- as.POSIXct(\"2020-03-04 13:38:54\")\ndt\n\n[1] \"2020-03-04 13:38:54 PST\"\n\n\n\nformat(dt, \"%m/%d/%Y @ %H:%M:%S\")\n\n[1] \"03/04/2020 @ 13:38:54\"\n\n\n\n\n\n\n\n\nTip\n\n\n\nTo get the relevant R documentation pages, use ?format.Date and ?format.POSIXct. To learn more about S3 classes and methods, see Chapter 32.",
    "crumbs": [
      "<span class='chapter-number'>30</span>  <span class='chapter-title'>Date and Time</span>"
    ]
  },
  {
    "objectID": "DateTime.html#extract-partial-date-information",
    "href": "DateTime.html#extract-partial-date-information",
    "title": "30  Date and Time",
    "section": "\n30.6 Extract partial date information",
    "text": "30.6 Extract partial date information\nR includes convenient functions to extract particular seasonal information\n\n\nweekdays(): Get name of day of the week\n\nmonths(): Get name of month\n\nquarters(): Get quarter\n\njulian(): Get number of days since a specific origin\n\n\nx &lt;- as.Date(c(18266, 18299, 18359, 18465), origin = \"1970-01-01\")\nx\n\n[1] \"2020-01-05\" \"2020-02-07\" \"2020-04-07\" \"2020-07-22\"\n\n\n\nweekdays(x)\n\n[1] \"Sunday\"    \"Friday\"    \"Tuesday\"   \"Wednesday\"\n\nmonths(x)\n\n[1] \"January\"  \"February\" \"April\"    \"July\"    \n\nquarters(x)\n\n[1] \"Q1\" \"Q1\" \"Q2\" \"Q3\"\n\njulian(x)\n\n[1] 18266 18299 18359 18465\nattr(,\"origin\")\n[1] \"1970-01-01\"\n\njulian(x, origin = as.Date(\"2020-01-01\"))\n\n[1]   4  37  97 203\nattr(,\"origin\")\n[1] \"2020-01-01\"",
    "crumbs": [
      "<span class='chapter-number'>30</span>  <span class='chapter-title'>Date and Time</span>"
    ]
  },
  {
    "objectID": "DateTime.html#timezones",
    "href": "DateTime.html#timezones",
    "title": "30  Date and Time",
    "section": "\n30.7 Timezones",
    "text": "30.7 Timezones\nR supports timezones. You can see the current timezone using Sys.timezone():\n\nSys.timezone()\n\n[1] \"America/Los_Angeles\"\n\n\nGet current date and time:\n\nnow &lt;- Sys.time()\nnow\n\n[1] \"2023-11-29 22:44:47 PST\"\n\n\nGet a list of all available timezones:\n\nOlsonNames()\n\n  [1] \"Africa/Abidjan\"                   \"Africa/Accra\"                    \n  [3] \"Africa/Addis_Ababa\"               \"Africa/Algiers\"                  \n  [5] \"Africa/Asmara\"                    \"Africa/Asmera\"                   \n  [7] \"Africa/Bamako\"                    \"Africa/Bangui\"                   \n  [9] \"Africa/Banjul\"                    \"Africa/Bissau\"                   \n [11] \"Africa/Blantyre\"                  \"Africa/Brazzaville\"              \n [13] \"Africa/Bujumbura\"                 \"Africa/Cairo\"                    \n [15] \"Africa/Casablanca\"                \"Africa/Ceuta\"                    \n [17] \"Africa/Conakry\"                   \"Africa/Dakar\"                    \n [19] \"Africa/Dar_es_Salaam\"             \"Africa/Djibouti\"                 \n [21] \"Africa/Douala\"                    \"Africa/El_Aaiun\"                 \n [23] \"Africa/Freetown\"                  \"Africa/Gaborone\"                 \n [25] \"Africa/Harare\"                    \"Africa/Johannesburg\"             \n [27] \"Africa/Juba\"                      \"Africa/Kampala\"                  \n [29] \"Africa/Khartoum\"                  \"Africa/Kigali\"                   \n [31] \"Africa/Kinshasa\"                  \"Africa/Lagos\"                    \n [33] \"Africa/Libreville\"                \"Africa/Lome\"                     \n [35] \"Africa/Luanda\"                    \"Africa/Lubumbashi\"               \n [37] \"Africa/Lusaka\"                    \"Africa/Malabo\"                   \n [39] \"Africa/Maputo\"                    \"Africa/Maseru\"                   \n [41] \"Africa/Mbabane\"                   \"Africa/Mogadishu\"                \n [43] \"Africa/Monrovia\"                  \"Africa/Nairobi\"                  \n [45] \"Africa/Ndjamena\"                  \"Africa/Niamey\"                   \n [47] \"Africa/Nouakchott\"                \"Africa/Ouagadougou\"              \n [49] \"Africa/Porto-Novo\"                \"Africa/Sao_Tome\"                 \n [51] \"Africa/Timbuktu\"                  \"Africa/Tripoli\"                  \n [53] \"Africa/Tunis\"                     \"Africa/Windhoek\"                 \n [55] \"America/Adak\"                     \"America/Anchorage\"               \n [57] \"America/Anguilla\"                 \"America/Antigua\"                 \n [59] \"America/Araguaina\"                \"America/Argentina/Buenos_Aires\"  \n [61] \"America/Argentina/Catamarca\"      \"America/Argentina/ComodRivadavia\"\n [63] \"America/Argentina/Cordoba\"        \"America/Argentina/Jujuy\"         \n [65] \"America/Argentina/La_Rioja\"       \"America/Argentina/Mendoza\"       \n [67] \"America/Argentina/Rio_Gallegos\"   \"America/Argentina/Salta\"         \n [69] \"America/Argentina/San_Juan\"       \"America/Argentina/San_Luis\"      \n [71] \"America/Argentina/Tucuman\"        \"America/Argentina/Ushuaia\"       \n [73] \"America/Aruba\"                    \"America/Asuncion\"                \n [75] \"America/Atikokan\"                 \"America/Atka\"                    \n [77] \"America/Bahia\"                    \"America/Bahia_Banderas\"          \n [79] \"America/Barbados\"                 \"America/Belem\"                   \n [81] \"America/Belize\"                   \"America/Blanc-Sablon\"            \n [83] \"America/Boa_Vista\"                \"America/Bogota\"                  \n [85] \"America/Boise\"                    \"America/Buenos_Aires\"            \n [87] \"America/Cambridge_Bay\"            \"America/Campo_Grande\"            \n [89] \"America/Cancun\"                   \"America/Caracas\"                 \n [91] \"America/Catamarca\"                \"America/Cayenne\"                 \n [93] \"America/Cayman\"                   \"America/Chicago\"                 \n [95] \"America/Chihuahua\"                \"America/Ciudad_Juarez\"           \n [97] \"America/Coral_Harbour\"            \"America/Cordoba\"                 \n [99] \"America/Costa_Rica\"               \"America/Creston\"                 \n[101] \"America/Cuiaba\"                   \"America/Curacao\"                 \n[103] \"America/Danmarkshavn\"             \"America/Dawson\"                  \n[105] \"America/Dawson_Creek\"             \"America/Denver\"                  \n[107] \"America/Detroit\"                  \"America/Dominica\"                \n[109] \"America/Edmonton\"                 \"America/Eirunepe\"                \n[111] \"America/El_Salvador\"              \"America/Ensenada\"                \n[113] \"America/Fort_Nelson\"              \"America/Fort_Wayne\"              \n[115] \"America/Fortaleza\"                \"America/Glace_Bay\"               \n[117] \"America/Godthab\"                  \"America/Goose_Bay\"               \n[119] \"America/Grand_Turk\"               \"America/Grenada\"                 \n[121] \"America/Guadeloupe\"               \"America/Guatemala\"               \n[123] \"America/Guayaquil\"                \"America/Guyana\"                  \n[125] \"America/Halifax\"                  \"America/Havana\"                  \n[127] \"America/Hermosillo\"               \"America/Indiana/Indianapolis\"    \n[129] \"America/Indiana/Knox\"             \"America/Indiana/Marengo\"         \n[131] \"America/Indiana/Petersburg\"       \"America/Indiana/Tell_City\"       \n[133] \"America/Indiana/Vevay\"            \"America/Indiana/Vincennes\"       \n[135] \"America/Indiana/Winamac\"          \"America/Indianapolis\"            \n[137] \"America/Inuvik\"                   \"America/Iqaluit\"                 \n[139] \"America/Jamaica\"                  \"America/Jujuy\"                   \n[141] \"America/Juneau\"                   \"America/Kentucky/Louisville\"     \n[143] \"America/Kentucky/Monticello\"      \"America/Knox_IN\"                 \n[145] \"America/Kralendijk\"               \"America/La_Paz\"                  \n[147] \"America/Lima\"                     \"America/Los_Angeles\"             \n[149] \"America/Louisville\"               \"America/Lower_Princes\"           \n[151] \"America/Maceio\"                   \"America/Managua\"                 \n[153] \"America/Manaus\"                   \"America/Marigot\"                 \n[155] \"America/Martinique\"               \"America/Matamoros\"               \n[157] \"America/Mazatlan\"                 \"America/Mendoza\"                 \n[159] \"America/Menominee\"                \"America/Merida\"                  \n[161] \"America/Metlakatla\"               \"America/Mexico_City\"             \n[163] \"America/Miquelon\"                 \"America/Moncton\"                 \n[165] \"America/Monterrey\"                \"America/Montevideo\"              \n[167] \"America/Montreal\"                 \"America/Montserrat\"              \n[169] \"America/Nassau\"                   \"America/New_York\"                \n[171] \"America/Nipigon\"                  \"America/Nome\"                    \n[173] \"America/Noronha\"                  \"America/North_Dakota/Beulah\"     \n[175] \"America/North_Dakota/Center\"      \"America/North_Dakota/New_Salem\"  \n[177] \"America/Nuuk\"                     \"America/Ojinaga\"                 \n[179] \"America/Panama\"                   \"America/Pangnirtung\"             \n[181] \"America/Paramaribo\"               \"America/Phoenix\"                 \n[183] \"America/Port_of_Spain\"            \"America/Port-au-Prince\"          \n[185] \"America/Porto_Acre\"               \"America/Porto_Velho\"             \n[187] \"America/Puerto_Rico\"              \"America/Punta_Arenas\"            \n[189] \"America/Rainy_River\"              \"America/Rankin_Inlet\"            \n[191] \"America/Recife\"                   \"America/Regina\"                  \n[193] \"America/Resolute\"                 \"America/Rio_Branco\"              \n[195] \"America/Rosario\"                  \"America/Santa_Isabel\"            \n[197] \"America/Santarem\"                 \"America/Santiago\"                \n[199] \"America/Santo_Domingo\"            \"America/Sao_Paulo\"               \n[201] \"America/Scoresbysund\"             \"America/Shiprock\"                \n[203] \"America/Sitka\"                    \"America/St_Barthelemy\"           \n[205] \"America/St_Johns\"                 \"America/St_Kitts\"                \n[207] \"America/St_Lucia\"                 \"America/St_Thomas\"               \n[209] \"America/St_Vincent\"               \"America/Swift_Current\"           \n[211] \"America/Tegucigalpa\"              \"America/Thule\"                   \n[213] \"America/Thunder_Bay\"              \"America/Tijuana\"                 \n[215] \"America/Toronto\"                  \"America/Tortola\"                 \n[217] \"America/Vancouver\"                \"America/Virgin\"                  \n[219] \"America/Whitehorse\"               \"America/Winnipeg\"                \n[221] \"America/Yakutat\"                  \"America/Yellowknife\"             \n[223] \"Antarctica/Casey\"                 \"Antarctica/Davis\"                \n[225] \"Antarctica/DumontDUrville\"        \"Antarctica/Macquarie\"            \n[227] \"Antarctica/Mawson\"                \"Antarctica/McMurdo\"              \n[229] \"Antarctica/Palmer\"                \"Antarctica/Rothera\"              \n[231] \"Antarctica/South_Pole\"            \"Antarctica/Syowa\"                \n[233] \"Antarctica/Troll\"                 \"Antarctica/Vostok\"               \n[235] \"Arctic/Longyearbyen\"              \"Asia/Aden\"                       \n[237] \"Asia/Almaty\"                      \"Asia/Amman\"                      \n[239] \"Asia/Anadyr\"                      \"Asia/Aqtau\"                      \n[241] \"Asia/Aqtobe\"                      \"Asia/Ashgabat\"                   \n[243] \"Asia/Ashkhabad\"                   \"Asia/Atyrau\"                     \n[245] \"Asia/Baghdad\"                     \"Asia/Bahrain\"                    \n[247] \"Asia/Baku\"                        \"Asia/Bangkok\"                    \n[249] \"Asia/Barnaul\"                     \"Asia/Beirut\"                     \n[251] \"Asia/Bishkek\"                     \"Asia/Brunei\"                     \n[253] \"Asia/Calcutta\"                    \"Asia/Chita\"                      \n[255] \"Asia/Choibalsan\"                  \"Asia/Chongqing\"                  \n[257] \"Asia/Chungking\"                   \"Asia/Colombo\"                    \n[259] \"Asia/Dacca\"                       \"Asia/Damascus\"                   \n[261] \"Asia/Dhaka\"                       \"Asia/Dili\"                       \n[263] \"Asia/Dubai\"                       \"Asia/Dushanbe\"                   \n[265] \"Asia/Famagusta\"                   \"Asia/Gaza\"                       \n[267] \"Asia/Harbin\"                      \"Asia/Hebron\"                     \n[269] \"Asia/Ho_Chi_Minh\"                 \"Asia/Hong_Kong\"                  \n[271] \"Asia/Hovd\"                        \"Asia/Irkutsk\"                    \n[273] \"Asia/Istanbul\"                    \"Asia/Jakarta\"                    \n[275] \"Asia/Jayapura\"                    \"Asia/Jerusalem\"                  \n[277] \"Asia/Kabul\"                       \"Asia/Kamchatka\"                  \n[279] \"Asia/Karachi\"                     \"Asia/Kashgar\"                    \n[281] \"Asia/Kathmandu\"                   \"Asia/Katmandu\"                   \n[283] \"Asia/Khandyga\"                    \"Asia/Kolkata\"                    \n[285] \"Asia/Krasnoyarsk\"                 \"Asia/Kuala_Lumpur\"               \n[287] \"Asia/Kuching\"                     \"Asia/Kuwait\"                     \n[289] \"Asia/Macao\"                       \"Asia/Macau\"                      \n[291] \"Asia/Magadan\"                     \"Asia/Makassar\"                   \n[293] \"Asia/Manila\"                      \"Asia/Muscat\"                     \n[295] \"Asia/Nicosia\"                     \"Asia/Novokuznetsk\"               \n[297] \"Asia/Novosibirsk\"                 \"Asia/Omsk\"                       \n[299] \"Asia/Oral\"                        \"Asia/Phnom_Penh\"                 \n[301] \"Asia/Pontianak\"                   \"Asia/Pyongyang\"                  \n[303] \"Asia/Qatar\"                       \"Asia/Qostanay\"                   \n[305] \"Asia/Qyzylorda\"                   \"Asia/Rangoon\"                    \n[307] \"Asia/Riyadh\"                      \"Asia/Saigon\"                     \n[309] \"Asia/Sakhalin\"                    \"Asia/Samarkand\"                  \n[311] \"Asia/Seoul\"                       \"Asia/Shanghai\"                   \n[313] \"Asia/Singapore\"                   \"Asia/Srednekolymsk\"              \n[315] \"Asia/Taipei\"                      \"Asia/Tashkent\"                   \n[317] \"Asia/Tbilisi\"                     \"Asia/Tehran\"                     \n[319] \"Asia/Tel_Aviv\"                    \"Asia/Thimbu\"                     \n[321] \"Asia/Thimphu\"                     \"Asia/Tokyo\"                      \n[323] \"Asia/Tomsk\"                       \"Asia/Ujung_Pandang\"              \n[325] \"Asia/Ulaanbaatar\"                 \"Asia/Ulan_Bator\"                 \n[327] \"Asia/Urumqi\"                      \"Asia/Ust-Nera\"                   \n[329] \"Asia/Vientiane\"                   \"Asia/Vladivostok\"                \n[331] \"Asia/Yakutsk\"                     \"Asia/Yangon\"                     \n[333] \"Asia/Yekaterinburg\"               \"Asia/Yerevan\"                    \n[335] \"Atlantic/Azores\"                  \"Atlantic/Bermuda\"                \n[337] \"Atlantic/Canary\"                  \"Atlantic/Cape_Verde\"             \n[339] \"Atlantic/Faeroe\"                  \"Atlantic/Faroe\"                  \n[341] \"Atlantic/Jan_Mayen\"               \"Atlantic/Madeira\"                \n[343] \"Atlantic/Reykjavik\"               \"Atlantic/South_Georgia\"          \n[345] \"Atlantic/St_Helena\"               \"Atlantic/Stanley\"                \n[347] \"Australia/ACT\"                    \"Australia/Adelaide\"              \n[349] \"Australia/Brisbane\"               \"Australia/Broken_Hill\"           \n[351] \"Australia/Canberra\"               \"Australia/Currie\"                \n[353] \"Australia/Darwin\"                 \"Australia/Eucla\"                 \n[355] \"Australia/Hobart\"                 \"Australia/LHI\"                   \n[357] \"Australia/Lindeman\"               \"Australia/Lord_Howe\"             \n[359] \"Australia/Melbourne\"              \"Australia/North\"                 \n[361] \"Australia/NSW\"                    \"Australia/Perth\"                 \n[363] \"Australia/Queensland\"             \"Australia/South\"                 \n[365] \"Australia/Sydney\"                 \"Australia/Tasmania\"              \n[367] \"Australia/Victoria\"               \"Australia/West\"                  \n[369] \"Australia/Yancowinna\"             \"Brazil/Acre\"                     \n[371] \"Brazil/DeNoronha\"                 \"Brazil/East\"                     \n[373] \"Brazil/West\"                      \"Canada/Atlantic\"                 \n[375] \"Canada/Central\"                   \"Canada/Eastern\"                  \n[377] \"Canada/Mountain\"                  \"Canada/Newfoundland\"             \n[379] \"Canada/Pacific\"                   \"Canada/Saskatchewan\"             \n[381] \"Canada/Yukon\"                     \"CET\"                             \n[383] \"Chile/Continental\"                \"Chile/EasterIsland\"              \n[385] \"CST6CDT\"                          \"Cuba\"                            \n[387] \"EET\"                              \"Egypt\"                           \n[389] \"Eire\"                             \"EST\"                             \n[391] \"EST5EDT\"                          \"Etc/GMT\"                         \n[393] \"Etc/GMT-0\"                        \"Etc/GMT-1\"                       \n[395] \"Etc/GMT-10\"                       \"Etc/GMT-11\"                      \n[397] \"Etc/GMT-12\"                       \"Etc/GMT-13\"                      \n[399] \"Etc/GMT-14\"                       \"Etc/GMT-2\"                       \n[401] \"Etc/GMT-3\"                        \"Etc/GMT-4\"                       \n[403] \"Etc/GMT-5\"                        \"Etc/GMT-6\"                       \n[405] \"Etc/GMT-7\"                        \"Etc/GMT-8\"                       \n[407] \"Etc/GMT-9\"                        \"Etc/GMT+0\"                       \n[409] \"Etc/GMT+1\"                        \"Etc/GMT+10\"                      \n[411] \"Etc/GMT+11\"                       \"Etc/GMT+12\"                      \n[413] \"Etc/GMT+2\"                        \"Etc/GMT+3\"                       \n[415] \"Etc/GMT+4\"                        \"Etc/GMT+5\"                       \n[417] \"Etc/GMT+6\"                        \"Etc/GMT+7\"                       \n[419] \"Etc/GMT+8\"                        \"Etc/GMT+9\"                       \n[421] \"Etc/GMT0\"                         \"Etc/Greenwich\"                   \n[423] \"Etc/UCT\"                          \"Etc/Universal\"                   \n[425] \"Etc/UTC\"                          \"Etc/Zulu\"                        \n[427] \"Europe/Amsterdam\"                 \"Europe/Andorra\"                  \n[429] \"Europe/Astrakhan\"                 \"Europe/Athens\"                   \n[431] \"Europe/Belfast\"                   \"Europe/Belgrade\"                 \n[433] \"Europe/Berlin\"                    \"Europe/Bratislava\"               \n[435] \"Europe/Brussels\"                  \"Europe/Bucharest\"                \n[437] \"Europe/Budapest\"                  \"Europe/Busingen\"                 \n[439] \"Europe/Chisinau\"                  \"Europe/Copenhagen\"               \n[441] \"Europe/Dublin\"                    \"Europe/Gibraltar\"                \n[443] \"Europe/Guernsey\"                  \"Europe/Helsinki\"                 \n[445] \"Europe/Isle_of_Man\"               \"Europe/Istanbul\"                 \n[447] \"Europe/Jersey\"                    \"Europe/Kaliningrad\"              \n[449] \"Europe/Kiev\"                      \"Europe/Kirov\"                    \n[451] \"Europe/Kyiv\"                      \"Europe/Lisbon\"                   \n[453] \"Europe/Ljubljana\"                 \"Europe/London\"                   \n[455] \"Europe/Luxembourg\"                \"Europe/Madrid\"                   \n[457] \"Europe/Malta\"                     \"Europe/Mariehamn\"                \n[459] \"Europe/Minsk\"                     \"Europe/Monaco\"                   \n[461] \"Europe/Moscow\"                    \"Europe/Nicosia\"                  \n[463] \"Europe/Oslo\"                      \"Europe/Paris\"                    \n[465] \"Europe/Podgorica\"                 \"Europe/Prague\"                   \n[467] \"Europe/Riga\"                      \"Europe/Rome\"                     \n[469] \"Europe/Samara\"                    \"Europe/San_Marino\"               \n[471] \"Europe/Sarajevo\"                  \"Europe/Saratov\"                  \n[473] \"Europe/Simferopol\"                \"Europe/Skopje\"                   \n[475] \"Europe/Sofia\"                     \"Europe/Stockholm\"                \n[477] \"Europe/Tallinn\"                   \"Europe/Tirane\"                   \n[479] \"Europe/Tiraspol\"                  \"Europe/Ulyanovsk\"                \n[481] \"Europe/Uzhgorod\"                  \"Europe/Vaduz\"                    \n[483] \"Europe/Vatican\"                   \"Europe/Vienna\"                   \n[485] \"Europe/Vilnius\"                   \"Europe/Volgograd\"                \n[487] \"Europe/Warsaw\"                    \"Europe/Zagreb\"                   \n[489] \"Europe/Zaporozhye\"                \"Europe/Zurich\"                   \n[491] \"GB\"                               \"GB-Eire\"                         \n[493] \"GMT\"                              \"GMT-0\"                           \n[495] \"GMT+0\"                            \"GMT0\"                            \n[497] \"Greenwich\"                        \"Hongkong\"                        \n[499] \"HST\"                              \"Iceland\"                         \n[501] \"Indian/Antananarivo\"              \"Indian/Chagos\"                   \n[503] \"Indian/Christmas\"                 \"Indian/Cocos\"                    \n[505] \"Indian/Comoro\"                    \"Indian/Kerguelen\"                \n[507] \"Indian/Mahe\"                      \"Indian/Maldives\"                 \n[509] \"Indian/Mauritius\"                 \"Indian/Mayotte\"                  \n[511] \"Indian/Reunion\"                   \"Iran\"                            \n[513] \"Israel\"                           \"Jamaica\"                         \n[515] \"Japan\"                            \"Kwajalein\"                       \n[517] \"Libya\"                            \"MET\"                             \n[519] \"Mexico/BajaNorte\"                 \"Mexico/BajaSur\"                  \n[521] \"Mexico/General\"                   \"MST\"                             \n[523] \"MST7MDT\"                          \"Navajo\"                          \n[525] \"NZ\"                               \"NZ-CHAT\"                         \n[527] \"Pacific/Apia\"                     \"Pacific/Auckland\"                \n[529] \"Pacific/Bougainville\"             \"Pacific/Chatham\"                 \n[531] \"Pacific/Chuuk\"                    \"Pacific/Easter\"                  \n[533] \"Pacific/Efate\"                    \"Pacific/Enderbury\"               \n[535] \"Pacific/Fakaofo\"                  \"Pacific/Fiji\"                    \n[537] \"Pacific/Funafuti\"                 \"Pacific/Galapagos\"               \n[539] \"Pacific/Gambier\"                  \"Pacific/Guadalcanal\"             \n[541] \"Pacific/Guam\"                     \"Pacific/Honolulu\"                \n[543] \"Pacific/Johnston\"                 \"Pacific/Kanton\"                  \n[545] \"Pacific/Kiritimati\"               \"Pacific/Kosrae\"                  \n[547] \"Pacific/Kwajalein\"                \"Pacific/Majuro\"                  \n[549] \"Pacific/Marquesas\"                \"Pacific/Midway\"                  \n[551] \"Pacific/Nauru\"                    \"Pacific/Niue\"                    \n[553] \"Pacific/Norfolk\"                  \"Pacific/Noumea\"                  \n[555] \"Pacific/Pago_Pago\"                \"Pacific/Palau\"                   \n[557] \"Pacific/Pitcairn\"                 \"Pacific/Pohnpei\"                 \n[559] \"Pacific/Ponape\"                   \"Pacific/Port_Moresby\"            \n[561] \"Pacific/Rarotonga\"                \"Pacific/Saipan\"                  \n[563] \"Pacific/Samoa\"                    \"Pacific/Tahiti\"                  \n[565] \"Pacific/Tarawa\"                   \"Pacific/Tongatapu\"               \n[567] \"Pacific/Truk\"                     \"Pacific/Wake\"                    \n[569] \"Pacific/Wallis\"                   \"Pacific/Yap\"                     \n[571] \"Poland\"                           \"Portugal\"                        \n[573] \"PRC\"                              \"PST8PDT\"                         \n[575] \"ROC\"                              \"ROK\"                             \n[577] \"Singapore\"                        \"Turkey\"                          \n[579] \"UCT\"                              \"Universal\"                       \n[581] \"US/Alaska\"                        \"US/Aleutian\"                     \n[583] \"US/Arizona\"                       \"US/Central\"                      \n[585] \"US/East-Indiana\"                  \"US/Eastern\"                      \n[587] \"US/Hawaii\"                        \"US/Indiana-Starke\"               \n[589] \"US/Michigan\"                      \"US/Mountain\"                     \n[591] \"US/Pacific\"                       \"US/Samoa\"                        \n[593] \"UTC\"                              \"W-SU\"                            \n[595] \"WET\"                              \"Zulu\"                            \nattr(,\"Version\")\n[1] \"2023c\"\n\n\nSet to a different timezone:\n\nSys.setenv(TZ = \"America/New_York\")\n\nNote how setting the timezone changes how the date and time are printed:\n\nnow\n\n[1] \"2023-11-30 01:44:47 EST\"\n\n\nUse format()’s tz argument to convert date & time to different timezones.\n\nformat(now, tz = \"Europe/London\")\n\n[1] \"2023-11-30 06:44:47\"\n\nformat(now, tz = \"Africa/Nairobi\")\n\n[1] \"2023-11-30 09:44:47\"\n\nformat(now, tz = \"Asia/Tokyo\")\n\n[1] \"2023-11-30 15:44:47\"\n\nformat(now, tz = \"Australia/Sydney\")\n\n[1] \"2023-11-30 17:44:47\"\n\n\nNote that the output of format() is not POSIXct or POSIXlt, but a character:\n\nclass(now)\n\n[1] \"POSIXct\" \"POSIXt\" \n\nclass(format(now, tz = \"Europe/London\"))\n\n[1] \"character\"\n\n\nThe timezone is not part of the POSIXct object itself:\n\nattributes(now)\n\n$class\n[1] \"POSIXct\" \"POSIXt\" \n\n\nThe print() method for datetime objects calls format() internally.",
    "crumbs": [
      "<span class='chapter-number'>30</span>  <span class='chapter-title'>Date and Time</span>"
    ]
  },
  {
    "objectID": "DateTime.html#see-also",
    "href": "DateTime.html#see-also",
    "title": "30  Date and Time",
    "section": "\n30.8 See also",
    "text": "30.8 See also\n\nHandling Dates with lubridate",
    "crumbs": [
      "<span class='chapter-number'>30</span>  <span class='chapter-title'>Date and Time</span>"
    ]
  },
  {
    "objectID": "SetOps.html",
    "href": "SetOps.html",
    "title": "\n31  Set Operations\n",
    "section": "",
    "text": "31.1 Set Union\nR includes set operations that can be used on vectors of any type. It does not include a dedicated set class. The inputs to set operations should be of the same mode.\nunion(x, y)\n\n[1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\"",
    "crumbs": [
      "<span class='chapter-number'>31</span>  <span class='chapter-title'>Set Operations</span>"
    ]
  },
  {
    "objectID": "SetOps.html#set-intersection",
    "href": "SetOps.html#set-intersection",
    "title": "\n31  Set Operations\n",
    "section": "\n31.2 Set Intersection",
    "text": "31.2 Set Intersection\n\nintersect(x, y)\n\n[1] \"c\" \"d\"",
    "crumbs": [
      "<span class='chapter-number'>31</span>  <span class='chapter-title'>Set Operations</span>"
    ]
  },
  {
    "objectID": "SetOps.html#set-difference",
    "href": "SetOps.html#set-difference",
    "title": "\n31  Set Operations\n",
    "section": "\n31.3 Set difference",
    "text": "31.3 Set difference\nR’s setdiff() returns the asymmetric set difference between two vectors.\nsetdiff(x, y) will return elements in x not present in y:\n\nsetdiff(x, y)\n\n[1] \"a\" \"b\"\n\n\n\nsetdiff(y, x)\n\n[1] \"e\" \"f\"",
    "crumbs": [
      "<span class='chapter-number'>31</span>  <span class='chapter-title'>Set Operations</span>"
    ]
  },
  {
    "objectID": "SetOps.html#test-set-equality",
    "href": "SetOps.html#test-set-equality",
    "title": "\n31  Set Operations\n",
    "section": "\n31.4 Test set equality",
    "text": "31.4 Test set equality\n\nsetequal(x, y)\n\n[1] FALSE\n\n\n\nsetequal(c(1, 3, 5), c(3, 5, 1))\n\n[1] TRUE",
    "crumbs": [
      "<span class='chapter-number'>31</span>  <span class='chapter-title'>Set Operations</span>"
    ]
  },
  {
    "objectID": "SetOps.html#test-if-a-value-is-element-of-a-set",
    "href": "SetOps.html#test-if-a-value-is-element-of-a-set",
    "title": "\n31  Set Operations\n",
    "section": "\n31.5 Test if a value is element of a set",
    "text": "31.5 Test if a value is element of a set\n\nis.element(\"b\", x)\n\n[1] TRUE\n\n\nis the same as:\n\n\"b\" %in% x\n\n[1] TRUE",
    "crumbs": [
      "<span class='chapter-number'>31</span>  <span class='chapter-title'>Set Operations</span>"
    ]
  },
  {
    "objectID": "ClassesAndOOP.html",
    "href": "ClassesAndOOP.html",
    "title": "32  Classes and OOP",
    "section": "",
    "text": "32.1 S3\nObject-Oriented Programming (OOP) is a programming paradigm built around objects with associated data, known as attributes, and functions, known as methods.\nThere are 4 main class systems in R:\nS3 and S4 methods are part of generic functions. RC and R6 methods are part of the object, but you can (and should) write generic functions for them as well.\nThis chapter will focus on the ubiquitous S3 system. For more advanced, and real OOP applications, we recommend looking into the R6 system.\nMost R objects we have been using so far are S3 objects. Data frames are some of the most common S3 objects.\nGeneric functions are functions that act differently based on the class of the input object. We have already used many of them. For example, summary() works differently on a data.frame, on a factor, or a glm object, etc.\nGeneric functions in R are saved as functionname.classname() and called automatically, based on the class of the first argument. This allows the same function, e.g. print(), summary(), c(), to have a different effect on objects of different classes. For example, the print() function applied on a data frame, will automatically call print.data.frame(), while applied on a factor, it will call print.factor().\nThis means that when you type print(iris) this calls print.data.frame(iris).  Note how the R documentation lists usage information separately for each S3 method, e.g. ## S3 method for class 'factor'.",
    "crumbs": [
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>Classes and OOP</span>"
    ]
  },
  {
    "objectID": "ClassesAndOOP.html#s3",
    "href": "ClassesAndOOP.html#s3",
    "title": "32  Classes and OOP",
    "section": "",
    "text": "32.1.1 methods()\n\nTo get a list of all available methods defined for a specific class,\ni.e. “What functions can I use on this object?”\n\nmethods(class = \"data.frame\")\n\n [1] [             [[            [[&lt;-          [&lt;-           $&lt;-          \n [6] aggregate     anyDuplicated anyNA         as.data.frame as.list      \n[11] as.matrix     as.vector     by            cbind         coerce       \n[16] dim           dimnames      dimnames&lt;-    droplevels    duplicated   \n[21] edit          format        formula       head          initialize   \n[26] is.na         Math          merge         na.exclude    na.omit      \n[31] Ops           plot          print         prompt        rbind        \n[36] row.names     row.names&lt;-   rowsum        show          slotsFromS3  \n[41] split         split&lt;-       stack         str           subset       \n[46] summary       Summary       t             tail          transform    \n[51] type.convert  unique        unstack       within        xtfrm        \nsee '?methods' for accessing help and source code\n\n\nConversely, to get a list of all available methods for a generic function, i.e. “What objects can I use this function on?”\n\nmethods(generic.function = \"plot\")\n\n [1] plot.acf*           plot.data.frame*    plot.decomposed.ts*\n [4] plot.default        plot.dendrogram*    plot.density*      \n [7] plot.ecdf           plot.factor*        plot.formula*      \n[10] plot.function       plot.hclust*        plot.histogram*    \n[13] plot.HoltWinters*   plot.isoreg*        plot.lm*           \n[16] plot.medpolish*     plot.mlm*           plot.ppr*          \n[19] plot.prcomp*        plot.princomp*      plot.profile.nls*  \n[22] plot.raster*        plot.spec*          plot.stepfun       \n[25] plot.stl*           plot.table*         plot.ts            \n[28] plot.tskernel*      plot.TukeyHSD*     \nsee '?methods' for accessing help and source code\n\n\n\n32.1.2 Defining custom S3 classes\nIt very simple to assign an object to a new class.\nThere is no formal class definition, an object is directly assigned to a class by name. An object can belong to multiple classes:\n\nx &lt;- rnorm(500)\nclass(x) &lt;- c(\"specialvector\", \"numeric\")\nclass(x)\n\n[1] \"specialvector\" \"numeric\"      \n\n\nThe hierarchy of classes goes left to right, meaning that generic methods are searched for classes in the order they appear in the output of class().\nIf we print x, since there is no print method for class specialvector or for numeric, the default print.default() command is automatically called:\n\nprint(x)\n\n  [1]  1.888719017  0.097097656  0.694888321  0.072377928 -0.497907130\n  [6] -0.963478848  1.945085126  0.898447437  0.515390517  2.302865871\n [11] -2.242245260 -1.279759205 -0.583887328 -0.967922802 -1.089577060\n [16]  0.869694816  0.846009016  1.876821940 -1.524111809  1.439032407\n [21] -0.398127484  1.308328220 -0.703791005 -1.442178727  0.500797958\n [26] -1.035910654  0.219342949  1.085511067 -0.407612853  1.677908656\n [31] -0.599957455  1.431962247  0.865893982 -0.918668598 -0.333356254\n [36] -0.506774370 -1.301539247 -0.083430900  0.999780796 -0.452059487\n [41]  2.350073630  0.868283906 -2.919772421 -0.606799133 -0.251386770\n [46]  0.097164944 -0.649528507 -0.250702832  1.170758553 -0.143485168\n [51] -0.649504408 -1.481641736  0.508557423  0.729487808  1.187005929\n [56] -0.540462753  2.602901917 -1.072362853  0.555269006 -0.618126682\n [61] -0.309636782  0.134467835  2.265552843  0.243738962 -0.321611531\n [66] -1.664585522 -1.208026320 -0.223819939 -0.236047059  1.301440515\n [71]  0.618060156  1.105629273 -1.368480636  1.716102126 -0.395680392\n [76] -0.071566694  0.950265872  1.611675820 -1.048867645  0.977930720\n [81] -0.282343475 -1.901756679  1.056641459 -1.106850948  0.556934615\n [86]  0.162788958  0.045349517 -1.075163065 -0.279808683 -0.379805320\n [91] -0.537564718  0.424279639  2.186101018 -1.811633119  1.087184490\n [96]  0.793088008 -0.849708581 -0.361942058 -1.533768847 -1.236061402\n[101] -0.270079856  1.187761831  0.340570473 -0.137981531  1.358011032\n[106] -0.750176190  0.209266222 -0.227688580 -1.475535856  0.084068631\n[111] -0.856426667  0.453994178 -0.452953162 -0.508845374  0.203397047\n[116]  0.649616376 -0.752516622 -1.106775612 -0.990907485 -0.396536687\n[121]  0.109523288  0.012058814 -0.453786208  0.248090928  3.411106770\n[126]  2.924075360  0.631612825  0.351028112 -0.310088990 -2.308941754\n[131]  0.016051795  0.140731891  0.508223448 -0.466316935 -0.322001159\n[136]  1.274349831  1.742058688 -2.440178231  0.602354967  1.906101154\n[141]  0.243900187 -1.159940705 -0.235946047 -1.579460854  0.563077584\n[146]  0.590912873  0.432831465  0.464395299  1.595218417 -1.084504898\n[151] -0.575994774 -0.212329904  0.561013058  1.513045966 -2.901256662\n[156]  0.236783736  0.247433215 -1.104650845 -0.408174668 -0.703644693\n[161]  0.825383197  0.043397545  0.011773235  1.246213047  0.329161199\n[166] -0.999610336 -1.335542268 -1.956449691  0.862460652 -1.043043477\n[171]  0.691613983 -0.427390926  0.984915460  0.139843610 -1.292790293\n[176]  0.221488927  0.856045922 -0.049940025  2.017395058  0.550238231\n[181] -0.106344015 -0.811813620  1.257597303 -0.140872278 -0.743587100\n[186] -0.125836290 -0.311931640  0.415486471 -0.137360537 -0.205817083\n[191]  1.866196280  0.650413365 -0.447484092  0.606259902 -0.044509915\n[196] -1.061025452  0.212830127 -1.623002913  0.329449139 -1.757995129\n[201] -0.190038962  1.305626010 -0.688977648 -0.153763834  0.420199767\n[206] -1.140837378 -0.416399540 -0.262825846 -1.126712109 -0.348930869\n[211] -0.851698668 -0.631107561 -0.697900522  1.049461405  1.387041666\n[216]  0.942548017 -0.233915800 -1.774481705  0.569458580 -2.075914812\n[221] -0.136130452 -0.383015062 -0.603570948 -0.264192733 -2.013528057\n[226] -0.795864360 -0.799341770 -3.102640487 -0.009318856  1.312464835\n[231]  0.410147399  1.302487588  0.671768470 -0.107125669  0.327951678\n[236] -1.305653615 -0.120070946  0.569516594 -0.112249452 -1.052867332\n[241]  0.734137183  1.182637857 -0.942939423 -0.313163674  0.405513765\n[246]  0.338090993 -1.466428602 -1.584924605 -0.455539401 -1.475671715\n[251] -0.029305168  0.277414064 -1.585323504 -0.043374523  1.393887795\n[256] -0.671366403 -1.058536799 -0.097393476  0.308186911 -0.932942560\n[261] -0.001947657  0.551896080  1.080014744  0.210080852 -0.516869808\n[266]  0.597855597  1.439218082  2.566123952 -0.139659043 -0.964438341\n[271]  0.939401719 -0.599078325 -0.520855987 -0.313126961  0.949284730\n[276]  0.530048786 -0.211091113 -0.251527600 -1.327958268  0.463554220\n[281]  1.040760627 -0.254002573 -0.872515549 -1.351105024 -1.064915043\n[286]  0.834266103 -0.650261791 -0.121939200 -1.531486182 -2.040679939\n[291] -0.485136508  1.793857876 -0.100831178  0.197539762  0.164575556\n[296] -0.562449174 -1.145785998  1.822383383  0.196696988 -0.515542278\n[301] -0.538681511  0.595565954 -1.157056656 -0.927937658 -0.739126324\n[306] -1.647481423  0.929855991 -0.662239826  1.794604746  0.039174529\n[311] -0.337659923  0.980501620  0.685868568  0.966673868  0.151686399\n[316]  0.837460568  0.668583786 -1.095257827  0.569940979 -1.796854551\n[321] -1.805234540 -0.680659131  1.718701374  1.119271856  0.256078198\n[326]  1.071699022 -1.216394170  0.891814258 -0.393721532 -0.894893115\n[331]  0.041732493 -0.525159072 -0.288259827 -0.662641201  1.398287929\n[336]  0.381201040 -0.012910825 -0.136455397  1.507650735 -0.890770796\n[341]  0.150524004 -1.478292765 -0.953320625  0.007469124 -0.222412081\n[346] -0.369027650 -0.340957569  1.045530042 -0.268114901  0.076332385\n[351] -0.775765764  0.198095287  3.849825076  0.425579511  0.609997386\n[356] -0.043300400  1.907814288  0.028129459  1.907043377  2.518013534\n[361] -0.417457530 -0.099604775  1.917888239 -2.465559417 -0.933942683\n[366] -0.396749872 -0.297783000 -0.823082006  0.221755793 -0.260121325\n[371]  0.770712404 -0.875530693 -1.448220441  0.747984217 -0.713218596\n[376]  1.745341879  0.683691640 -0.482598135  0.788042890  0.031669662\n[381]  0.488276429  0.225743373 -0.140241509  1.227888418 -0.088444487\n[386] -1.682769914  0.107432101  1.557901612 -0.231538521 -0.915386645\n[391] -1.669801738  0.587608864 -0.823873532 -0.551904874  0.717795708\n[396]  0.479611367  0.875972981 -1.093955320  0.795697414  0.700108129\n[401]  0.186424160 -1.267843163  2.252353341  1.112569804  0.877789358\n[406]  1.457708491 -1.179410793 -0.047401638 -1.240315693  0.354213302\n[411]  0.941336380 -0.694991681  0.411634750 -0.768547015  0.662565419\n[416] -0.061829889 -0.812306592 -1.821231939  0.848493949  1.815592263\n[421] -1.366648505 -0.926346802 -0.489977313 -0.443625228 -1.202150347\n[426]  1.953136087 -1.594888598  0.366225348  1.187669756  0.008506154\n[431]  0.450328047  0.024157854 -0.606799600  2.818949809 -0.144273033\n[436] -1.769912911  0.542159388 -1.181933147 -1.000300650  1.322710087\n[441]  0.016574602 -1.175823772  0.616461479 -0.817208162 -1.144415076\n[446]  0.039484307  1.042007036 -0.206650105 -0.594844876 -0.893572906\n[451]  0.049787264  1.115586836  0.079503577  0.476245600 -0.045242013\n[456] -0.573456802 -0.214194339 -0.151564644  0.036140610 -0.454572067\n[461] -0.084356405  0.785101478 -0.198167467  0.047375251 -0.522875850\n[466]  0.316202133 -0.109321800 -0.155363965 -0.354693773  0.243650332\n[471]  0.605715978  0.531615327  0.131997963 -0.653961268 -1.646040468\n[476] -0.346129863  0.545413837  0.367103234  2.876650981 -0.584468699\n[481] -0.694200186  1.055826941 -0.231121300  0.207498942 -1.207073774\n[486] -0.184573318 -1.253408244 -0.831472224  0.073845745 -1.256317111\n[491] -0.293008750  0.702482852 -0.831577335  1.735635518 -0.232380057\n[496]  0.796251691  0.293554606 -0.743572118  2.674118971 -0.072190927\nattr(,\"class\")\n[1] \"specialvector\" \"numeric\"      \n\nprint.default(x)\n\n  [1]  1.888719017  0.097097656  0.694888321  0.072377928 -0.497907130\n  [6] -0.963478848  1.945085126  0.898447437  0.515390517  2.302865871\n [11] -2.242245260 -1.279759205 -0.583887328 -0.967922802 -1.089577060\n [16]  0.869694816  0.846009016  1.876821940 -1.524111809  1.439032407\n [21] -0.398127484  1.308328220 -0.703791005 -1.442178727  0.500797958\n [26] -1.035910654  0.219342949  1.085511067 -0.407612853  1.677908656\n [31] -0.599957455  1.431962247  0.865893982 -0.918668598 -0.333356254\n [36] -0.506774370 -1.301539247 -0.083430900  0.999780796 -0.452059487\n [41]  2.350073630  0.868283906 -2.919772421 -0.606799133 -0.251386770\n [46]  0.097164944 -0.649528507 -0.250702832  1.170758553 -0.143485168\n [51] -0.649504408 -1.481641736  0.508557423  0.729487808  1.187005929\n [56] -0.540462753  2.602901917 -1.072362853  0.555269006 -0.618126682\n [61] -0.309636782  0.134467835  2.265552843  0.243738962 -0.321611531\n [66] -1.664585522 -1.208026320 -0.223819939 -0.236047059  1.301440515\n [71]  0.618060156  1.105629273 -1.368480636  1.716102126 -0.395680392\n [76] -0.071566694  0.950265872  1.611675820 -1.048867645  0.977930720\n [81] -0.282343475 -1.901756679  1.056641459 -1.106850948  0.556934615\n [86]  0.162788958  0.045349517 -1.075163065 -0.279808683 -0.379805320\n [91] -0.537564718  0.424279639  2.186101018 -1.811633119  1.087184490\n [96]  0.793088008 -0.849708581 -0.361942058 -1.533768847 -1.236061402\n[101] -0.270079856  1.187761831  0.340570473 -0.137981531  1.358011032\n[106] -0.750176190  0.209266222 -0.227688580 -1.475535856  0.084068631\n[111] -0.856426667  0.453994178 -0.452953162 -0.508845374  0.203397047\n[116]  0.649616376 -0.752516622 -1.106775612 -0.990907485 -0.396536687\n[121]  0.109523288  0.012058814 -0.453786208  0.248090928  3.411106770\n[126]  2.924075360  0.631612825  0.351028112 -0.310088990 -2.308941754\n[131]  0.016051795  0.140731891  0.508223448 -0.466316935 -0.322001159\n[136]  1.274349831  1.742058688 -2.440178231  0.602354967  1.906101154\n[141]  0.243900187 -1.159940705 -0.235946047 -1.579460854  0.563077584\n[146]  0.590912873  0.432831465  0.464395299  1.595218417 -1.084504898\n[151] -0.575994774 -0.212329904  0.561013058  1.513045966 -2.901256662\n[156]  0.236783736  0.247433215 -1.104650845 -0.408174668 -0.703644693\n[161]  0.825383197  0.043397545  0.011773235  1.246213047  0.329161199\n[166] -0.999610336 -1.335542268 -1.956449691  0.862460652 -1.043043477\n[171]  0.691613983 -0.427390926  0.984915460  0.139843610 -1.292790293\n[176]  0.221488927  0.856045922 -0.049940025  2.017395058  0.550238231\n[181] -0.106344015 -0.811813620  1.257597303 -0.140872278 -0.743587100\n[186] -0.125836290 -0.311931640  0.415486471 -0.137360537 -0.205817083\n[191]  1.866196280  0.650413365 -0.447484092  0.606259902 -0.044509915\n[196] -1.061025452  0.212830127 -1.623002913  0.329449139 -1.757995129\n[201] -0.190038962  1.305626010 -0.688977648 -0.153763834  0.420199767\n[206] -1.140837378 -0.416399540 -0.262825846 -1.126712109 -0.348930869\n[211] -0.851698668 -0.631107561 -0.697900522  1.049461405  1.387041666\n[216]  0.942548017 -0.233915800 -1.774481705  0.569458580 -2.075914812\n[221] -0.136130452 -0.383015062 -0.603570948 -0.264192733 -2.013528057\n[226] -0.795864360 -0.799341770 -3.102640487 -0.009318856  1.312464835\n[231]  0.410147399  1.302487588  0.671768470 -0.107125669  0.327951678\n[236] -1.305653615 -0.120070946  0.569516594 -0.112249452 -1.052867332\n[241]  0.734137183  1.182637857 -0.942939423 -0.313163674  0.405513765\n[246]  0.338090993 -1.466428602 -1.584924605 -0.455539401 -1.475671715\n[251] -0.029305168  0.277414064 -1.585323504 -0.043374523  1.393887795\n[256] -0.671366403 -1.058536799 -0.097393476  0.308186911 -0.932942560\n[261] -0.001947657  0.551896080  1.080014744  0.210080852 -0.516869808\n[266]  0.597855597  1.439218082  2.566123952 -0.139659043 -0.964438341\n[271]  0.939401719 -0.599078325 -0.520855987 -0.313126961  0.949284730\n[276]  0.530048786 -0.211091113 -0.251527600 -1.327958268  0.463554220\n[281]  1.040760627 -0.254002573 -0.872515549 -1.351105024 -1.064915043\n[286]  0.834266103 -0.650261791 -0.121939200 -1.531486182 -2.040679939\n[291] -0.485136508  1.793857876 -0.100831178  0.197539762  0.164575556\n[296] -0.562449174 -1.145785998  1.822383383  0.196696988 -0.515542278\n[301] -0.538681511  0.595565954 -1.157056656 -0.927937658 -0.739126324\n[306] -1.647481423  0.929855991 -0.662239826  1.794604746  0.039174529\n[311] -0.337659923  0.980501620  0.685868568  0.966673868  0.151686399\n[316]  0.837460568  0.668583786 -1.095257827  0.569940979 -1.796854551\n[321] -1.805234540 -0.680659131  1.718701374  1.119271856  0.256078198\n[326]  1.071699022 -1.216394170  0.891814258 -0.393721532 -0.894893115\n[331]  0.041732493 -0.525159072 -0.288259827 -0.662641201  1.398287929\n[336]  0.381201040 -0.012910825 -0.136455397  1.507650735 -0.890770796\n[341]  0.150524004 -1.478292765 -0.953320625  0.007469124 -0.222412081\n[346] -0.369027650 -0.340957569  1.045530042 -0.268114901  0.076332385\n[351] -0.775765764  0.198095287  3.849825076  0.425579511  0.609997386\n[356] -0.043300400  1.907814288  0.028129459  1.907043377  2.518013534\n[361] -0.417457530 -0.099604775  1.917888239 -2.465559417 -0.933942683\n[366] -0.396749872 -0.297783000 -0.823082006  0.221755793 -0.260121325\n[371]  0.770712404 -0.875530693 -1.448220441  0.747984217 -0.713218596\n[376]  1.745341879  0.683691640 -0.482598135  0.788042890  0.031669662\n[381]  0.488276429  0.225743373 -0.140241509  1.227888418 -0.088444487\n[386] -1.682769914  0.107432101  1.557901612 -0.231538521 -0.915386645\n[391] -1.669801738  0.587608864 -0.823873532 -0.551904874  0.717795708\n[396]  0.479611367  0.875972981 -1.093955320  0.795697414  0.700108129\n[401]  0.186424160 -1.267843163  2.252353341  1.112569804  0.877789358\n[406]  1.457708491 -1.179410793 -0.047401638 -1.240315693  0.354213302\n[411]  0.941336380 -0.694991681  0.411634750 -0.768547015  0.662565419\n[416] -0.061829889 -0.812306592 -1.821231939  0.848493949  1.815592263\n[421] -1.366648505 -0.926346802 -0.489977313 -0.443625228 -1.202150347\n[426]  1.953136087 -1.594888598  0.366225348  1.187669756  0.008506154\n[431]  0.450328047  0.024157854 -0.606799600  2.818949809 -0.144273033\n[436] -1.769912911  0.542159388 -1.181933147 -1.000300650  1.322710087\n[441]  0.016574602 -1.175823772  0.616461479 -0.817208162 -1.144415076\n[446]  0.039484307  1.042007036 -0.206650105 -0.594844876 -0.893572906\n[451]  0.049787264  1.115586836  0.079503577  0.476245600 -0.045242013\n[456] -0.573456802 -0.214194339 -0.151564644  0.036140610 -0.454572067\n[461] -0.084356405  0.785101478 -0.198167467  0.047375251 -0.522875850\n[466]  0.316202133 -0.109321800 -0.155363965 -0.354693773  0.243650332\n[471]  0.605715978  0.531615327  0.131997963 -0.653961268 -1.646040468\n[476] -0.346129863  0.545413837  0.367103234  2.876650981 -0.584468699\n[481] -0.694200186  1.055826941 -0.231121300  0.207498942 -1.207073774\n[486] -0.184573318 -1.253408244 -0.831472224  0.073845745 -1.256317111\n[491] -0.293008750  0.702482852 -0.831577335  1.735635518 -0.232380057\n[496]  0.796251691  0.293554606 -0.743572118  2.674118971 -0.072190927\nattr(,\"class\")\n[1] \"specialvector\" \"numeric\"      \n\n\nTo create a custom print() function for out new class specialvector, we define a function named print.[classname]:\n\nprint.specialvector &lt;- function(x, ...) {\n  cat(\"This is a special vector of length\", length(x), \"\\n\")\n  cat(\"Its mean value is\", mean(x, na.rm = TRUE), \n      \"and its median is\", median(x, na.rm = TRUE))\n  cat(\"\\nHere are the first few elements:\\n\", head(x), \"\\n\")\n  invisible(x)\n}\n\nNow, when you print an object of class specialvector, the custom print() command is invoked:\n\nx\n\nThis is a special vector of length 500 \nIts mean value is -0.01333819 and its median is -0.09849913\nHere are the first few elements:\n 1.888719 0.09709766 0.6948883 0.07237793 -0.4979071 -0.9634788 \n\n\nIf needed, you can call the default or another appropriate method directly:\n\nprint.default(x)\n\n  [1]  1.888719017  0.097097656  0.694888321  0.072377928 -0.497907130\n  [6] -0.963478848  1.945085126  0.898447437  0.515390517  2.302865871\n [11] -2.242245260 -1.279759205 -0.583887328 -0.967922802 -1.089577060\n [16]  0.869694816  0.846009016  1.876821940 -1.524111809  1.439032407\n [21] -0.398127484  1.308328220 -0.703791005 -1.442178727  0.500797958\n [26] -1.035910654  0.219342949  1.085511067 -0.407612853  1.677908656\n [31] -0.599957455  1.431962247  0.865893982 -0.918668598 -0.333356254\n [36] -0.506774370 -1.301539247 -0.083430900  0.999780796 -0.452059487\n [41]  2.350073630  0.868283906 -2.919772421 -0.606799133 -0.251386770\n [46]  0.097164944 -0.649528507 -0.250702832  1.170758553 -0.143485168\n [51] -0.649504408 -1.481641736  0.508557423  0.729487808  1.187005929\n [56] -0.540462753  2.602901917 -1.072362853  0.555269006 -0.618126682\n [61] -0.309636782  0.134467835  2.265552843  0.243738962 -0.321611531\n [66] -1.664585522 -1.208026320 -0.223819939 -0.236047059  1.301440515\n [71]  0.618060156  1.105629273 -1.368480636  1.716102126 -0.395680392\n [76] -0.071566694  0.950265872  1.611675820 -1.048867645  0.977930720\n [81] -0.282343475 -1.901756679  1.056641459 -1.106850948  0.556934615\n [86]  0.162788958  0.045349517 -1.075163065 -0.279808683 -0.379805320\n [91] -0.537564718  0.424279639  2.186101018 -1.811633119  1.087184490\n [96]  0.793088008 -0.849708581 -0.361942058 -1.533768847 -1.236061402\n[101] -0.270079856  1.187761831  0.340570473 -0.137981531  1.358011032\n[106] -0.750176190  0.209266222 -0.227688580 -1.475535856  0.084068631\n[111] -0.856426667  0.453994178 -0.452953162 -0.508845374  0.203397047\n[116]  0.649616376 -0.752516622 -1.106775612 -0.990907485 -0.396536687\n[121]  0.109523288  0.012058814 -0.453786208  0.248090928  3.411106770\n[126]  2.924075360  0.631612825  0.351028112 -0.310088990 -2.308941754\n[131]  0.016051795  0.140731891  0.508223448 -0.466316935 -0.322001159\n[136]  1.274349831  1.742058688 -2.440178231  0.602354967  1.906101154\n[141]  0.243900187 -1.159940705 -0.235946047 -1.579460854  0.563077584\n[146]  0.590912873  0.432831465  0.464395299  1.595218417 -1.084504898\n[151] -0.575994774 -0.212329904  0.561013058  1.513045966 -2.901256662\n[156]  0.236783736  0.247433215 -1.104650845 -0.408174668 -0.703644693\n[161]  0.825383197  0.043397545  0.011773235  1.246213047  0.329161199\n[166] -0.999610336 -1.335542268 -1.956449691  0.862460652 -1.043043477\n[171]  0.691613983 -0.427390926  0.984915460  0.139843610 -1.292790293\n[176]  0.221488927  0.856045922 -0.049940025  2.017395058  0.550238231\n[181] -0.106344015 -0.811813620  1.257597303 -0.140872278 -0.743587100\n[186] -0.125836290 -0.311931640  0.415486471 -0.137360537 -0.205817083\n[191]  1.866196280  0.650413365 -0.447484092  0.606259902 -0.044509915\n[196] -1.061025452  0.212830127 -1.623002913  0.329449139 -1.757995129\n[201] -0.190038962  1.305626010 -0.688977648 -0.153763834  0.420199767\n[206] -1.140837378 -0.416399540 -0.262825846 -1.126712109 -0.348930869\n[211] -0.851698668 -0.631107561 -0.697900522  1.049461405  1.387041666\n[216]  0.942548017 -0.233915800 -1.774481705  0.569458580 -2.075914812\n[221] -0.136130452 -0.383015062 -0.603570948 -0.264192733 -2.013528057\n[226] -0.795864360 -0.799341770 -3.102640487 -0.009318856  1.312464835\n[231]  0.410147399  1.302487588  0.671768470 -0.107125669  0.327951678\n[236] -1.305653615 -0.120070946  0.569516594 -0.112249452 -1.052867332\n[241]  0.734137183  1.182637857 -0.942939423 -0.313163674  0.405513765\n[246]  0.338090993 -1.466428602 -1.584924605 -0.455539401 -1.475671715\n[251] -0.029305168  0.277414064 -1.585323504 -0.043374523  1.393887795\n[256] -0.671366403 -1.058536799 -0.097393476  0.308186911 -0.932942560\n[261] -0.001947657  0.551896080  1.080014744  0.210080852 -0.516869808\n[266]  0.597855597  1.439218082  2.566123952 -0.139659043 -0.964438341\n[271]  0.939401719 -0.599078325 -0.520855987 -0.313126961  0.949284730\n[276]  0.530048786 -0.211091113 -0.251527600 -1.327958268  0.463554220\n[281]  1.040760627 -0.254002573 -0.872515549 -1.351105024 -1.064915043\n[286]  0.834266103 -0.650261791 -0.121939200 -1.531486182 -2.040679939\n[291] -0.485136508  1.793857876 -0.100831178  0.197539762  0.164575556\n[296] -0.562449174 -1.145785998  1.822383383  0.196696988 -0.515542278\n[301] -0.538681511  0.595565954 -1.157056656 -0.927937658 -0.739126324\n[306] -1.647481423  0.929855991 -0.662239826  1.794604746  0.039174529\n[311] -0.337659923  0.980501620  0.685868568  0.966673868  0.151686399\n[316]  0.837460568  0.668583786 -1.095257827  0.569940979 -1.796854551\n[321] -1.805234540 -0.680659131  1.718701374  1.119271856  0.256078198\n[326]  1.071699022 -1.216394170  0.891814258 -0.393721532 -0.894893115\n[331]  0.041732493 -0.525159072 -0.288259827 -0.662641201  1.398287929\n[336]  0.381201040 -0.012910825 -0.136455397  1.507650735 -0.890770796\n[341]  0.150524004 -1.478292765 -0.953320625  0.007469124 -0.222412081\n[346] -0.369027650 -0.340957569  1.045530042 -0.268114901  0.076332385\n[351] -0.775765764  0.198095287  3.849825076  0.425579511  0.609997386\n[356] -0.043300400  1.907814288  0.028129459  1.907043377  2.518013534\n[361] -0.417457530 -0.099604775  1.917888239 -2.465559417 -0.933942683\n[366] -0.396749872 -0.297783000 -0.823082006  0.221755793 -0.260121325\n[371]  0.770712404 -0.875530693 -1.448220441  0.747984217 -0.713218596\n[376]  1.745341879  0.683691640 -0.482598135  0.788042890  0.031669662\n[381]  0.488276429  0.225743373 -0.140241509  1.227888418 -0.088444487\n[386] -1.682769914  0.107432101  1.557901612 -0.231538521 -0.915386645\n[391] -1.669801738  0.587608864 -0.823873532 -0.551904874  0.717795708\n[396]  0.479611367  0.875972981 -1.093955320  0.795697414  0.700108129\n[401]  0.186424160 -1.267843163  2.252353341  1.112569804  0.877789358\n[406]  1.457708491 -1.179410793 -0.047401638 -1.240315693  0.354213302\n[411]  0.941336380 -0.694991681  0.411634750 -0.768547015  0.662565419\n[416] -0.061829889 -0.812306592 -1.821231939  0.848493949  1.815592263\n[421] -1.366648505 -0.926346802 -0.489977313 -0.443625228 -1.202150347\n[426]  1.953136087 -1.594888598  0.366225348  1.187669756  0.008506154\n[431]  0.450328047  0.024157854 -0.606799600  2.818949809 -0.144273033\n[436] -1.769912911  0.542159388 -1.181933147 -1.000300650  1.322710087\n[441]  0.016574602 -1.175823772  0.616461479 -0.817208162 -1.144415076\n[446]  0.039484307  1.042007036 -0.206650105 -0.594844876 -0.893572906\n[451]  0.049787264  1.115586836  0.079503577  0.476245600 -0.045242013\n[456] -0.573456802 -0.214194339 -0.151564644  0.036140610 -0.454572067\n[461] -0.084356405  0.785101478 -0.198167467  0.047375251 -0.522875850\n[466]  0.316202133 -0.109321800 -0.155363965 -0.354693773  0.243650332\n[471]  0.605715978  0.531615327  0.131997963 -0.653961268 -1.646040468\n[476] -0.346129863  0.545413837  0.367103234  2.876650981 -0.584468699\n[481] -0.694200186  1.055826941 -0.231121300  0.207498942 -1.207073774\n[486] -0.184573318 -1.253408244 -0.831472224  0.073845745 -1.256317111\n[491] -0.293008750  0.702482852 -0.831577335  1.735635518 -0.232380057\n[496]  0.796251691  0.293554606 -0.743572118  2.674118971 -0.072190927\nattr(,\"class\")\n[1] \"specialvector\" \"numeric\"      \n\n\nYou can change the vector back to a regular numeric vector, or a different class, just as easily:\n\nclass(x) &lt;- \"numeric\"\nx\n\n  [1]  1.888719017  0.097097656  0.694888321  0.072377928 -0.497907130\n  [6] -0.963478848  1.945085126  0.898447437  0.515390517  2.302865871\n [11] -2.242245260 -1.279759205 -0.583887328 -0.967922802 -1.089577060\n [16]  0.869694816  0.846009016  1.876821940 -1.524111809  1.439032407\n [21] -0.398127484  1.308328220 -0.703791005 -1.442178727  0.500797958\n [26] -1.035910654  0.219342949  1.085511067 -0.407612853  1.677908656\n [31] -0.599957455  1.431962247  0.865893982 -0.918668598 -0.333356254\n [36] -0.506774370 -1.301539247 -0.083430900  0.999780796 -0.452059487\n [41]  2.350073630  0.868283906 -2.919772421 -0.606799133 -0.251386770\n [46]  0.097164944 -0.649528507 -0.250702832  1.170758553 -0.143485168\n [51] -0.649504408 -1.481641736  0.508557423  0.729487808  1.187005929\n [56] -0.540462753  2.602901917 -1.072362853  0.555269006 -0.618126682\n [61] -0.309636782  0.134467835  2.265552843  0.243738962 -0.321611531\n [66] -1.664585522 -1.208026320 -0.223819939 -0.236047059  1.301440515\n [71]  0.618060156  1.105629273 -1.368480636  1.716102126 -0.395680392\n [76] -0.071566694  0.950265872  1.611675820 -1.048867645  0.977930720\n [81] -0.282343475 -1.901756679  1.056641459 -1.106850948  0.556934615\n [86]  0.162788958  0.045349517 -1.075163065 -0.279808683 -0.379805320\n [91] -0.537564718  0.424279639  2.186101018 -1.811633119  1.087184490\n [96]  0.793088008 -0.849708581 -0.361942058 -1.533768847 -1.236061402\n[101] -0.270079856  1.187761831  0.340570473 -0.137981531  1.358011032\n[106] -0.750176190  0.209266222 -0.227688580 -1.475535856  0.084068631\n[111] -0.856426667  0.453994178 -0.452953162 -0.508845374  0.203397047\n[116]  0.649616376 -0.752516622 -1.106775612 -0.990907485 -0.396536687\n[121]  0.109523288  0.012058814 -0.453786208  0.248090928  3.411106770\n[126]  2.924075360  0.631612825  0.351028112 -0.310088990 -2.308941754\n[131]  0.016051795  0.140731891  0.508223448 -0.466316935 -0.322001159\n[136]  1.274349831  1.742058688 -2.440178231  0.602354967  1.906101154\n[141]  0.243900187 -1.159940705 -0.235946047 -1.579460854  0.563077584\n[146]  0.590912873  0.432831465  0.464395299  1.595218417 -1.084504898\n[151] -0.575994774 -0.212329904  0.561013058  1.513045966 -2.901256662\n[156]  0.236783736  0.247433215 -1.104650845 -0.408174668 -0.703644693\n[161]  0.825383197  0.043397545  0.011773235  1.246213047  0.329161199\n[166] -0.999610336 -1.335542268 -1.956449691  0.862460652 -1.043043477\n[171]  0.691613983 -0.427390926  0.984915460  0.139843610 -1.292790293\n[176]  0.221488927  0.856045922 -0.049940025  2.017395058  0.550238231\n[181] -0.106344015 -0.811813620  1.257597303 -0.140872278 -0.743587100\n[186] -0.125836290 -0.311931640  0.415486471 -0.137360537 -0.205817083\n[191]  1.866196280  0.650413365 -0.447484092  0.606259902 -0.044509915\n[196] -1.061025452  0.212830127 -1.623002913  0.329449139 -1.757995129\n[201] -0.190038962  1.305626010 -0.688977648 -0.153763834  0.420199767\n[206] -1.140837378 -0.416399540 -0.262825846 -1.126712109 -0.348930869\n[211] -0.851698668 -0.631107561 -0.697900522  1.049461405  1.387041666\n[216]  0.942548017 -0.233915800 -1.774481705  0.569458580 -2.075914812\n[221] -0.136130452 -0.383015062 -0.603570948 -0.264192733 -2.013528057\n[226] -0.795864360 -0.799341770 -3.102640487 -0.009318856  1.312464835\n[231]  0.410147399  1.302487588  0.671768470 -0.107125669  0.327951678\n[236] -1.305653615 -0.120070946  0.569516594 -0.112249452 -1.052867332\n[241]  0.734137183  1.182637857 -0.942939423 -0.313163674  0.405513765\n[246]  0.338090993 -1.466428602 -1.584924605 -0.455539401 -1.475671715\n[251] -0.029305168  0.277414064 -1.585323504 -0.043374523  1.393887795\n[256] -0.671366403 -1.058536799 -0.097393476  0.308186911 -0.932942560\n[261] -0.001947657  0.551896080  1.080014744  0.210080852 -0.516869808\n[266]  0.597855597  1.439218082  2.566123952 -0.139659043 -0.964438341\n[271]  0.939401719 -0.599078325 -0.520855987 -0.313126961  0.949284730\n[276]  0.530048786 -0.211091113 -0.251527600 -1.327958268  0.463554220\n[281]  1.040760627 -0.254002573 -0.872515549 -1.351105024 -1.064915043\n[286]  0.834266103 -0.650261791 -0.121939200 -1.531486182 -2.040679939\n[291] -0.485136508  1.793857876 -0.100831178  0.197539762  0.164575556\n[296] -0.562449174 -1.145785998  1.822383383  0.196696988 -0.515542278\n[301] -0.538681511  0.595565954 -1.157056656 -0.927937658 -0.739126324\n[306] -1.647481423  0.929855991 -0.662239826  1.794604746  0.039174529\n[311] -0.337659923  0.980501620  0.685868568  0.966673868  0.151686399\n[316]  0.837460568  0.668583786 -1.095257827  0.569940979 -1.796854551\n[321] -1.805234540 -0.680659131  1.718701374  1.119271856  0.256078198\n[326]  1.071699022 -1.216394170  0.891814258 -0.393721532 -0.894893115\n[331]  0.041732493 -0.525159072 -0.288259827 -0.662641201  1.398287929\n[336]  0.381201040 -0.012910825 -0.136455397  1.507650735 -0.890770796\n[341]  0.150524004 -1.478292765 -0.953320625  0.007469124 -0.222412081\n[346] -0.369027650 -0.340957569  1.045530042 -0.268114901  0.076332385\n[351] -0.775765764  0.198095287  3.849825076  0.425579511  0.609997386\n[356] -0.043300400  1.907814288  0.028129459  1.907043377  2.518013534\n[361] -0.417457530 -0.099604775  1.917888239 -2.465559417 -0.933942683\n[366] -0.396749872 -0.297783000 -0.823082006  0.221755793 -0.260121325\n[371]  0.770712404 -0.875530693 -1.448220441  0.747984217 -0.713218596\n[376]  1.745341879  0.683691640 -0.482598135  0.788042890  0.031669662\n[381]  0.488276429  0.225743373 -0.140241509  1.227888418 -0.088444487\n[386] -1.682769914  0.107432101  1.557901612 -0.231538521 -0.915386645\n[391] -1.669801738  0.587608864 -0.823873532 -0.551904874  0.717795708\n[396]  0.479611367  0.875972981 -1.093955320  0.795697414  0.700108129\n[401]  0.186424160 -1.267843163  2.252353341  1.112569804  0.877789358\n[406]  1.457708491 -1.179410793 -0.047401638 -1.240315693  0.354213302\n[411]  0.941336380 -0.694991681  0.411634750 -0.768547015  0.662565419\n[416] -0.061829889 -0.812306592 -1.821231939  0.848493949  1.815592263\n[421] -1.366648505 -0.926346802 -0.489977313 -0.443625228 -1.202150347\n[426]  1.953136087 -1.594888598  0.366225348  1.187669756  0.008506154\n[431]  0.450328047  0.024157854 -0.606799600  2.818949809 -0.144273033\n[436] -1.769912911  0.542159388 -1.181933147 -1.000300650  1.322710087\n[441]  0.016574602 -1.175823772  0.616461479 -0.817208162 -1.144415076\n[446]  0.039484307  1.042007036 -0.206650105 -0.594844876 -0.893572906\n[451]  0.049787264  1.115586836  0.079503577  0.476245600 -0.045242013\n[456] -0.573456802 -0.214194339 -0.151564644  0.036140610 -0.454572067\n[461] -0.084356405  0.785101478 -0.198167467  0.047375251 -0.522875850\n[466]  0.316202133 -0.109321800 -0.155363965 -0.354693773  0.243650332\n[471]  0.605715978  0.531615327  0.131997963 -0.653961268 -1.646040468\n[476] -0.346129863  0.545413837  0.367103234  2.876650981 -0.584468699\n[481] -0.694200186  1.055826941 -0.231121300  0.207498942 -1.207073774\n[486] -0.184573318 -1.253408244 -0.831472224  0.073845745 -1.256317111\n[491] -0.293008750  0.702482852 -0.831577335  1.735635518 -0.232380057\n[496]  0.796251691  0.293554606 -0.743572118  2.674118971 -0.072190927",
    "crumbs": [
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>Classes and OOP</span>"
    ]
  },
  {
    "objectID": "DataTable.html",
    "href": "DataTable.html",
    "title": "Data Table",
    "section": "",
    "text": "Contents:\n\ndata.table Introduction\ndata.table Basics\nReference Semantics\nReshaping\nJoins\nAdvanced data.table examples",
    "crumbs": [
      "Data Table"
    ]
  },
  {
    "objectID": "dtIntro.html",
    "href": "dtIntro.html",
    "title": "33  Introduction",
    "section": "",
    "text": "33.1 Installation\nThe data.table package provides a modern and highly optimized version of R’s data.frame structure. It is highly memory efficient and can automatically parallelize internal operations to achieve substantial speed improvements over data.frames. The data.table package weighs in at just a few kilobytes, has zero dependencies, and maintains compatibility with R going back many versions.  Advantages of data.table include:\nIn health data science, it is common to handle very large datasets, especially when working with electronic health record (EHR) data. In such cases, we often have to read, clean, reshape, transform, and merge multiple tables of different dimensions, often featuring many millions of rows and thousands of columns. The benefits of data.table become immediately apparent in such scenarios.\nTo install from CRAN:\ninstall.packages(\"data.table\")\ndata.table includes a built-in command to update to the latest development version:\ndata.table::update.dev.pkg()",
    "crumbs": [
      "Data Table",
      "<span class='chapter-number'>33</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "dtIntro.html#note-on-openmp-support",
    "href": "dtIntro.html#note-on-openmp-support",
    "title": "33  Introduction",
    "section": "\n33.2 Note on OpenMP support",
    "text": "33.2 Note on OpenMP support\ndata.table automatically parallelizes operations behind the scenes when possible. It uses the OpenMP library to support parallelization. The current version of macOS comes with disabled support for OpenMP.\nCurrently, if you install data.table and OpenMP support is not detected, a message is printed to the console when you load the library with library(data.table) informing you that it is running on a single thread. You can still use data.table without OpenMP support.  The data.table installation wiki describes how to enable OpenMP support in the macOS compiler. The recommended option is to download the libraries from the mac.r-project site and copy them to the usr/local/lib and usr/local/include directories as appropriate.  After adding OpenMP support, you can compile the latest version of data.table:\n\nremotes::install_github(\"Rdatatable/data.table\")\n\nIf everything works correctly, when you now load the library, it will inform you how many threads are being used.",
    "crumbs": [
      "Data Table",
      "<span class='chapter-number'>33</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "dtIntro.html#dtresources",
    "href": "dtIntro.html#dtresources",
    "title": "33  Introduction",
    "section": "\n33.3 Resources",
    "text": "33.3 Resources\n\ndata.table GitHub\ndata.table Documentation\ndata.table Cheatsheet",
    "crumbs": [
      "Data Table",
      "<span class='chapter-number'>33</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "dtBasics.html",
    "href": "dtBasics.html",
    "title": "34  data.table basics",
    "section": "",
    "text": "34.1 data.table extends the functionality of the data.frame\nSome of the ways in which a data.table differs from a data.frame:\ndata.table operations remain as close as possible to data.frame operations, trying to extend rather than replace data.frame functionality.\ndata.table includes thorough and helpful error messages that often point to a solution. This includes common mistakes new users may make when trying commands that would work on a data.frame but not on a data.table.",
    "crumbs": [
      "Data Table",
      "<span class='chapter-number'>34</span>  <span class='chapter-title'>data.table basics</span>"
    ]
  },
  {
    "objectID": "dtBasics.html#data.table-extends-the-functionality-of-the-data.frame",
    "href": "dtBasics.html#data.table-extends-the-functionality-of-the-data.frame",
    "title": "34  data.table basics",
    "section": "",
    "text": "Many operations can be performed within a data.table’s “frame” (dt[i, j, by]): filter cases, select columns & operate on columns, group-by operations\nAccess column names directly without quoting\nMany operations can be performed “in-place” (i.e. with no assignment)\nWorking on large datasets (e.g. millions of rows) can be orders of magnitude faster with a data.table than a data.frame.\n\n\n\n\n34.1.1 Load the data.table package\n\nlibrary(data.table)",
    "crumbs": [
      "Data Table",
      "<span class='chapter-number'>34</span>  <span class='chapter-title'>data.table basics</span>"
    ]
  },
  {
    "objectID": "dtBasics.html#create-a-data.table",
    "href": "dtBasics.html#create-a-data.table",
    "title": "34  data.table basics",
    "section": "\n34.2 Create a data.table\n",
    "text": "34.2 Create a data.table\n\n\n34.2.1 By assignment: data.table()\n\nLet’s create a data.frame and a data.table to explore side by side.\n\ndf &lt;- data.frame(A = 1:5,\n                 B = c(1.2, 4.3, 9.7, 5.6, 8.1),\n                 C = c(\"a\", \"b\", \"b\", \"a\", \"a\"))\nclass(df)\n\n[1] \"data.frame\"\n\ndf\n\n  A   B C\n1 1 1.2 a\n2 2 4.3 b\n3 3 9.7 b\n4 4 5.6 a\n5 5 8.1 a\n\n\ndata.table() syntax is similar to data.frame() (differs in some arguments)\n\ndt &lt;- data.table(A = 1:5,\n                 B = c(1.2, 4.3, 9.7, 5.6, 8.1),\n                 C = c(\"a\", \"b\", \"b\", \"a\", \"a\"))\nclass(dt)\n\n[1] \"data.table\" \"data.frame\"\n\ndt\n\n       A     B      C\n   &lt;int&gt; &lt;num&gt; &lt;char&gt;\n1:     1   1.2      a\n2:     2   4.3      b\n3:     3   9.7      b\n4:     4   5.6      a\n5:     5   8.1      a\n\n\nNotice how a data.table object also inherits from data.frame. This means that if a method does not exist for data.table, the method for data.frame will be used (See classes and generic functions).  As part of improving efficiency, data.tables do away with row names. Instead of using row names, you should use a dedicated column or column with a row identifier/s (e.g. “ID”). this is advisable when working with data.frames as well.  A rather convenient option is to have data.tables print each column’s class below the column name. You can pass the argument class = TRUE to print() or set the global option datatable.print.class using options()\n\noptions(datatable.print.class = TRUE)\ndt\n\n       A     B      C\n   &lt;int&gt; &lt;num&gt; &lt;char&gt;\n1:     1   1.2      a\n2:     2   4.3      b\n3:     3   9.7      b\n4:     4   5.6      a\n5:     5   8.1      a\n\n\nSame as with a data.frame, to automatically convert strings to factors, you can use the stringsAsFactors argument:\n\ndt2 &lt;- data.table(A = 1:5,\n                  B = c(1.2, 4.3, 9.7, 5.6, 8.1),\n                  C = c(\"a\", \"b\", \"b\", \"a\", \"a\"),\n                  stringsAsFactors = TRUE)\ndt2\n\n       A     B      C\n   &lt;int&gt; &lt;num&gt; &lt;fctr&gt;\n1:     1   1.2      a\n2:     2   4.3      b\n3:     3   9.7      b\n4:     4   5.6      a\n5:     5   8.1      a\n\n\n\n34.2.2 By coercion: as.data.table()\n\n\ndat &lt;- data.frame(A = 1:5,\n                  B = c(1.2, 4.3, 9.7, 5.6, 8.1),\n                  C = c(\"a\", \"b\", \"b\", \"a\", \"a\"),\n                  stringsAsFactors = TRUE)\ndat\n\n  A   B C\n1 1 1.2 a\n2 2 4.3 b\n3 3 9.7 b\n4 4 5.6 a\n5 5 8.1 a\n\ndat2 &lt;- as.data.table(dat)\ndat2\n\n       A     B      C\n   &lt;int&gt; &lt;num&gt; &lt;fctr&gt;\n1:     1   1.2      a\n2:     2   4.3      b\n3:     3   9.7      b\n4:     4   5.6      a\n5:     5   8.1      a\n\n\n\n34.2.3 By coercion in-place: setDT()\n\nsetDT() converts a list or data.frame into a data.table in-place. This means the object passed to setDT() is changed and you do not need to assign the output to a new object.\n\ndat &lt;- data.frame(A = 1:5,\n                  B = c(1.2, 4.3, 9.7, 5.6, 8.1),\n                  C = c(\"a\", \"b\", \"b\", \"a\", \"a\"))\nclass(dat)\n\n[1] \"data.frame\"\n\n\n\nsetDT(dat)\nclass(dat)\n\n[1] \"data.table\" \"data.frame\"\n\n\nYou can similarly convert a data.table to a data.frame, in-place:\n\nsetDF(dat)\nclass(dat)\n\n[1] \"data.frame\"",
    "crumbs": [
      "Data Table",
      "<span class='chapter-number'>34</span>  <span class='chapter-title'>data.table basics</span>"
    ]
  },
  {
    "objectID": "dtBasics.html#display-data.table-structure-with-str",
    "href": "dtBasics.html#display-data.table-structure-with-str",
    "title": "34  data.table basics",
    "section": "\n34.3 Display data.table structure with str()\n",
    "text": "34.3 Display data.table structure with str()\n\nstr() works the same (and you should keep using it!)\n\nstr(df)\n\n'data.frame':   5 obs. of  3 variables:\n $ A: int  1 2 3 4 5\n $ B: num  1.2 4.3 9.7 5.6 8.1\n $ C: chr  \"a\" \"b\" \"b\" \"a\" ...\n\n\n\nstr(dt)\n\nClasses 'data.table' and 'data.frame':  5 obs. of  3 variables:\n $ A: int  1 2 3 4 5\n $ B: num  1.2 4.3 9.7 5.6 8.1\n $ C: chr  \"a\" \"b\" \"b\" \"a\" ...\n - attr(*, \".internal.selfref\")=&lt;externalptr&gt;",
    "crumbs": [
      "Data Table",
      "<span class='chapter-number'>34</span>  <span class='chapter-title'>data.table basics</span>"
    ]
  },
  {
    "objectID": "dtBasics.html#combine-data.tables",
    "href": "dtBasics.html#combine-data.tables",
    "title": "34  data.table basics",
    "section": "\n34.4 Combine data.tables\n",
    "text": "34.4 Combine data.tables\n\ncbind() and rbind() work on data.tables the same as on data.frames:\n\ndt1 &lt;- data.table(a = 1:5)\ndt2 &lt;- data.table(b = 11:15)\ncbind(dt1, dt2)\n\n       a     b\n   &lt;int&gt; &lt;int&gt;\n1:     1    11\n2:     2    12\n3:     3    13\n4:     4    14\n5:     5    15\n\nrbind(dt1, dt1)\n\n        a\n    &lt;int&gt;\n 1:     1\n 2:     2\n 3:     3\n 4:     4\n 5:     5\n 6:     1\n 7:     2\n 8:     3\n 9:     4\n10:     5",
    "crumbs": [
      "Data Table",
      "<span class='chapter-number'>34</span>  <span class='chapter-title'>data.table basics</span>"
    ]
  },
  {
    "objectID": "dtBasics.html#set-column-names-in-place",
    "href": "dtBasics.html#set-column-names-in-place",
    "title": "34  data.table basics",
    "section": "\n34.5 Set column names in-place\n",
    "text": "34.5 Set column names in-place\n\n\ndta &lt;- data.table(\n  ID = sample(8000:9000, size = 10),\n  A = rnorm(10, mean = 47, sd = 8),\n  W = rnorm(10, mean = 87, sd = 7)\n)\ndta\n\n       ID        A        W\n    &lt;int&gt;    &lt;num&gt;    &lt;num&gt;\n 1:  8683 65.38270 88.34494\n 2:  8831 51.19003 96.36451\n 3:  8333 63.82806 86.90661\n 4:  8044 52.50196 87.35874\n 5:  8760 38.77308 86.75976\n 6:  8973 41.92050 79.46510\n 7:  8873 54.94697 89.09996\n 8:  8089 60.04796 70.61579\n 9:  8259 48.08217 86.69053\n10:  8181 59.72485 90.59614\n\n\nUse the syntax:\nsetnames(dt, old, new)\nto change the column names of a data.table in-place.\nChanges all column names:\n\nsetnames(dta, names(dta), c(\"Patient_ID\", \"Age\", \"Weight\"))\ndta\n\n    Patient_ID      Age   Weight\n         &lt;int&gt;    &lt;num&gt;    &lt;num&gt;\n 1:       8683 65.38270 88.34494\n 2:       8831 51.19003 96.36451\n 3:       8333 63.82806 86.90661\n 4:       8044 52.50196 87.35874\n 5:       8760 38.77308 86.75976\n 6:       8973 41.92050 79.46510\n 7:       8873 54.94697 89.09996\n 8:       8089 60.04796 70.61579\n 9:       8259 48.08217 86.69053\n10:       8181 59.72485 90.59614\n\n\nChange subset of names:\n\nold_names &lt;- c(\"Age\", \"Weight\")\nsetnames(dta, old_names, paste0(old_names, \"_at_Admission\"))\ndta\n\n    Patient_ID Age_at_Admission Weight_at_Admission\n         &lt;int&gt;            &lt;num&gt;               &lt;num&gt;\n 1:       8683         65.38270            88.34494\n 2:       8831         51.19003            96.36451\n 3:       8333         63.82806            86.90661\n 4:       8044         52.50196            87.35874\n 5:       8760         38.77308            86.75976\n 6:       8973         41.92050            79.46510\n 7:       8873         54.94697            89.09996\n 8:       8089         60.04796            70.61579\n 9:       8259         48.08217            86.69053\n10:       8181         59.72485            90.59614\n\n\nold argument can also be integer index of column(s).\nFor example, change the name of the first column:\n\nsetnames(dta, 1, \"Hospital_ID\")\ndta\n\n    Hospital_ID Age_at_Admission Weight_at_Admission\n          &lt;int&gt;            &lt;num&gt;               &lt;num&gt;\n 1:        8683         65.38270            88.34494\n 2:        8831         51.19003            96.36451\n 3:        8333         63.82806            86.90661\n 4:        8044         52.50196            87.35874\n 5:        8760         38.77308            86.75976\n 6:        8973         41.92050            79.46510\n 7:        8873         54.94697            89.09996\n 8:        8089         60.04796            70.61579\n 9:        8259         48.08217            86.69053\n10:        8181         59.72485            90.59614",
    "crumbs": [
      "Data Table",
      "<span class='chapter-number'>34</span>  <span class='chapter-title'>data.table basics</span>"
    ]
  },
  {
    "objectID": "dtBasics.html#filter-rows",
    "href": "dtBasics.html#filter-rows",
    "title": "34  data.table basics",
    "section": "\n34.6 Filter rows",
    "text": "34.6 Filter rows\nThere are many similarities and some notable differences in how indexing works in a data.table vs. a data.frame.\nFiltering rows with an integer or logical index is largely the same in a data.frame and a data.table, but in a data.table you can omit the comma to select all columns:\n\ndf[c(1, 3, 5), ]\n\n  A   B C\n1 1 1.2 a\n3 3 9.7 b\n5 5 8.1 a\n\ndt[c(1, 3, 5), ]\n\n       A     B      C\n   &lt;int&gt; &lt;num&gt; &lt;char&gt;\n1:     1   1.2      a\n2:     3   9.7      b\n3:     5   8.1      a\n\ndt[c(1, 3, 5)]\n\n       A     B      C\n   &lt;int&gt; &lt;num&gt; &lt;char&gt;\n1:     1   1.2      a\n2:     3   9.7      b\n3:     5   8.1      a\n\n\nUsing a variable that holds a row index, whether integer or logical:\n\nrowid &lt;- c(1, 3, 5)\ndf[rowid, ]\n\n  A   B C\n1 1 1.2 a\n3 3 9.7 b\n5 5 8.1 a\n\ndt[rowid, ]\n\n       A     B      C\n   &lt;int&gt; &lt;num&gt; &lt;char&gt;\n1:     1   1.2      a\n2:     3   9.7      b\n3:     5   8.1      a\n\ndt[rowid]\n\n       A     B      C\n   &lt;int&gt; &lt;num&gt; &lt;char&gt;\n1:     1   1.2      a\n2:     3   9.7      b\n3:     5   8.1      a\n\n\n\nrowbn &lt;- c(T, F, T, F, T)\ndf[rowbn, ]\n\n  A   B C\n1 1 1.2 a\n3 3 9.7 b\n5 5 8.1 a\n\ndt[rowbn, ]\n\n       A     B      C\n   &lt;int&gt; &lt;num&gt; &lt;char&gt;\n1:     1   1.2      a\n2:     3   9.7      b\n3:     5   8.1      a\n\ndt[rowbn]\n\n       A     B      C\n   &lt;int&gt; &lt;num&gt; &lt;char&gt;\n1:     1   1.2      a\n2:     3   9.7      b\n3:     5   8.1      a\n\n\n\n34.6.1 Conditional filtering\nAs a reminder, there are a few ways to conditionally filter cases in a data.frame:\n\ndf[df$A &gt; mean(df$A) & df$B &gt; mean(df$B), ]\n\n  A   B C\n5 5 8.1 a\n\nsubset(df, A &gt; mean(A) & B &gt; mean(B))\n\n  A   B C\n5 5 8.1 a\n\nwith(df, df[A &gt; mean(A) & B &gt; mean(B), ])\n\n  A   B C\n5 5 8.1 a\n\n\ndata.table allows you to refer to column names directly and unquoted, which makes writing filter conditions easier/more compact:\n\ndt[A &gt; mean(A) & B &gt; mean(B)]\n\n       A     B      C\n   &lt;int&gt; &lt;num&gt; &lt;char&gt;\n1:     5   8.1      a\n\n\nThe data.table package also includes an S3 method for subset() that works the same way as with a data.frame:\n\nsubset(dt, A &gt; mean(A) & B &gt; mean(B))\n\n       A     B      C\n   &lt;int&gt; &lt;num&gt; &lt;char&gt;\n1:     5   8.1      a\n\n\nAs another example, exclude cases based on missingness in a specific column:\n\nadf &lt;- as.data.frame(sapply(1:5, function(i) rnorm(10)))\nadf |&gt; head()\n\n            V1         V2         V3         V4        V5\n1  0.902411777  1.2930875  1.0407948  1.0559136 0.5616985\n2  0.580267346 -0.7832870 -0.6968492  1.2373361 1.6807925\n3 -0.003170238 -1.0047477  0.7405467 -2.5859252 0.3343055\n4 -0.922350665 -0.3273166 -1.1876403  0.4917402 1.7102410\n5  0.739687336 -0.1770125 -0.9235757 -1.5588145 1.4051705\n6  0.228370331 -1.2771214 -0.9437845  1.4142239 1.5548526\n\nadf[1, 3] &lt;- adf[3, 4] &lt;- adf[5, 3] &lt;- adf[7, 3] &lt;- NA\nadt &lt;- as.data.table(adf)\n\n\nadf[!is.na(adf$V3), ]\n\n             V1         V2         V3          V4         V5\n2   0.580267346 -0.7832870 -0.6968492  1.23733614  1.6807925\n3  -0.003170238 -1.0047477  0.7405467          NA  0.3343055\n4  -0.922350665 -0.3273166 -1.1876403  0.49174021  1.7102410\n6   0.228370331 -1.2771214 -0.9437845  1.41422387  1.5548526\n8   0.844595224  0.3321310  0.5219202  0.85338170 -2.2573230\n9   0.019894582  0.6560011  0.9025611 -0.68491892  1.6959256\n10  2.077229177  1.8165615  0.9781020  0.03906486 -2.2223410\n\nadt[!is.na(V3)]\n\n             V1         V2         V3          V4         V5\n          &lt;num&gt;      &lt;num&gt;      &lt;num&gt;       &lt;num&gt;      &lt;num&gt;\n1:  0.580267346 -0.7832870 -0.6968492  1.23733614  1.6807925\n2: -0.003170238 -1.0047477  0.7405467          NA  0.3343055\n3: -0.922350665 -0.3273166 -1.1876403  0.49174021  1.7102410\n4:  0.228370331 -1.2771214 -0.9437845  1.41422387  1.5548526\n5:  0.844595224  0.3321310  0.5219202  0.85338170 -2.2573230\n6:  0.019894582  0.6560011  0.9025611 -0.68491892  1.6959256\n7:  2.077229177  1.8165615  0.9781020  0.03906486 -2.2223410",
    "crumbs": [
      "Data Table",
      "<span class='chapter-number'>34</span>  <span class='chapter-title'>data.table basics</span>"
    ]
  },
  {
    "objectID": "dtBasics.html#select-columns",
    "href": "dtBasics.html#select-columns",
    "title": "34  data.table basics",
    "section": "\n34.7 Select columns",
    "text": "34.7 Select columns\n\n34.7.1 By position(s)\nSelecting a single column in data.table does not drop to a vector, similar to using drop = FALSE in a data.frame:\n\ndf[, 1]\n\n[1] 1 2 3 4 5\n\ndf[, 1, drop = FALSE]\n\n  A\n1 1\n2 2\n3 3\n4 4\n5 5\n\ndt[, 1]\n\n       A\n   &lt;int&gt;\n1:     1\n2:     2\n3:     3\n4:     4\n5:     5\n\n\nDouble bracket indexing of a single column works the same on a data.frame and a data.table, returning a vector:\n\ndf[[2]]\n\n[1] 1.2 4.3 9.7 5.6 8.1\n\ndt[[2]]\n\n[1] 1.2 4.3 9.7 5.6 8.1\n\n\nA vector of column positions returns a smaller data.table, similar to how it returns a smaller data.frame :\n\ndf[, c(1, 2)]\n\n  A   B\n1 1 1.2\n2 2 4.3\n3 3 9.7\n4 4 5.6\n5 5 8.1\n\ndt[, c(1, 2)]\n\n       A     B\n   &lt;int&gt; &lt;num&gt;\n1:     1   1.2\n2:     2   4.3\n3:     3   9.7\n4:     4   5.6\n5:     5   8.1\n\n\n\n34.7.2 By name(s)\nIn data.table, you access column names directly without quoting or using the $ notation:\n\ndf[, \"B\"]\n\n[1] 1.2 4.3 9.7 5.6 8.1\n\ndf$B\n\n[1] 1.2 4.3 9.7 5.6 8.1\n\ndt[, B]\n\n[1] 1.2 4.3 9.7 5.6 8.1\n\n\nBecause of this, data.table requires a slightly different syntax to use a variable as a column index which can contain integer positions, logical index, or column names. While on a data.frame you can do pass an index vector directly:\n\ncolid &lt;- c(1, 2)\ncolbn &lt;- c(FALSE, TRUE, TRUE)\ncolnm &lt;- c(\"A\", \"C\")\ndf[, colid]\n\n  A   B\n1 1 1.2\n2 2 4.3\n3 3 9.7\n4 4 5.6\n5 5 8.1\n\ndf[, colbn]\n\n    B C\n1 1.2 a\n2 4.3 b\n3 9.7 b\n4 5.6 a\n5 8.1 a\n\ndf[, colnm]\n\n  A C\n1 1 a\n2 2 b\n3 3 b\n4 4 a\n5 5 a\n\n\nTo do the same in a data.table, you must prefix the index vector with two dots:\n\ndt[, ..colid]\n\n       A     B\n   &lt;int&gt; &lt;num&gt;\n1:     1   1.2\n2:     2   4.3\n3:     3   9.7\n4:     4   5.6\n5:     5   8.1\n\ndt[, ..colbn]\n\n       B      C\n   &lt;num&gt; &lt;char&gt;\n1:   1.2      a\n2:   4.3      b\n3:   9.7      b\n4:   5.6      a\n5:   8.1      a\n\ndt[, ..colnm]\n\n       A      C\n   &lt;int&gt; &lt;char&gt;\n1:     1      a\n2:     2      b\n3:     3      b\n4:     4      a\n5:     5      a\n\n\nThink of working inside the data.table frame (i.e. within the “[…]”) like an environment: you have direct access to the variables, i.e. columns within it. If you want to refer to variables outside the data.table, you must prefix their names with .. (similar to how you access the directory above your current working directory in the system shell). \n\n\n\n\n\n\nImportant\n\n\n\nAlways read error messages carefully, no matter what function or package you are using. In the case of data.table, the error messages are very informative and often point to the solution.\n\n\nSee what happens if you try to use the data.frame syntax by accident:\n\ndt[, colid]\n\nError in `[.data.table`(dt, , colid): j (the 2nd argument inside [...]) is a single symbol but column name 'colid' is not found. If you intended to select columns using a variable in calling scope, please try DT[, ..colid]. The .. prefix conveys one-level-up similar to a file system path.\n\n\n Selecting a single column by name returns a vector:\n\ndt[, A]\n\n[1] 1 2 3 4 5\n\n\nSelecting one or more columns by name enclosed in list() or .() (which, in this case, is short for list()), always returns a data.table:\n\ndt[, .(A)]\n\n       A\n   &lt;int&gt;\n1:     1\n2:     2\n3:     3\n4:     4\n5:     5\n\ndt[, .(A, B)]\n\n       A     B\n   &lt;int&gt; &lt;num&gt;\n1:     1   1.2\n2:     2   4.3\n3:     3   9.7\n4:     4   5.6\n5:     5   8.1\n\n\n\n34.7.3 .SD & .SDcols\n\n.SDcols is a special symbol that can be used to select columns of a data.table as an alternative to j. It can accept a vector of integer positions or column names. .SD is another special symbol that can be used in j and refers to either the entire data.table, or the subset defined by .SDcols, if present. The following can be used to select columns:\n\ndt[, .SD, .SDcols = colid]\n\n       A     B\n   &lt;int&gt; &lt;num&gt;\n1:     1   1.2\n2:     2   4.3\n3:     3   9.7\n4:     4   5.6\n5:     5   8.1\n\n\nOne of the main uses of .SD is shown below in combination with lapply().",
    "crumbs": [
      "Data Table",
      "<span class='chapter-number'>34</span>  <span class='chapter-title'>data.table basics</span>"
    ]
  },
  {
    "objectID": "dtBasics.html#add-new-column-in-place",
    "href": "dtBasics.html#add-new-column-in-place",
    "title": "34  data.table basics",
    "section": "\n34.8 Add new column in-place\n",
    "text": "34.8 Add new column in-place\n\nUse := assignment to add a new column in the existing data.table.\n\ndt[, AplusB := A + B]\ndt\n\n       A     B      C AplusB\n   &lt;int&gt; &lt;num&gt; &lt;char&gt;  &lt;num&gt;\n1:     1   1.2      a    2.2\n2:     2   4.3      b    6.3\n3:     3   9.7      b   12.7\n4:     4   5.6      a    9.6\n5:     5   8.1      a   13.1\n\n\nNote how dt was modified even though we did not run dt &lt;- dt[, AplusB := A + B]",
    "crumbs": [
      "Data Table",
      "<span class='chapter-number'>34</span>  <span class='chapter-title'>data.table basics</span>"
    ]
  },
  {
    "objectID": "dtBasics.html#add-multiple-columns-in-place",
    "href": "dtBasics.html#add-multiple-columns-in-place",
    "title": "34  data.table basics",
    "section": "\n34.9 Add multiple columns in-place\n",
    "text": "34.9 Add multiple columns in-place\n\nYou can define multiple new column names using a character vector of new column names on the left of := and a list on the right.\n\ndt[, c(\"AtimesB\", \"AoverB\") := list(A*B, A/B)]\n\nWe can use lapply() since it always returns a list:\n\nvnames &lt;- c(\"A\", \"B\")\ndt[, paste0(\"log\", vnames) := lapply(.SD, log), .SDcols = vnames]\ndt\n\n       A     B      C AplusB AtimesB    AoverB      logA      logB\n   &lt;int&gt; &lt;num&gt; &lt;char&gt;  &lt;num&gt;   &lt;num&gt;     &lt;num&gt;     &lt;num&gt;     &lt;num&gt;\n1:     1   1.2      a    2.2     1.2 0.8333333 0.0000000 0.1823216\n2:     2   4.3      b    6.3     8.6 0.4651163 0.6931472 1.4586150\n3:     3   9.7      b   12.7    29.1 0.3092784 1.0986123 2.2721259\n4:     4   5.6      a    9.6    22.4 0.7142857 1.3862944 1.7227666\n5:     5   8.1      a   13.1    40.5 0.6172840 1.6094379 2.0918641\n\n\nYou can also use := in a little more awkward syntax:\n\ndt[, `:=`(AminusB = A - B, AoverC = A / B)]\ndt\n\n       A     B      C AplusB AtimesB    AoverB      logA      logB AminusB\n   &lt;int&gt; &lt;num&gt; &lt;char&gt;  &lt;num&gt;   &lt;num&gt;     &lt;num&gt;     &lt;num&gt;     &lt;num&gt;   &lt;num&gt;\n1:     1   1.2      a    2.2     1.2 0.8333333 0.0000000 0.1823216    -0.2\n2:     2   4.3      b    6.3     8.6 0.4651163 0.6931472 1.4586150    -2.3\n3:     3   9.7      b   12.7    29.1 0.3092784 1.0986123 2.2721259    -6.7\n4:     4   5.6      a    9.6    22.4 0.7142857 1.3862944 1.7227666    -1.6\n5:     5   8.1      a   13.1    40.5 0.6172840 1.6094379 2.0918641    -3.1\n      AoverC\n       &lt;num&gt;\n1: 0.8333333\n2: 0.4651163\n3: 0.3092784\n4: 0.7142857\n5: 0.6172840",
    "crumbs": [
      "Data Table",
      "<span class='chapter-number'>34</span>  <span class='chapter-title'>data.table basics</span>"
    ]
  },
  {
    "objectID": "dtBasics.html#convert-column-type",
    "href": "dtBasics.html#convert-column-type",
    "title": "34  data.table basics",
    "section": "\n34.10 Convert column type",
    "text": "34.10 Convert column type\n\n34.10.1 Assignment by reference with :=\n\nUse any base R coercion function (as.*) to convert a column in-place using the := notation\n\ndt[, A := as.numeric(A)]\ndt\n\n       A     B      C AplusB AtimesB    AoverB      logA      logB AminusB\n   &lt;num&gt; &lt;num&gt; &lt;char&gt;  &lt;num&gt;   &lt;num&gt;     &lt;num&gt;     &lt;num&gt;     &lt;num&gt;   &lt;num&gt;\n1:     1   1.2      a    2.2     1.2 0.8333333 0.0000000 0.1823216    -0.2\n2:     2   4.3      b    6.3     8.6 0.4651163 0.6931472 1.4586150    -2.3\n3:     3   9.7      b   12.7    29.1 0.3092784 1.0986123 2.2721259    -6.7\n4:     4   5.6      a    9.6    22.4 0.7142857 1.3862944 1.7227666    -1.6\n5:     5   8.1      a   13.1    40.5 0.6172840 1.6094379 2.0918641    -3.1\n      AoverC\n       &lt;num&gt;\n1: 0.8333333\n2: 0.4651163\n3: 0.3092784\n4: 0.7142857\n5: 0.6172840\n\n\n\n34.10.2 Delete columns in-place with :=\n\nTo delete a column, use := to set it to NULL:\n\ndt[, AoverB := NULL]\ndt\n\n       A     B      C AplusB AtimesB      logA      logB AminusB    AoverC\n   &lt;num&gt; &lt;num&gt; &lt;char&gt;  &lt;num&gt;   &lt;num&gt;     &lt;num&gt;     &lt;num&gt;   &lt;num&gt;     &lt;num&gt;\n1:     1   1.2      a    2.2     1.2 0.0000000 0.1823216    -0.2 0.8333333\n2:     2   4.3      b    6.3     8.6 0.6931472 1.4586150    -2.3 0.4651163\n3:     3   9.7      b   12.7    29.1 1.0986123 2.2721259    -6.7 0.3092784\n4:     4   5.6      a    9.6    22.4 1.3862944 1.7227666    -1.6 0.7142857\n5:     5   8.1      a   13.1    40.5 1.6094379 2.0918641    -3.1 0.6172840\n\n\nDelete multiple columns\n\ndt[, c(\"logA\", \"logB\") := NULL]\n\nOr:\n\ndt[, `:=`(AplusB = NULL, AminusB = NULL)]\ndt\n\n       A     B      C AtimesB    AoverC\n   &lt;num&gt; &lt;num&gt; &lt;char&gt;   &lt;num&gt;     &lt;num&gt;\n1:     1   1.2      a     1.2 0.8333333\n2:     2   4.3      b     8.6 0.4651163\n3:     3   9.7      b    29.1 0.3092784\n4:     4   5.6      a    22.4 0.7142857\n5:     5   8.1      a    40.5 0.6172840\n\n\n\n34.10.3 Fast loop-able assignment with set()\n\ndata.table’s set() is a loop-able version of the := operator. Use it in a for loop to operate on multiple columns.\nSyntax: set(dt, i, j, value)\n\n\ndt the data.table to operate on\n\ni optionally define which rows to operate on. i = NULL to operate on all rows\n\nj column names or index to be assigned value\n\n\nvalue values to be assigned to j by reference\n\nAs a simple example, transform the first two columns in-place by squaring:\n\nfor (i in 1:2) {\n  set(dt, i = NULL, j = i, value = dt[[i]]^2)\n}",
    "crumbs": [
      "Data Table",
      "<span class='chapter-number'>34</span>  <span class='chapter-title'>data.table basics</span>"
    ]
  },
  {
    "objectID": "dtBasics.html#summarize",
    "href": "dtBasics.html#summarize",
    "title": "34  data.table basics",
    "section": "\n34.11 Summarize",
    "text": "34.11 Summarize\nYou can apply one or multiple summary functions on one or multiple columns. Surround the operations in list() or .() to output a new data.table holding the outputs of the operations, i.e. the input data.table remains unchanged.\n\nA_summary &lt;- dt[, .(A_max = max(A), A_min = min(A), A_sd = sd(A))]\nA_summary\n\n   A_max A_min    A_sd\n   &lt;num&gt; &lt;num&gt;   &lt;num&gt;\n1:    25     1 9.66954\n\n\nExample: Get the standard deviation of all numeric columns:\n\nnumid &lt;- sapply(dt, is.numeric)\ndt_mean &lt;- dt[, lapply(.SD, sd), .SDcols = numid]\ndt_mean\n\n         A        B  AtimesB    AoverC\n     &lt;num&gt;    &lt;num&gt;    &lt;num&gt;     &lt;num&gt;\n1: 9.66954 37.35521 15.74462 0.2060219\n\n\nIf your function returns more than one value, the output will have multiple rows:\n\ndt_range &lt;- dt[, lapply(.SD, range), .SDcols = numid]\ndt_range\n\n       A     B AtimesB    AoverC\n   &lt;num&gt; &lt;num&gt;   &lt;num&gt;     &lt;num&gt;\n1:     1  1.44     1.2 0.3092784\n2:    25 94.09    40.5 0.8333333",
    "crumbs": [
      "Data Table",
      "<span class='chapter-number'>34</span>  <span class='chapter-title'>data.table basics</span>"
    ]
  },
  {
    "objectID": "dtBasics.html#set-order",
    "href": "dtBasics.html#set-order",
    "title": "34  data.table basics",
    "section": "\n34.12 Set order",
    "text": "34.12 Set order\nYou can set the row order of a data.table in-place based on one or multiple columns’ values using setorder()\n\ndt &lt;- data.table(PatientID = sample(1001:9999, size = 10),\n                 Height = rnorm(10, mean = 175, sd = 14),\n                 Weight = rnorm(10, mean = 78, sd = 10),\n                 Group = factor(sample(c(\"A\", \"B\"), size = 10, replace = TRUE)))\ndt\n\n    PatientID   Height   Weight  Group\n        &lt;int&gt;    &lt;num&gt;    &lt;num&gt; &lt;fctr&gt;\n 1:      6771 173.7232 82.62411      A\n 2:      3090 191.7491 75.01137      B\n 3:      1234 195.2610 66.14451      B\n 4:      2111 152.4823 65.67971      B\n 5:      9473 173.5505 68.74644      B\n 6:      3894 154.0196 77.19524      A\n 7:      6942 183.7460 83.96044      A\n 8:      4712 165.1607 64.85735      A\n 9:      3430 184.5817 98.64208      B\n10:      9606 170.3381 82.52088      B\n\n\nLet’s set the order by PatientID:\n\nsetorder(dt, PatientID)\ndt\n\n    PatientID   Height   Weight  Group\n        &lt;int&gt;    &lt;num&gt;    &lt;num&gt; &lt;fctr&gt;\n 1:      1234 195.2610 66.14451      B\n 2:      2111 152.4823 65.67971      B\n 3:      3090 191.7491 75.01137      B\n 4:      3430 184.5817 98.64208      B\n 5:      3894 154.0196 77.19524      A\n 6:      4712 165.1607 64.85735      A\n 7:      6771 173.7232 82.62411      A\n 8:      6942 183.7460 83.96044      A\n 9:      9473 173.5505 68.74644      B\n10:      9606 170.3381 82.52088      B\n\n\nLet’s re-order, always in-place, by group and then by height:\n\nsetorder(dt, Group, Height)\ndt\n\n    PatientID   Height   Weight  Group\n        &lt;int&gt;    &lt;num&gt;    &lt;num&gt; &lt;fctr&gt;\n 1:      3894 154.0196 77.19524      A\n 2:      4712 165.1607 64.85735      A\n 3:      6771 173.7232 82.62411      A\n 4:      6942 183.7460 83.96044      A\n 5:      2111 152.4823 65.67971      B\n 6:      9606 170.3381 82.52088      B\n 7:      9473 173.5505 68.74644      B\n 8:      3430 184.5817 98.64208      B\n 9:      3090 191.7491 75.01137      B\n10:      1234 195.2610 66.14451      B",
    "crumbs": [
      "Data Table",
      "<span class='chapter-number'>34</span>  <span class='chapter-title'>data.table basics</span>"
    ]
  },
  {
    "objectID": "dtBasics.html#group-by-operations",
    "href": "dtBasics.html#group-by-operations",
    "title": "34  data.table basics",
    "section": "\n34.13 Group-by operations",
    "text": "34.13 Group-by operations\nUp to now, we have learned how to use the data.table frame dat[i, j] to filter cases in i or add/remove/transform columns in-place in j. dat[i, j, by] allows to perform operations separately on groups of cases.\n\ndt &lt;- data.table(A = 1:5,\n                 B = c(1.2, 4.3, 9.7, 5.6, 8.1),\n                 C = rnorm(5),\n                 Group = c(\"a\", \"b\", \"b\", \"a\", \"a\"))\ndt\n\n       A     B          C  Group\n   &lt;int&gt; &lt;num&gt;      &lt;num&gt; &lt;char&gt;\n1:     1   1.2 -1.7243334      a\n2:     2   4.3 -0.8421823      b\n3:     3   9.7  0.7892740      b\n4:     4   5.6  0.2640193      a\n5:     5   8.1 -0.1807966      a\n\n\n\n34.13.1 Group-by summary\nAs we’ve seen, using .() or list() in j, returns a new data.table:\n\ndt[, .(mean_A_by_Group = mean(A)), by = Group]\n\n    Group mean_A_by_Group\n   &lt;char&gt;           &lt;num&gt;\n1:      a        3.333333\n2:      b        2.500000\n\ndt[, list(median_B_by_Group = median(B)), by = Group]\n\n    Group median_B_by_Group\n   &lt;char&gt;             &lt;num&gt;\n1:      a               5.6\n2:      b               7.0\n\n\n\n34.13.2 Group-by operation and assignment\nMaking an assignment with := in j, adds a column in-place. If you combine such an assignment with a group-by operation, the same value will be assigned to all cases of the group:\n\ndt[, mean_A_by_Group := mean(A), by = Group]\ndt\n\n       A     B          C  Group mean_A_by_Group\n   &lt;int&gt; &lt;num&gt;      &lt;num&gt; &lt;char&gt;           &lt;num&gt;\n1:     1   1.2 -1.7243334      a        3.333333\n2:     2   4.3 -0.8421823      b        2.500000\n3:     3   9.7  0.7892740      b        2.500000\n4:     4   5.6  0.2640193      a        3.333333\n5:     5   8.1 -0.1807966      a        3.333333",
    "crumbs": [
      "Data Table",
      "<span class='chapter-number'>34</span>  <span class='chapter-title'>data.table basics</span>"
    ]
  },
  {
    "objectID": "dtBasics.html#apply-functions-to-columns",
    "href": "dtBasics.html#apply-functions-to-columns",
    "title": "34  data.table basics",
    "section": "\n34.14 Apply functions to columns",
    "text": "34.14 Apply functions to columns\nAny function that returns a list can be used in j to return a new data.table - therefore lapply is perfect for getting summary on multiple columns. This is another example where you have to use the .SD notation:\n\ndt1 &lt;- as.data.table(sapply(1:3, \\(i) rnorm(10)))\ndt1\n\n            V1         V2         V3\n         &lt;num&gt;      &lt;num&gt;      &lt;num&gt;\n 1: -0.8596756 -0.3872235 -0.4501584\n 2:  0.1268567 -0.7755533  0.3603807\n 3:  0.7298289 -1.6452208  0.9137217\n 4: -0.5078484  0.3122644 -1.2696068\n 5: -0.9108845 -1.4404961 -0.5620521\n 6:  1.5740202 -2.1390065  1.4832881\n 7: -2.3917697 -0.3722932 -0.1926057\n 8: -0.6004372 -0.2706900  0.8909017\n 9: -0.2267385  0.5405553  1.0833964\n10: -0.6378043  1.6665854  1.6748571\n\nsetnames(dt1, names(dt1), c(\"Alpha\", \"Beta\", \"Gamma\"))\ndt1[, lapply(.SD, mean)]\n\n        Alpha       Beta     Gamma\n        &lt;num&gt;      &lt;num&gt;     &lt;num&gt;\n1: -0.3704452 -0.4511078 0.3932123\n\n\nYou can specify which columns to operate on using the .SDcols argument:\n\ndt2 &lt;- data.table(A = 1:5,\n                  B = c(1.2, 4.3, 9.7, 5.6, 8.1),\n                  C = rnorm(5),\n                  Group = c(\"a\", \"b\", \"b\", \"a\", \"a\"))\ndt2\n\n       A     B          C  Group\n   &lt;int&gt; &lt;num&gt;      &lt;num&gt; &lt;char&gt;\n1:     1   1.2 -0.5960686      a\n2:     2   4.3  1.4363967      b\n3:     3   9.7 -0.5264020      b\n4:     4   5.6  1.6849226      a\n5:     5   8.1  0.5502497      a\n\ndt2[, lapply(.SD, mean), .SDcols = 1:2]\n\n       A     B\n   &lt;num&gt; &lt;num&gt;\n1:     3  5.78\n\n# same as\ndt2[, lapply(.SD, mean), .SDcols = c(\"A\", \"B\")]\n\n       A     B\n   &lt;num&gt; &lt;num&gt;\n1:     3  5.78\n\ncols &lt;- c(\"A\", \"B\")\ndt2[, lapply(.SD, mean), .SDcols = cols]\n\n       A     B\n   &lt;num&gt; &lt;num&gt;\n1:     3  5.78\n\n\nYou can combine .SDcols and by:\n\ndt2[, lapply(.SD, median), .SDcols = c(\"B\", \"C\"), by = Group]\n\n    Group     B         C\n   &lt;char&gt; &lt;num&gt;     &lt;num&gt;\n1:      a   5.6 0.5502497\n2:      b   7.0 0.4549973\n\n\nCreate multiple new columns from transformation of existing and store with custom prefix:\n\ndt1\n\n         Alpha       Beta      Gamma\n         &lt;num&gt;      &lt;num&gt;      &lt;num&gt;\n 1: -0.8596756 -0.3872235 -0.4501584\n 2:  0.1268567 -0.7755533  0.3603807\n 3:  0.7298289 -1.6452208  0.9137217\n 4: -0.5078484  0.3122644 -1.2696068\n 5: -0.9108845 -1.4404961 -0.5620521\n 6:  1.5740202 -2.1390065  1.4832881\n 7: -2.3917697 -0.3722932 -0.1926057\n 8: -0.6004372 -0.2706900  0.8909017\n 9: -0.2267385  0.5405553  1.0833964\n10: -0.6378043  1.6665854  1.6748571\n\ndt1[, paste0(names(dt1), \"_abs\") := lapply(.SD, abs)]\ndt1\n\n         Alpha       Beta      Gamma Alpha_abs  Beta_abs Gamma_abs\n         &lt;num&gt;      &lt;num&gt;      &lt;num&gt;     &lt;num&gt;     &lt;num&gt;     &lt;num&gt;\n 1: -0.8596756 -0.3872235 -0.4501584 0.8596756 0.3872235 0.4501584\n 2:  0.1268567 -0.7755533  0.3603807 0.1268567 0.7755533 0.3603807\n 3:  0.7298289 -1.6452208  0.9137217 0.7298289 1.6452208 0.9137217\n 4: -0.5078484  0.3122644 -1.2696068 0.5078484 0.3122644 1.2696068\n 5: -0.9108845 -1.4404961 -0.5620521 0.9108845 1.4404961 0.5620521\n 6:  1.5740202 -2.1390065  1.4832881 1.5740202 2.1390065 1.4832881\n 7: -2.3917697 -0.3722932 -0.1926057 2.3917697 0.3722932 0.1926057\n 8: -0.6004372 -0.2706900  0.8909017 0.6004372 0.2706900 0.8909017\n 9: -0.2267385  0.5405553  1.0833964 0.2267385 0.5405553 1.0833964\n10: -0.6378043  1.6665854  1.6748571 0.6378043 1.6665854 1.6748571\n\n\n\ndt2\n\n       A     B          C  Group\n   &lt;int&gt; &lt;num&gt;      &lt;num&gt; &lt;char&gt;\n1:     1   1.2 -0.5960686      a\n2:     2   4.3  1.4363967      b\n3:     3   9.7 -0.5264020      b\n4:     4   5.6  1.6849226      a\n5:     5   8.1  0.5502497      a\n\ncols &lt;- c(\"A\", \"C\")\ndt2[, paste0(cols, \"_groupMean\") := lapply(.SD, mean), .SDcols = cols, by = Group]\ndt2\n\n       A     B          C  Group A_groupMean C_groupMean\n   &lt;int&gt; &lt;num&gt;      &lt;num&gt; &lt;char&gt;       &lt;num&gt;       &lt;num&gt;\n1:     1   1.2 -0.5960686      a    3.333333   0.5463679\n2:     2   4.3  1.4363967      b    2.500000   0.4549973\n3:     3   9.7 -0.5264020      b    2.500000   0.4549973\n4:     4   5.6  1.6849226      a    3.333333   0.5463679\n5:     5   8.1  0.5502497      a    3.333333   0.5463679",
    "crumbs": [
      "Data Table",
      "<span class='chapter-number'>34</span>  <span class='chapter-title'>data.table basics</span>"
    ]
  },
  {
    "objectID": "dtBasics.html#row-wise-operations",
    "href": "dtBasics.html#row-wise-operations",
    "title": "34  data.table basics",
    "section": "\n34.15 Row-wise operations",
    "text": "34.15 Row-wise operations\n\ndt &lt;- data.table(a = 1:5, b = 11:15, c = 21:25, \n                 d = 31:35, e = 41:45)\ndt\n\n       a     b     c     d     e\n   &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;\n1:     1    11    21    31    41\n2:     2    12    22    32    42\n3:     3    13    23    33    43\n4:     4    14    24    34    44\n5:     5    15    25    35    45\n\n\nTo operate row-wise, we can use by = 1:nrow(dt). For example, to add a column, in-place, with row-wise sums of variables b through d:\n\ndt[, bcd.sum := sum(.SD[, b:d]), by = 1:nrow(dt)]\ndt\n\n       a     b     c     d     e bcd.sum\n   &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;   &lt;int&gt;\n1:     1    11    21    31    41      63\n2:     2    12    22    32    42      66\n3:     3    13    23    33    43      69\n4:     4    14    24    34    44      72\n5:     5    15    25    35    45      75",
    "crumbs": [
      "Data Table",
      "<span class='chapter-number'>34</span>  <span class='chapter-title'>data.table basics</span>"
    ]
  },
  {
    "objectID": "dtBasics.html#watch-out-for-data.table-error-messages",
    "href": "dtBasics.html#watch-out-for-data.table-error-messages",
    "title": "34  data.table basics",
    "section": "\n34.16 Watch out for data.table error messages",
    "text": "34.16 Watch out for data.table error messages\nFor example",
    "crumbs": [
      "Data Table",
      "<span class='chapter-number'>34</span>  <span class='chapter-title'>data.table basics</span>"
    ]
  },
  {
    "objectID": "dtBasics.html#resources",
    "href": "dtBasics.html#resources",
    "title": "34  data.table basics",
    "section": "\n34.17 Resources",
    "text": "34.17 Resources\n\nIntroduction to data.table\nUsing .SD for Data Analysis",
    "crumbs": [
      "Data Table",
      "<span class='chapter-number'>34</span>  <span class='chapter-title'>data.table basics</span>"
    ]
  },
  {
    "objectID": "dtRefSem.html",
    "href": "dtRefSem.html",
    "title": "35  Reference Semantics",
    "section": "",
    "text": "35.1 Add column to data.frame\nThis chapter introduces the concept of reference semantics, which is used by the data.table package.\nWhen you create an object in R, it is stored at some location in memory. The address() function in the data.table package returns the memory address of an object.\nLet’s create a simple data.frame, df1:\ndf1 &lt;- data.frame(\n  ID = c(8001, 8002),\n  GCS = c(15, 13)\n)\n…and print its address:\naddress(df1)\n\n[1] \"0x10c3a6688\"\nRight now, we don’t care what the actual address is - but we want to keep track when it changes.\nLet’s add a new column to df1:\ndf1$HR &lt;- c(80, 90)\n…and print its address:\naddress(df1)\n\n[1] \"0x142876758\"\nThe address has changed, even though we’re still working on the “same” df1 object.",
    "crumbs": [
      "Data Table",
      "<span class='chapter-number'>35</span>  <span class='chapter-title'>Reference Semantics</span>"
    ]
  },
  {
    "objectID": "dtRefSem.html#add-column-to-data.table",
    "href": "dtRefSem.html#add-column-to-data.table",
    "title": "35  Reference Semantics",
    "section": "\n35.2 Add column to data.table",
    "text": "35.2 Add column to data.table\nLet’s create a simple data.table, dt1:\n\ndt1 &lt;- data.table(\n  ID = c(8001, 8002),\n  GCS = c(15, 13)\n)\n\n…and print its address:\n\naddress(dt1)\n\n[1] \"0x120e0ac00\"\n\n\nLet’s add a new column to dt1 in-place:\n\ndt1[, HR := c(80, 90)]\n\n…and print its address:\n\naddress(dt1)\n\n[1] \"0x120e0ac00\"\n\n\nThe address remains the same.\nWhat if we had used the data.frame syntax (which still works on a data.table) instead?\n\ndt1$HR &lt;- c(80, 90)\n\n\naddress(dt1)\n\n[1] \"0x143228400\"\n\n\nThe address indeed changes, just like with data.frames.\n\n\n\n\n\n\nImportant\n\n\n\nMaking copies of large objects can be time-consuming and memory-intensive. Up to this point, we have seen that making changes to data.table by reference, changes the object in-place and does not create a new copy.",
    "crumbs": [
      "Data Table",
      "<span class='chapter-number'>35</span>  <span class='chapter-title'>Reference Semantics</span>"
    ]
  },
  {
    "objectID": "dtRefSem.html#caution-with-reference-semantics",
    "href": "dtRefSem.html#caution-with-reference-semantics",
    "title": "35  Reference Semantics",
    "section": "\n35.3 Caution with reference semantics",
    "text": "35.3 Caution with reference semantics\nSo far so good, we start to understand one reason why data.table is efficient. One very important thing to keep in mind is that when you do want to make a copy of a data.table, e.g. to create a different version of it, you must use data.tables’s copy().\nLet’s see why.\n\n35.3.1 Copying a data.frame\nLet’s remind ourselves of the contents and address of df1:\n\ndf1\n\n    ID GCS HR\n1 8001  15 80\n2 8002  13 90\n\n\n\naddress(df1)\n\n[1] \"0x142876758\"\n\n\nTo make a copy of df1, we can simply assign it to a new object:\n\ndf2 &lt;- df1\n\n\ndf2\n\n    ID GCS HR\n1 8001  15 80\n2 8002  13 90\n\n\n\naddress(df2)\n\n[1] \"0x142876758\"\n\n\nThe address of df2 is the same as df1, which means they are pointing to the same object in memory.\nAs we’ve already seen, if we edit df2, its address will change:\n\ndf2[1, 3] &lt;- 75\n\n\ndf2\n\n    ID GCS HR\n1 8001  15 75\n2 8002  13 90\n\n\n\naddress(df2)\n\n[1] \"0x120bd4788\"\n\n\nThe contents and address of df2 have changed, but df1 remains the same, as you might expect:\n\ndf1\n\n    ID GCS HR\n1 8001  15 80\n2 8002  13 90\n\n\n\naddress(df1)\n\n[1] \"0x142876758\"\n\n\n\n35.3.2 Copying a data.table\nLet’s remind ourselves of the contenets and address of dt1:\n\ndt1\n\n      ID   GCS    HR\n   &lt;num&gt; &lt;num&gt; &lt;num&gt;\n1:  8001    15    80\n2:  8002    13    90\n\n\n\naddress(dt1)\n\n[1] \"0x143228400\"\n\n\nLet’s see what happens if we assign dt1 to a new object:\n\ndt2 &lt;- dt1\n\n\ndt2\n\n      ID   GCS    HR\n   &lt;num&gt; &lt;num&gt; &lt;num&gt;\n1:  8001    15    80\n2:  8002    13    90\n\n\n\naddress(dt2)\n\n[1] \"0x143228400\"\n\n\nSo far it’s the same as with data.frames.\nLet’s see what happens if we edit dt2 by reference:\n\ndt2[1, HR := 75]\n\n\ndt2\n\n      ID   GCS    HR\n   &lt;num&gt; &lt;num&gt; &lt;num&gt;\n1:  8001    15    75\n2:  8002    13    90\n\n\n\naddress(dt2)\n\n[1] \"0x143228400\"\n\n\nand let’s recheck dt1:\n\ndt1\n\n      ID   GCS    HR\n   &lt;num&gt; &lt;num&gt; &lt;num&gt;\n1:  8001    15    75\n2:  8002    13    90\n\n\ndt1 has changed as well, because dt1 and dt2 are still pointing to the same object in memory!\nThis is crucial to remember to avoid errors and confusion.\n\n\n\n\n\n\nImportant\n\n\n\nWhen you want to make a copy of a data.table, you must use the copy() function.\n\n\nLet’s see what happens if we use copy():\n\ndt3 &lt;- copy(dt1)\n\n\ndt3\n\n      ID   GCS    HR\n   &lt;num&gt; &lt;num&gt; &lt;num&gt;\n1:  8001    15    75\n2:  8002    13    90\n\n\n\naddress(dt1)\n\n[1] \"0x143228400\"\n\n\n\naddress(dt3)\n\n[1] \"0x1432dc400\"\n\n\ndt3 and dt1 are pointing to different objects in memory, so editing one does not affect the other.\n\ndt3[1, HR := 100]\n\n\ndt3\n\n      ID   GCS    HR\n   &lt;num&gt; &lt;num&gt; &lt;num&gt;\n1:  8001    15   100\n2:  8002    13    90\n\n\n\ndt1\n\n      ID   GCS    HR\n   &lt;num&gt; &lt;num&gt; &lt;num&gt;\n1:  8001    15    75\n2:  8002    13    90",
    "crumbs": [
      "Data Table",
      "<span class='chapter-number'>35</span>  <span class='chapter-title'>Reference Semantics</span>"
    ]
  },
  {
    "objectID": "dtRefSem.html#resources",
    "href": "dtRefSem.html#resources",
    "title": "35  Reference Semantics",
    "section": "\n35.4 Resources",
    "text": "35.4 Resources\n\ndata.table Reference Semantics",
    "crumbs": [
      "Data Table",
      "<span class='chapter-number'>35</span>  <span class='chapter-title'>Reference Semantics</span>"
    ]
  },
  {
    "objectID": "dtReshape.html",
    "href": "dtReshape.html",
    "title": "36  Reshape",
    "section": "",
    "text": "36.1 Long to wide using dcast()",
    "crumbs": [
      "Data Table",
      "<span class='chapter-number'>36</span>  <span class='chapter-title'>Reshape</span>"
    ]
  },
  {
    "objectID": "dtReshape.html#dcast",
    "href": "dtReshape.html#dcast",
    "title": "36  Reshape",
    "section": "",
    "text": "36.1.1 Example 1: key-value pairs\nUsing the same example seen in Chapter 26:\n\ndat_long &lt;- data.frame(\n    Account_ID = c(8001, 8002, 8003, 8004, 8001, 8002, 8003, 8004, \n            8001, 8002, 8003, 8004, 8001, 8002, 8003, 8004), \n    Age = c(67.8017038366664, 42.9198507293701, 46.2301756642422, \n            39.665983196671, 67.8017038366664, 42.9198507293701, \n            46.2301756642422, 39.665983196671, 67.8017038366664, \n            42.9198507293701, 46.2301756642422, 39.665983196671, \n            67.8017038366664, 42.9198507293701, 46.2301756642422, \n            39.665983196671), \n    Admission = c(\"ED\", \"Planned\", \"Planned\", \"ED\", \"ED\", \"Planned\", \n            \"Planned\", \"ED\", \"ED\", \"Planned\", \"Planned\", \"ED\", \"ED\", \"Planned\", \n            \"Planned\", \"ED\"), \n    Lab_key = c(\"RBC\", \"RBC\", \"RBC\", \"RBC\", \"WBC\", \"WBC\", \"WBC\", \"WBC\", \n            \"Hematocrit\", \"Hematocrit\", \"Hematocrit\", \"Hematocrit\", \n            \"Hemoglobin\", \"Hemoglobin\", \"Hemoglobin\", \"Hemoglobin\"), \n    Lab_value = c(4.63449321082268, 3.34968550627897, 4.27037213597765, \n            4.93897736897793, 8374.22887757195, 7612.37380499927, \n            8759.27855519425, 6972.28096216548, 36.272693147236, \n            40.5716317809522, 39.9888624177955, 39.8786884058422, \n            12.6188444991545, 12.1739747363806, 15.1293426442183, \n            14.8885696185238)\n)\ndat_long\n\n   Account_ID      Age Admission    Lab_key   Lab_value\n1        8001 67.80170        ED        RBC    4.634493\n2        8002 42.91985   Planned        RBC    3.349686\n3        8003 46.23018   Planned        RBC    4.270372\n4        8004 39.66598        ED        RBC    4.938977\n5        8001 67.80170        ED        WBC 8374.228878\n6        8002 42.91985   Planned        WBC 7612.373805\n7        8003 46.23018   Planned        WBC 8759.278555\n8        8004 39.66598        ED        WBC 6972.280962\n9        8001 67.80170        ED Hematocrit   36.272693\n10       8002 42.91985   Planned Hematocrit   40.571632\n11       8003 46.23018   Planned Hematocrit   39.988862\n12       8004 39.66598        ED Hematocrit   39.878688\n13       8001 67.80170        ED Hemoglobin   12.618844\n14       8002 42.91985   Planned Hemoglobin   12.173975\n15       8003 46.23018   Planned Hemoglobin   15.129343\n16       8004 39.66598        ED Hemoglobin   14.888570\n\n\ndata.table’s long to wide procedure is defined with a convenient formula notation:\n\ndat_long_dt &lt;- as.data.table(dat_long)\ndat_long2wide_dt &lt;- dcast(dat_long_dt,\n                          Account_ID + Age + Admission ~ Lab_key,\n                          value.var = \"Lab_value\")\ndat_long2wide_dt\n\nKey: &lt;Account_ID, Age, Admission&gt;\n   Account_ID      Age Admission Hematocrit Hemoglobin      RBC      WBC\n        &lt;num&gt;    &lt;num&gt;    &lt;char&gt;      &lt;num&gt;      &lt;num&gt;    &lt;num&gt;    &lt;num&gt;\n1:       8001 67.80170        ED   36.27269   12.61884 4.634493 8374.229\n2:       8002 42.91985   Planned   40.57163   12.17397 3.349686 7612.374\n3:       8003 46.23018   Planned   39.98886   15.12934 4.270372 8759.279\n4:       8004 39.66598        ED   39.87869   14.88857 4.938977 6972.281\n\n\nInstead of listing all variables you can use ..., which corresponds to all variables not otherwise mentioned in the formula or in value.var:\n\ndcast(dat_long_dt,\n      ... ~ Lab_key,\n      value.var = \"Lab_value\")\n\nKey: &lt;Account_ID, Age, Admission&gt;\n   Account_ID      Age Admission Hematocrit Hemoglobin      RBC      WBC\n        &lt;num&gt;    &lt;num&gt;    &lt;char&gt;      &lt;num&gt;      &lt;num&gt;    &lt;num&gt;    &lt;num&gt;\n1:       8001 67.80170        ED   36.27269   12.61884 4.634493 8374.229\n2:       8002 42.91985   Planned   40.57163   12.17397 3.349686 7612.374\n3:       8003 46.23018   Planned   39.98886   15.12934 4.270372 8759.279\n4:       8004 39.66598        ED   39.87869   14.88857 4.938977 6972.281\n\n\n\n36.1.2 Example 2: Timepoints\nAnother simple synthetic dataset:\n\ndt_long &lt;- data.table(\n        ID = c(1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L), \n        Timepoint = structure(c(1L, 1L, 1L, 1L, 2L, 2L, 2L, \n        2L, 3L, 3L, 3L, 3L), levels = c(\"Timepoint_A\", \"Timepoint_B\", \n        \"Timepoint_C\"), class = \"factor\"), \n        Score = c(11L, 12L, 13L, 14L, 21L, 22L, 23L, 24L, 51L, 52L, 53L, 54L)\n)\ndt_long\n\n       ID   Timepoint Score\n    &lt;int&gt;      &lt;fctr&gt; &lt;int&gt;\n 1:     1 Timepoint_A    11\n 2:     2 Timepoint_A    12\n 3:     3 Timepoint_A    13\n 4:     4 Timepoint_A    14\n 5:     1 Timepoint_B    21\n 6:     2 Timepoint_B    22\n 7:     3 Timepoint_B    23\n 8:     4 Timepoint_B    24\n 9:     1 Timepoint_C    51\n10:     2 Timepoint_C    52\n11:     3 Timepoint_C    53\n12:     4 Timepoint_C    54\n\n\n\ndt_long\n\n       ID   Timepoint Score\n    &lt;int&gt;      &lt;fctr&gt; &lt;int&gt;\n 1:     1 Timepoint_A    11\n 2:     2 Timepoint_A    12\n 3:     3 Timepoint_A    13\n 4:     4 Timepoint_A    14\n 5:     1 Timepoint_B    21\n 6:     2 Timepoint_B    22\n 7:     3 Timepoint_B    23\n 8:     4 Timepoint_B    24\n 9:     1 Timepoint_C    51\n10:     2 Timepoint_C    52\n11:     3 Timepoint_C    53\n12:     4 Timepoint_C    54\n\ndcast(dt_long, ID ~ Timepoint,\n      value.var = \"Score\")\n\nKey: &lt;ID&gt;\n      ID Timepoint_A Timepoint_B Timepoint_C\n   &lt;int&gt;       &lt;int&gt;       &lt;int&gt;       &lt;int&gt;\n1:     1          11          21          51\n2:     2          12          22          52\n3:     3          13          23          53\n4:     4          14          24          54\n\n\n\n36.1.3 dcast() + aggregate\nIf your ID ~ Timepoint combination does not define a unique row in your input dataset, you need to specify an aggregate function.\nFor example, suppose you have four subjects with IDs “A”, “B”, “C”, “D” who had a couple variables measured 3 times in the AM and 3 times in the PM.\n\ndt_long2 &lt;- data.table(ID = rep(LETTERS[1:4], each = 6),\n                      Timepoint = rep(c(\"AM\", \"PM\"), length.out = 24, each = 3),\n                      Var1 = rnorm(24, mean = 10),\n                      Var2 = rnorm(24, mean = 20))\n\ndt_long2[sample(24, size = 4), Var1 := NA]\ndt_long2[sample(24, size = 4), Var2 := NA]\ndt_long2\n\n        ID Timepoint      Var1     Var2\n    &lt;char&gt;    &lt;char&gt;     &lt;num&gt;    &lt;num&gt;\n 1:      A        AM  9.095061 20.55069\n 2:      A        AM 10.024434       NA\n 3:      A        AM 10.280247 19.98988\n 4:      A        PM        NA 20.32035\n 5:      A        PM 11.505311 19.72577\n 6:      A        PM 10.045226 20.43301\n 7:      B        AM 10.258153 19.77664\n 8:      B        AM  9.781122       NA\n 9:      B        AM 10.901976 19.13577\n10:      B        PM        NA 20.83391\n11:      B        PM 10.208148 21.79704\n12:      B        PM 10.442472 20.17209\n13:      C        AM  9.835870 17.95787\n14:      C        AM  9.952885 19.22704\n15:      C        AM 11.462364 19.60074\n16:      C        PM        NA 20.48730\n17:      C        PM  7.973092 15.95908\n18:      C        PM 10.835813 19.39142\n19:      D        AM  8.211689 20.02134\n20:      D        AM 11.016285       NA\n21:      D        AM        NA 19.64777\n22:      D        PM 10.905356 18.92603\n23:      D        PM  9.431838       NA\n24:      D        PM  8.143880 20.31228\n        ID Timepoint      Var1     Var2\n\n\nIf you wanted to convert the above data.table to wide format and get mean AM and PM values using the fun.aggregate argument:\n\ndcast(dt_long2,\n      ID ~ Timepoint,\n      value.var = c(\"Var1\", \"Var2\"),\n      fun.aggregate = mean, na.rm = TRUE)\n\nKey: &lt;ID&gt;\n       ID   Var1_AM   Var1_PM  Var2_AM  Var2_PM\n   &lt;char&gt;     &lt;num&gt;     &lt;num&gt;    &lt;num&gt;    &lt;num&gt;\n1:      A  9.799914 10.775268 20.27029 20.15971\n2:      B 10.313751 10.325310 19.45621 20.93434\n3:      C 10.417040  9.404453 18.92855 18.61260\n4:      D  9.613987  9.493691 19.83456 19.61916\n\n\nYou can apply multiple aggregating functions by passing a list to fun.aggregate:\n\ndcast(dt_long2,\n      ID ~ Timepoint,\n      value.var = c(\"Var1\", \"Var2\"),\n      fun.aggregate = list(mean, max, min), na.rm = TRUE)\n\nKey: &lt;ID&gt;\n       ID Var1_mean_AM Var1_mean_PM Var2_mean_AM Var2_mean_PM Var1_max_AM\n   &lt;char&gt;        &lt;num&gt;        &lt;num&gt;        &lt;num&gt;        &lt;num&gt;       &lt;num&gt;\n1:      A     9.799914    10.775268     20.27029     20.15971    10.28025\n2:      B    10.313751    10.325310     19.45621     20.93434    10.90198\n3:      C    10.417040     9.404453     18.92855     18.61260    11.46236\n4:      D     9.613987     9.493691     19.83456     19.61916    11.01628\n   Var1_max_PM Var2_max_AM Var2_max_PM Var1_min_AM Var1_min_PM Var2_min_AM\n         &lt;num&gt;       &lt;num&gt;       &lt;num&gt;       &lt;num&gt;       &lt;num&gt;       &lt;num&gt;\n1:    11.50531    20.55069    20.43301    9.095061   10.045226    19.98988\n2:    10.44247    19.77664    21.79704    9.781122   10.208148    19.13577\n3:    10.83581    19.60074    20.48730    9.835870    7.973092    17.95787\n4:    10.90536    20.02134    20.31228    8.211689    8.143880    19.64777\n   Var2_min_PM\n         &lt;num&gt;\n1:    19.72577\n2:    20.17209\n3:    15.95908\n4:    18.92603\n\n\nNote how na.rm = TRUE was successfully applied to all aggregating functions",
    "crumbs": [
      "Data Table",
      "<span class='chapter-number'>36</span>  <span class='chapter-title'>Reshape</span>"
    ]
  },
  {
    "objectID": "dtReshape.html#melt",
    "href": "dtReshape.html#melt",
    "title": "36  Reshape",
    "section": "\n36.2 Wide to long: melt()\n",
    "text": "36.2 Wide to long: melt()\n\n\n36.2.1 Example 1\n\ndt_wide &lt;- data.table(\n        ID = 1:4,\n        Timepoint_A = 11:14,\n        Timepoint_B = 21:24,\n        Timepoint_C = 51:54)\ndt_wide\n\n      ID Timepoint_A Timepoint_B Timepoint_C\n   &lt;int&gt;       &lt;int&gt;       &lt;int&gt;       &lt;int&gt;\n1:     1          11          21          51\n2:     2          12          22          52\n3:     3          13          23          53\n4:     4          14          24          54\n\n\n\ndt_long &lt;- melt(\n        dt_wide, \n        id.vars = \"ID\",\n        measure.vars = 2:4, # defaults to all non-id columns\n        variable.name = \"Timepoint\",\n        value.name = c(\"Score\"))\ndt_long\n\n       ID   Timepoint Score\n    &lt;int&gt;      &lt;fctr&gt; &lt;int&gt;\n 1:     1 Timepoint_A    11\n 2:     2 Timepoint_A    12\n 3:     3 Timepoint_A    13\n 4:     4 Timepoint_A    14\n 5:     1 Timepoint_B    21\n 6:     2 Timepoint_B    22\n 7:     3 Timepoint_B    23\n 8:     4 Timepoint_B    24\n 9:     1 Timepoint_C    51\n10:     2 Timepoint_C    52\n11:     3 Timepoint_C    53\n12:     4 Timepoint_C    54\n\n\n\n36.2.2 Example 2\nUsing the same synthetic data as in Chapter 26:\n\ndat_wide_dt &lt;- data.table(\n    Account_ID = c(8001, 8002, 8003, 8004),\n    Age = rnorm(4, mean = 57, sd = 12),\n    RBC = rnorm(4, mean = 4.8, sd = 0.5),\n    WBC = rnorm(4, mean = 7250, sd = 1500),\n    Hematocrit = rnorm(4, mean = 40.2, sd = 4),\n    Hemoglobin = rnorm(4, mean = 13.6, sd = 1.5),\n    Admission = sample(c(\"ED\", \"Planned\"), size = 4, replace = TRUE)\n)\ndat_wide_dt\n\n   Account_ID      Age      RBC      WBC Hematocrit Hemoglobin Admission\n        &lt;num&gt;    &lt;num&gt;    &lt;num&gt;    &lt;num&gt;      &lt;num&gt;      &lt;num&gt;    &lt;char&gt;\n1:       8001 58.45752 4.675691 7776.085   35.61951   13.76775   Planned\n2:       8002 38.29222 5.344828 8158.330   41.50580   13.91031   Planned\n3:       8003 60.75944 4.482781 7182.376   42.62882   13.85600        ED\n4:       8004 63.58479 5.968185 5453.067   44.84574   13.89564        ED\n\n\n\ndat_wide2long_dt &lt;- melt(dat_wide_dt,\n                         id.vars = c(1:2, 7),\n                         measure.vars = 3:6,\n                         variable.name = \"Lab_key\",\n                         value.name = \"Lab_value\")\ndat_wide2long_dt\n\n    Account_ID      Age Admission    Lab_key   Lab_value\n         &lt;num&gt;    &lt;num&gt;    &lt;char&gt;     &lt;fctr&gt;       &lt;num&gt;\n 1:       8001 58.45752   Planned        RBC    4.675691\n 2:       8002 38.29222   Planned        RBC    5.344828\n 3:       8003 60.75944        ED        RBC    4.482781\n 4:       8004 63.58479        ED        RBC    5.968185\n 5:       8001 58.45752   Planned        WBC 7776.085457\n 6:       8002 38.29222   Planned        WBC 8158.330363\n 7:       8003 60.75944        ED        WBC 7182.375695\n 8:       8004 63.58479        ED        WBC 5453.066686\n 9:       8001 58.45752   Planned Hematocrit   35.619509\n10:       8002 38.29222   Planned Hematocrit   41.505801\n11:       8003 60.75944        ED Hematocrit   42.628816\n12:       8004 63.58479        ED Hematocrit   44.845745\n13:       8001 58.45752   Planned Hemoglobin   13.767750\n14:       8002 38.29222   Planned Hemoglobin   13.910312\n15:       8003 60.75944        ED Hemoglobin   13.856005\n16:       8004 63.58479        ED Hemoglobin   13.895635\n\n\nIf desired, you can set the ID column as they key, which will sort the data.table by its values:\n\nsetorder(dat_wide2long_dt, \"Account_ID\")\ndat_wide2long_dt\n\n    Account_ID      Age Admission    Lab_key   Lab_value\n         &lt;num&gt;    &lt;num&gt;    &lt;char&gt;     &lt;fctr&gt;       &lt;num&gt;\n 1:       8001 58.45752   Planned        RBC    4.675691\n 2:       8001 58.45752   Planned        WBC 7776.085457\n 3:       8001 58.45752   Planned Hematocrit   35.619509\n 4:       8001 58.45752   Planned Hemoglobin   13.767750\n 5:       8002 38.29222   Planned        RBC    5.344828\n 6:       8002 38.29222   Planned        WBC 8158.330363\n 7:       8002 38.29222   Planned Hematocrit   41.505801\n 8:       8002 38.29222   Planned Hemoglobin   13.910312\n 9:       8003 60.75944        ED        RBC    4.482781\n10:       8003 60.75944        ED        WBC 7182.375695\n11:       8003 60.75944        ED Hematocrit   42.628816\n12:       8003 60.75944        ED Hemoglobin   13.856005\n13:       8004 63.58479        ED        RBC    5.968185\n14:       8004 63.58479        ED        WBC 5453.066686\n15:       8004 63.58479        ED Hematocrit   44.845745\n16:       8004 63.58479        ED Hemoglobin   13.895635",
    "crumbs": [
      "Data Table",
      "<span class='chapter-number'>36</span>  <span class='chapter-title'>Reshape</span>"
    ]
  },
  {
    "objectID": "dtReshape.html#see-also",
    "href": "dtReshape.html#see-also",
    "title": "36  Reshape",
    "section": "\n36.3 See also",
    "text": "36.3 See also\n\nbase reshape\ntidyr reshape",
    "crumbs": [
      "Data Table",
      "<span class='chapter-number'>36</span>  <span class='chapter-title'>Reshape</span>"
    ]
  },
  {
    "objectID": "dtReshape.html#resources",
    "href": "dtReshape.html#resources",
    "title": "36  Reshape",
    "section": "\n36.4 Resources",
    "text": "36.4 Resources\n\nEfficient reshaping using data.tables",
    "crumbs": [
      "Data Table",
      "<span class='chapter-number'>36</span>  <span class='chapter-title'>Reshape</span>"
    ]
  },
  {
    "objectID": "dtJoin.html",
    "href": "dtJoin.html",
    "title": "37  Joins",
    "section": "",
    "text": "37.1 Inner join\ndata.table allows you to perform table joins with either:\nIn the above command we use the key argument to set PID as key. This can be performed after the data.table has been created using the setkey() command:\nMultiple keys can be set, in order, with the same setkey() command, separated by commas, e.g.\nKeys sort the data.table by the corresponding columns and can be used to perform left and right joins with bracket notation seen later.\nmerge(a, b)\n\nKey: &lt;PID&gt;\n     PID Hospital   Age   Sex    V1 Department\n   &lt;int&gt;   &lt;char&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt;     &lt;char&gt;\n1:     6      HUP    21     0   153  Neurology\n2:     7      HUP    63     1    89  Radiology\n3:     8 Stanford    22     0   112  Emergency\n4:     9     UCSF    19     0   228 Cardiology",
    "crumbs": [
      "Data Table",
      "<span class='chapter-number'>37</span>  <span class='chapter-title'>Joins</span>"
    ]
  },
  {
    "objectID": "dtJoin.html#outer-join",
    "href": "dtJoin.html#outer-join",
    "title": "37  Joins",
    "section": "\n37.2 Outer join",
    "text": "37.2 Outer join\n\nmerge(a, b, all = TRUE)\n\nKey: &lt;PID&gt;\n      PID Hospital   Age   Sex    V1 Department\n    &lt;int&gt;   &lt;char&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt;     &lt;char&gt;\n 1:     1     UCSF    22     1    NA       &lt;NA&gt;\n 2:     2      HUP    34     1    NA       &lt;NA&gt;\n 3:     3 Stanford    41     0    NA       &lt;NA&gt;\n 4:     4 Stanford    19     1    NA       &lt;NA&gt;\n 5:     5     UCSF    53     0    NA       &lt;NA&gt;\n 6:     6      HUP    21     0   153  Neurology\n 7:     7      HUP    63     1    89  Radiology\n 8:     8 Stanford    22     0   112  Emergency\n 9:     9     UCSF    19     0   228 Cardiology\n10:    10     &lt;NA&gt;    NA    NA    91    Surgery\n11:    11     &lt;NA&gt;    NA    NA   190  Neurology\n12:    12     &lt;NA&gt;    NA    NA   101 Psychiatry",
    "crumbs": [
      "Data Table",
      "<span class='chapter-number'>37</span>  <span class='chapter-title'>Joins</span>"
    ]
  },
  {
    "objectID": "dtJoin.html#left-outer-join",
    "href": "dtJoin.html#left-outer-join",
    "title": "37  Joins",
    "section": "\n37.3 Left outer join",
    "text": "37.3 Left outer join\nUsing merge():\n\nmerge(a, b, all.x = TRUE)\n\nKey: &lt;PID&gt;\n     PID Hospital   Age   Sex    V1 Department\n   &lt;int&gt;   &lt;char&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt;     &lt;char&gt;\n1:     1     UCSF    22     1    NA       &lt;NA&gt;\n2:     2      HUP    34     1    NA       &lt;NA&gt;\n3:     3 Stanford    41     0    NA       &lt;NA&gt;\n4:     4 Stanford    19     1    NA       &lt;NA&gt;\n5:     5     UCSF    53     0    NA       &lt;NA&gt;\n6:     6      HUP    21     0   153  Neurology\n7:     7      HUP    63     1    89  Radiology\n8:     8 Stanford    22     0   112  Emergency\n9:     9     UCSF    19     0   228 Cardiology\n\n\nUsing bracket notation:\n\nb[a, ]\n\nKey: &lt;PID&gt;\n     PID    V1 Department Hospital   Age   Sex\n   &lt;int&gt; &lt;num&gt;     &lt;char&gt;   &lt;char&gt; &lt;num&gt; &lt;num&gt;\n1:     1    NA       &lt;NA&gt;     UCSF    22     1\n2:     2    NA       &lt;NA&gt;      HUP    34     1\n3:     3    NA       &lt;NA&gt; Stanford    41     0\n4:     4    NA       &lt;NA&gt; Stanford    19     1\n5:     5    NA       &lt;NA&gt;     UCSF    53     0\n6:     6   153  Neurology      HUP    21     0\n7:     7    89  Radiology      HUP    63     1\n8:     8   112  Emergency Stanford    22     0\n9:     9   228 Cardiology     UCSF    19     0\n\n\nIf keys were not set for a and b, you could specify the column to match on using the on argument:\n\nb[a, on = \"PID\"]\n\nKey: &lt;PID&gt;\n     PID    V1 Department Hospital   Age   Sex\n   &lt;int&gt; &lt;num&gt;     &lt;char&gt;   &lt;char&gt; &lt;num&gt; &lt;num&gt;\n1:     1    NA       &lt;NA&gt;     UCSF    22     1\n2:     2    NA       &lt;NA&gt;      HUP    34     1\n3:     3    NA       &lt;NA&gt; Stanford    41     0\n4:     4    NA       &lt;NA&gt; Stanford    19     1\n5:     5    NA       &lt;NA&gt;     UCSF    53     0\n6:     6   153  Neurology      HUP    21     0\n7:     7    89  Radiology      HUP    63     1\n8:     8   112  Emergency Stanford    22     0\n9:     9   228 Cardiology     UCSF    19     0\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe easy way to understand the bracket notation merges is to think that the data.table inside the bracket is used to index the data.table on the outside, therefore the resulting table will have rows dictated by the inside table’s key.",
    "crumbs": [
      "Data Table",
      "<span class='chapter-number'>37</span>  <span class='chapter-title'>Joins</span>"
    ]
  },
  {
    "objectID": "dtJoin.html#right-outer-join",
    "href": "dtJoin.html#right-outer-join",
    "title": "37  Joins",
    "section": "\n37.4 Right outer join",
    "text": "37.4 Right outer join\n\nmerge(a, b, all.y = TRUE)\n\nKey: &lt;PID&gt;\n     PID Hospital   Age   Sex    V1 Department\n   &lt;int&gt;   &lt;char&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt;     &lt;char&gt;\n1:     6      HUP    21     0   153  Neurology\n2:     7      HUP    63     1    89  Radiology\n3:     8 Stanford    22     0   112  Emergency\n4:     9     UCSF    19     0   228 Cardiology\n5:    10     &lt;NA&gt;    NA    NA    91    Surgery\n6:    11     &lt;NA&gt;    NA    NA   190  Neurology\n7:    12     &lt;NA&gt;    NA    NA   101 Psychiatry\n\n\nUsing bracket notation:\n\na[b, ]\n\nKey: &lt;PID&gt;\n     PID Hospital   Age   Sex    V1 Department\n   &lt;int&gt;   &lt;char&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt;     &lt;char&gt;\n1:     6      HUP    21     0   153  Neurology\n2:     7      HUP    63     1    89  Radiology\n3:     8 Stanford    22     0   112  Emergency\n4:     9     UCSF    19     0   228 Cardiology\n5:    10     &lt;NA&gt;    NA    NA    91    Surgery\n6:    11     &lt;NA&gt;    NA    NA   190  Neurology\n7:    12     &lt;NA&gt;    NA    NA   101 Psychiatry",
    "crumbs": [
      "Data Table",
      "<span class='chapter-number'>37</span>  <span class='chapter-title'>Joins</span>"
    ]
  },
  {
    "objectID": "dtJoin.html#see-also",
    "href": "dtJoin.html#see-also",
    "title": "37  Joins",
    "section": "\n37.5 See also",
    "text": "37.5 See also\n\nbase R joins\ndplyr joins",
    "crumbs": [
      "Data Table",
      "<span class='chapter-number'>37</span>  <span class='chapter-title'>Joins</span>"
    ]
  },
  {
    "objectID": "dtJoin.html#resources",
    "href": "dtJoin.html#resources",
    "title": "37  Joins",
    "section": "\n37.6 Resources",
    "text": "37.6 Resources\n\ndata.table joins",
    "crumbs": [
      "Data Table",
      "<span class='chapter-number'>37</span>  <span class='chapter-title'>Joins</span>"
    ]
  },
  {
    "objectID": "dtAdvanced.html",
    "href": "dtAdvanced.html",
    "title": "38  Advanced Usage",
    "section": "",
    "text": "38.1 Count by group using .N\nThis is a growing list of slightly more advanced examples using data.table.\nlibrary(palmerpenguins)\npeng &lt;- as.data.table(penguins)\nExample: Count penguins by island:\npeng[, .N, by = island]\n\n      island     N\n      &lt;fctr&gt; &lt;int&gt;\n1: Torgersen    52\n2:    Biscoe   168\n3:     Dream   124\nExample: Count by island and species:\npeng[, .N, by = list(island, species)]\n\n      island   species     N\n      &lt;fctr&gt;    &lt;fctr&gt; &lt;int&gt;\n1: Torgersen    Adelie    52\n2:    Biscoe    Adelie    44\n3:     Dream    Adelie    56\n4:    Biscoe    Gentoo   124\n5:     Dream Chinstrap    68",
    "crumbs": [
      "Data Table",
      "<span class='chapter-number'>38</span>  <span class='chapter-title'>Advanced Usage</span>"
    ]
  },
  {
    "objectID": "dtAdvanced.html#index-within-groups-using-.i",
    "href": "dtAdvanced.html#index-within-groups-using-.i",
    "title": "38  Advanced Usage",
    "section": "\n38.2 Index within groups using .I\n",
    "text": "38.2 Index within groups using .I\n\nFor example, get index for min or max within each group, where index refers to the entire data.table.\nLook at the documentation for .I\n\nir &lt;- as.data.table(iris)\nir[, .I[which.max(Petal.Width)], by = Species]\n\n      Species    V1\n       &lt;fctr&gt; &lt;int&gt;\n1:     setosa    44\n2: versicolor    71\n3:  virginica   101\n\n\nUse that to get the case with max Petal.Width from each Species\n\nir[, ir[, .I[which.max(Petal.Width)], by = Species][[2]]]\n\n[1]  44  71 101",
    "crumbs": [
      "Data Table",
      "<span class='chapter-number'>38</span>  <span class='chapter-title'>Advanced Usage</span>"
    ]
  },
  {
    "objectID": "dtAdvanced.html#see-also",
    "href": "dtAdvanced.html#see-also",
    "title": "38  Advanced Usage",
    "section": "\n38.3 See also",
    "text": "38.3 See also\n\ndata.table docs",
    "crumbs": [
      "Data Table",
      "<span class='chapter-number'>38</span>  <span class='chapter-title'>Advanced Usage</span>"
    ]
  },
  {
    "objectID": "Tidyverse.html",
    "href": "Tidyverse.html",
    "title": "Tidyverse",
    "section": "",
    "text": "The tidyverse is a collection of packages offering an alternative to base R or data.table for data manipulation.\nTidyverse packages and functions within packages are under active development and have changed names and syntax multiple times since their introduction.\nThis section includes only a brief look at some tidyverse functions.",
    "crumbs": [
      "Tidyverse"
    ]
  },
  {
    "objectID": "dplyr.html",
    "href": "dplyr.html",
    "title": "39  Introduction to dplyr",
    "section": "",
    "text": "39.1 Filter\nThe dplyr package offers extensive functionality for data manipulation.  dplyr’s functions are named after verbs (like filter, select, etc.) and are commonly used with the pipe operator to build pipelines. The package offers a large number of functions in total, often with multiple versions of the same “verb”. It has undergone many major changes since its introduction, so always make sure to consult the latest documentation.\nCore operations include:\ndplyr operates on data.frames as well as the tidyverse’s data.frame replacement, known as tibble.\nNote that dplyr masks some builtin functions when loaded.\nAs an example, we read in the Heart Failure Clinical Records dataset from the UCI Machine Learning Repository using readr.\nSingle condition\ndat |&gt; \n    filter(age &gt; 60)\n\n# A tibble: 137 × 13\n     age anaemia creatinine_phosphokinase diabetes ejection_fraction\n   &lt;dbl&gt; &lt;fct&gt;                      &lt;dbl&gt; &lt;fct&gt;                &lt;dbl&gt;\n 1    75 0                            582 0                       20\n 2    65 0                            146 0                       20\n 3    65 1                            160 1                       20\n 4    90 1                             47 0                       40\n 5    75 1                            246 0                       15\n 6    65 0                            157 0                       65\n 7    80 1                            123 0                       35\n 8    75 1                             81 0                       38\n 9    62 0                            231 0                       25\n10    82 1                            379 0                       50\n# ℹ 127 more rows\n# ℹ 8 more variables: high_blood_pressure &lt;fct&gt;, platelets &lt;dbl&gt;,\n#   serum_creatinine &lt;dbl&gt;, serum_sodium &lt;dbl&gt;, sex &lt;fct&gt;, smoking &lt;fct&gt;,\n#   time &lt;dbl&gt;, DEATH_EVENT &lt;fct&gt;\nMultiple conditions\ndat |&gt; \n    filter(age &gt; 60, anaemia == \"1\")\n\n# A tibble: 61 × 13\n     age anaemia creatinine_phosphokinase diabetes ejection_fraction\n   &lt;dbl&gt; &lt;fct&gt;                      &lt;dbl&gt; &lt;fct&gt;                &lt;dbl&gt;\n 1    65 1                            160 1                       20\n 2    90 1                             47 0                       40\n 3    75 1                            246 0                       15\n 4    80 1                            123 0                       35\n 5    75 1                             81 0                       38\n 6    82 1                            379 0                       50\n 7    87 1                            149 0                       38\n 8    70 1                            125 0                       25\n 9    65 1                             52 0                       25\n10    65 1                            128 1                       30\n# ℹ 51 more rows\n# ℹ 8 more variables: high_blood_pressure &lt;fct&gt;, platelets &lt;dbl&gt;,\n#   serum_creatinine &lt;dbl&gt;, serum_sodium &lt;dbl&gt;, sex &lt;fct&gt;, smoking &lt;fct&gt;,\n#   time &lt;dbl&gt;, DEATH_EVENT &lt;fct&gt;",
    "crumbs": [
      "Tidyverse",
      "<span class='chapter-number'>39</span>  <span class='chapter-title'>Introduction to dplyr</span>"
    ]
  },
  {
    "objectID": "dplyr.html#select",
    "href": "dplyr.html#select",
    "title": "39  Introduction to dplyr",
    "section": "\n39.2 Select",
    "text": "39.2 Select\nColumns can be specified by name, index, or pattern-matching.\n\n39.2.1 By column name\n\ndat |&gt; \n    select(\"age\", \"diabetes\", \"ejection_fraction\")\n\n# A tibble: 299 × 3\n     age diabetes ejection_fraction\n   &lt;dbl&gt; &lt;fct&gt;                &lt;dbl&gt;\n 1    75 0                       20\n 2    55 0                       38\n 3    65 0                       20\n 4    50 0                       20\n 5    65 1                       20\n 6    90 0                       40\n 7    75 0                       15\n 8    60 1                       60\n 9    65 0                       65\n10    80 0                       35\n# ℹ 289 more rows\n\n\n\n39.2.2 By integer column index\n\ndat |&gt; \n    select(c(7, 9))\n\n# A tibble: 299 × 2\n   platelets serum_sodium\n       &lt;dbl&gt;        &lt;dbl&gt;\n 1   265000           130\n 2   263358.          136\n 3   162000           129\n 4   210000           137\n 5   327000           116\n 6   204000           132\n 7   127000           137\n 8   454000           131\n 9   263358.          138\n10   388000           133\n# ℹ 289 more rows\n\n\n\ndat |&gt; \n    select(7:9)\n\n# A tibble: 299 × 3\n   platelets serum_creatinine serum_sodium\n       &lt;dbl&gt;            &lt;dbl&gt;        &lt;dbl&gt;\n 1   265000               1.9          130\n 2   263358.              1.1          136\n 3   162000               1.3          129\n 4   210000               1.9          137\n 5   327000               2.7          116\n 6   204000               2.1          132\n 7   127000               1.2          137\n 8   454000               1.1          131\n 9   263358.              1.5          138\n10   388000               9.4          133\n# ℹ 289 more rows\n\n\n\n39.2.3 By character name range\nFor example, select all columns between platelets and serum_sodium in the order they appear in the data.frame/tibble:\n\ndat |&gt; \n    select(platelets:serum_sodium)\n\n# A tibble: 299 × 3\n   platelets serum_creatinine serum_sodium\n       &lt;dbl&gt;            &lt;dbl&gt;        &lt;dbl&gt;\n 1   265000               1.9          130\n 2   263358.              1.1          136\n 3   162000               1.3          129\n 4   210000               1.9          137\n 5   327000               2.7          116\n 6   204000               2.1          132\n 7   127000               1.2          137\n 8   454000               1.1          131\n 9   263358.              1.5          138\n10   388000               9.4          133\n# ℹ 289 more rows\n\n\n\n39.2.4 Pattern-matching\n\ndat |&gt; \n    select(starts_with(\"serum_\"))\n\n# A tibble: 299 × 2\n   serum_creatinine serum_sodium\n              &lt;dbl&gt;        &lt;dbl&gt;\n 1              1.9          130\n 2              1.1          136\n 3              1.3          129\n 4              1.9          137\n 5              2.7          116\n 6              2.1          132\n 7              1.2          137\n 8              1.1          131\n 9              1.5          138\n10              9.4          133\n# ℹ 289 more rows\n\n\n\ndat |&gt; \n    select(ends_with(\"fraction\"))\n\n# A tibble: 299 × 1\n   ejection_fraction\n               &lt;dbl&gt;\n 1                20\n 2                38\n 3                20\n 4                20\n 5                20\n 6                40\n 7                15\n 8                60\n 9                65\n10                35\n# ℹ 289 more rows",
    "crumbs": [
      "Tidyverse",
      "<span class='chapter-number'>39</span>  <span class='chapter-title'>Introduction to dplyr</span>"
    ]
  },
  {
    "objectID": "dplyr.html#summarize",
    "href": "dplyr.html#summarize",
    "title": "39  Introduction to dplyr",
    "section": "\n39.3 Summarize",
    "text": "39.3 Summarize\nOperate on a single column:\n\ndat |&gt; \n    summarize(mean(age))\n\n# A tibble: 1 × 1\n  `mean(age)`\n        &lt;dbl&gt;\n1        60.8\n\n\nOperate on multiple columns using across():\n\ndat |&gt; \n    summarize(across(c(age, ejection_fraction), mean))\n\n# A tibble: 1 × 2\n    age ejection_fraction\n  &lt;dbl&gt;             &lt;dbl&gt;\n1  60.8              38.1\n\n\n\n39.3.1 Grouped operation on single column\nwith single groupin variable:\n\ndat |&gt; \n    group_by(sex) |&gt; \n    summarize(mean(age))\n\n# A tibble: 2 × 2\n  sex   `mean(age)`\n  &lt;fct&gt;       &lt;dbl&gt;\n1 0            59.8\n2 1            61.4\n\n\nwith multiple grouping variables:\n\ndat |&gt; \n    group_by(sex, diabetes) |&gt;\n    summarize(mean(age))\n\n`summarise()` has grouped output by 'sex'. You can override using the `.groups`\nargument.\n\n\n# A tibble: 4 × 3\n# Groups:   sex [2]\n  sex   diabetes `mean(age)`\n  &lt;fct&gt; &lt;fct&gt;          &lt;dbl&gt;\n1 0     0               61.6\n2 0     1               58.2\n3 1     0               62.0\n4 1     1               60.4\n\n\n\n39.3.2 Grouped operation on multiple columns\n\ndat |&gt; \n    group_by(sex) |&gt; \n    summarize(across(c(age, serum_sodium), mean))\n\n# A tibble: 2 × 3\n  sex     age serum_sodium\n  &lt;fct&gt; &lt;dbl&gt;        &lt;dbl&gt;\n1 0      59.8         137.\n2 1      61.4         137.\n\n\n\ndat |&gt; \n    group_by(smoking, anaemia) |&gt; \n    summarize(across(c(age, serum_sodium), mean))\n\n`summarise()` has grouped output by 'smoking'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 4 × 4\n# Groups:   smoking [2]\n  smoking anaemia   age serum_sodium\n  &lt;fct&gt;   &lt;fct&gt;   &lt;dbl&gt;        &lt;dbl&gt;\n1 0       0        59.7         136.\n2 0       1        61.8         137.\n3 1       0        60.4         136.\n4 1       1        62.6         137",
    "crumbs": [
      "Tidyverse",
      "<span class='chapter-number'>39</span>  <span class='chapter-title'>Introduction to dplyr</span>"
    ]
  },
  {
    "objectID": "dplyr.html#arrange",
    "href": "dplyr.html#arrange",
    "title": "39  Introduction to dplyr",
    "section": "\n39.4 Arrange",
    "text": "39.4 Arrange\narrange() sorts a data.frame/tibble, i.e. reorders the rows/cases of a dataset.\n\ndat |&gt; \n    select(age, sex, serum_sodium) |&gt; \n    arrange(age)\n\n# A tibble: 299 × 3\n     age sex   serum_sodium\n   &lt;dbl&gt; &lt;fct&gt;        &lt;dbl&gt;\n 1    40 1              136\n 2    40 0              140\n 3    40 0              141\n 4    40 1              137\n 5    40 1              136\n 6    40 1              142\n 7    40 1              132\n 8    41 1              140\n 9    42 0              136\n10    42 1              140\n# ℹ 289 more rows\n\n\n\n39.4.1 Grouped\n\ndat |&gt; \n    select(age, sex, serum_sodium) |&gt; \n    group_by(sex) |&gt; \n    arrange(age)\n\n# A tibble: 299 × 3\n# Groups:   sex [2]\n     age sex   serum_sodium\n   &lt;dbl&gt; &lt;fct&gt;        &lt;dbl&gt;\n 1    40 1              136\n 2    40 0              140\n 3    40 0              141\n 4    40 1              137\n 5    40 1              136\n 6    40 1              142\n 7    40 1              132\n 8    41 1              140\n 9    42 0              136\n10    42 1              140\n# ℹ 289 more rows",
    "crumbs": [
      "Tidyverse",
      "<span class='chapter-number'>39</span>  <span class='chapter-title'>Introduction to dplyr</span>"
    ]
  },
  {
    "objectID": "dplyr.html#mutate",
    "href": "dplyr.html#mutate",
    "title": "39  Introduction to dplyr",
    "section": "\n39.5 Mutate",
    "text": "39.5 Mutate\nAdd a new column named Age_days:\n\ndat &lt;- dat |&gt; \n    mutate(Age_days = age * 365)\n\n\ndat$Age_days\n\n  [1] 27375.00 20075.00 23725.00 18250.00 23725.00 32850.00 27375.00 21900.00\n  [9] 23725.00 29200.00 27375.00 22630.00 16425.00 18250.00 17885.00 29930.00\n [17] 31755.00 16425.00 25550.00 17520.00 23725.00 23725.00 24820.00 19345.00\n [25] 27375.00 29200.00 34675.00 25550.00 21170.00 29930.00 34310.00 31025.00\n [33] 18250.00 18250.00 23725.00 25185.00 32850.00 29930.00 21900.00 21900.00\n [41] 25550.00 18250.00 25550.00 26280.00 21900.00 18250.00 18615.00 21900.00\n [49] 29200.00 20805.00 24820.00 19345.00 21900.00 25550.00 21900.00 34675.00\n [57] 25550.00 21900.00 17885.00 26280.00 16425.00 18250.00 20075.00 16425.00\n [65] 16425.00 21900.00 15330.00 26280.00 25550.00 23725.00 14965.00 21170.00\n [73] 31025.00 23725.00 25185.00 21900.00 25550.00 15330.00 27375.00 20075.00\n [81] 25550.00 24455.00 21900.00 28835.00 21535.00 18615.00 20075.00 23725.00\n [89] 16060.00 20805.00 25550.00 21900.00 15330.00 21900.00 21170.00 21170.00\n [97] 22995.00 25550.00 21900.00 22995.00 23725.00 27375.00 29200.00 15330.00\n[105] 21900.00 26280.00 20075.00 16425.00 22995.00 16425.00 31025.00 20075.00\n[113] 18250.00 25550.00 21900.00 21170.00 21900.00 31025.00 23725.00 31390.00\n[121] 21900.00 24090.00 21900.00 21900.00 21900.00 15695.00 16790.00 21170.00\n[129] 22265.00 19345.00 19345.00 21900.00 16790.00 22995.00 29565.00 27375.00\n[137] 23725.00 24820.00 22630.00 18250.00 29200.00 16790.00 18250.00 22265.00\n[145] 26280.00 18250.00 18980.00 23360.00 27375.00 21900.00 26280.00 22630.00\n[153] 18250.00 18250.00 23725.00 21900.00 18980.00 18250.00 31025.00 21535.00\n[161] 24090.00 16425.00 22995.00 18250.00 16425.00 29200.00 19345.00 21535.00\n[169] 23725.00 25550.00 18615.00 18980.00 25550.00 18250.00 23725.00 21900.00\n[177] 25185.00 17885.00 22995.00 20075.00 14600.00 21535.00 23725.00 27375.00\n[185] 21170.00 22143.46 18250.00 21900.00 22143.46 14600.00 29200.00 23360.00\n[193] 18250.00 26645.00 16425.00 28105.00 16425.00 23725.00 18250.00 21900.00\n[201] 22995.00 16425.00 25550.00 21900.00 28470.00 18250.00 14600.00 31025.00\n[209] 21900.00 17885.00 25550.00 18250.00 28470.00 17520.00 23725.00 26645.00\n[217] 25550.00 19710.00 24820.00 20075.00 26645.00 23725.00 15330.00 17155.00\n[225] 21170.00 27375.00 21170.00 20075.00 23725.00 26280.00 21900.00 25550.00\n[233] 14600.00 19345.00 19345.00 28105.00 27375.00 25550.00 23725.00 20075.00\n[241] 25550.00 23725.00 14600.00 26645.00 19710.00 22265.00 20075.00 23360.00\n[249] 14600.00 19345.00 18250.00 20075.00 18250.00 25550.00 19345.00 18980.00\n[257] 23725.00 21170.00 16425.00 19345.00 20075.00 22630.00 23725.00 24820.00\n[265] 22265.00 18250.00 20075.00 20440.00 16425.00 14600.00 16060.00 18615.00\n[273] 24455.00 15330.00 21900.00 16425.00 25550.00 25550.00 18250.00 20075.00\n[281] 25550.00 25550.00 15330.00 23725.00 18250.00 20075.00 21900.00 16425.00\n[289] 23725.00 32850.00 16425.00 21900.00 18980.00 22995.00 22630.00 20075.00\n[297] 16425.00 16425.00 18250.00\n\n\n\n39.5.1 Mutate by group\n\ndat &lt;- dat |&gt; \n    group_by(sex) |&gt; \n    mutate(demeaned_sodium_bysex = serum_sodium - mean(serum_sodium)) |&gt; \n    ungroup()\n\n\n\n\n\n\n\nImportant\n\n\n\nNote that ungroup() is required to return the data.frame/tibble to its original ungrouped state. If you don’t do this, all subsequent operations will be performed on the same grouping.\n\n\nInspect the new column:\n\ndat |&gt; \n    select(sex, serum_sodium, demeaned_sodium_bysex)\n\n# A tibble: 299 × 3\n   sex   serum_sodium demeaned_sodium_bysex\n   &lt;fct&gt;        &lt;dbl&gt;                 &lt;dbl&gt;\n 1 1              130                -6.54 \n 2 1              136                -0.536\n 3 1              129                -7.54 \n 4 1              137                 0.464\n 5 0              116               -20.8  \n 6 1              132                -4.54 \n 7 1              137                 0.464\n 8 1              131                -5.54 \n 9 0              138                 1.21 \n10 1              133                -3.54 \n# ℹ 289 more rows",
    "crumbs": [
      "Tidyverse",
      "<span class='chapter-number'>39</span>  <span class='chapter-title'>Introduction to dplyr</span>"
    ]
  },
  {
    "objectID": "dplyr.html#specifying-multiple-columns",
    "href": "dplyr.html#specifying-multiple-columns",
    "title": "39  Introduction to dplyr",
    "section": "\n39.6 Specifying multiple columns",
    "text": "39.6 Specifying multiple columns\ndplyr includes a number of ways to identify multiple variables. The latest version of dplyr suggests using across() within dplyr functions that allow specifying columns, as we’ve used above.  This replaces separate functions previously used for each of filter/select/mutate/summarize/arrange that had independent functions ending with *_all(), *_at(), *_each(), *_if().  Other than specifying multiple columns by name, they can also be specified by index, by range, or by pattern-matching.\n\n39.6.1 By integer column index\n\ndat |&gt; \n    summarize(across(c(7, 9), mean))\n\n# A tibble: 1 × 2\n  platelets serum_sodium\n      &lt;dbl&gt;        &lt;dbl&gt;\n1   263358.         137.\n\n\n\ndat |&gt; \n    summarize(across(7:9, mean))\n\n# A tibble: 1 × 3\n  platelets serum_creatinine serum_sodium\n      &lt;dbl&gt;            &lt;dbl&gt;        &lt;dbl&gt;\n1   263358.             1.39         137.\n\n\n\n39.6.2 By character name range\nFor example, select all columns between platelets and serum_sodium in the order they appear in the data.frame/tibble:\n\ndat |&gt; \n    summarize(across(platelets:serum_sodium, mean))\n\n# A tibble: 1 × 3\n  platelets serum_creatinine serum_sodium\n      &lt;dbl&gt;            &lt;dbl&gt;        &lt;dbl&gt;\n1   263358.             1.39         137.\n\n\n\n39.6.3 Pattern-matching\n\ndat |&gt; \n    summarize(across(starts_with(\"serum_\"), mean))\n\n# A tibble: 1 × 2\n  serum_creatinine serum_sodium\n             &lt;dbl&gt;        &lt;dbl&gt;\n1             1.39         137.\n\n\n\ndat |&gt; \n    summarize(across(ends_with(\"fraction\"), mean))\n\n# A tibble: 1 × 1\n  ejection_fraction\n              &lt;dbl&gt;\n1              38.1\n\n\n\n39.6.4 Using predicate function wrapped in where()\n\n\n\n\n\n\n\nTip\n\n\n\nA predicate function is a function that returns a logical value, i.e. either TRUE or FALSE.\n\n\nFor example, you can use is.* functions to identify columns based on their type, e.g. numeric or factor.\n\ndat |&gt; \n    summarize(across(where(is.numeric), mean))\n\n# A tibble: 1 × 9\n    age creatinine_phosphokinase ejection_fraction platelets serum_creatinine\n  &lt;dbl&gt;                    &lt;dbl&gt;             &lt;dbl&gt;     &lt;dbl&gt;            &lt;dbl&gt;\n1  60.8                     582.              38.1   263358.             1.39\n# ℹ 4 more variables: serum_sodium &lt;dbl&gt;, time &lt;dbl&gt;, Age_days &lt;dbl&gt;,\n#   demeaned_sodium_bysex &lt;dbl&gt;\n\n\nTo use a summary function that returns more than one row per group, use reframe() instead of summarize(). Unfortunately, using table() in this way does not output level names, which limits its usefulness.\n\ndat |&gt; \n    reframe(across(where(is.factor), table))\n\n# A tibble: 2 × 6\n  anaemia     diabetes    high_blood_pressure sex         smoking    DEATH_EVENT\n  &lt;table[1d]&gt; &lt;table[1d]&gt; &lt;table[1d]&gt;         &lt;table[1d]&gt; &lt;table[1d&gt; &lt;table[1d]&gt;\n1 170         174         194                 105         203        203        \n2 129         125         105                 194          96         96        \n\n\n\n39.6.5 Using anonymous predicate function with where()\n\nIt is often useful to be able to get the number of unique values per column, e.g. in order to identify which columns may need to be converted to factors. dplyr includes the function n_distinct() which counts the number of unique values of a vector.  The following example shows the syntax dplyr’s formula shorthand to build an anonymous function using n_distinct() in order to select columns with fewer than 10 unique values:\n\ndat |&gt; \n    select(where(~ n_distinct(.x) &lt; 10))\n\n# A tibble: 299 × 6\n   anaemia diabetes high_blood_pressure sex   smoking DEATH_EVENT\n   &lt;fct&gt;   &lt;fct&gt;    &lt;fct&gt;               &lt;fct&gt; &lt;fct&gt;   &lt;fct&gt;      \n 1 0       0        1                   1     0       1          \n 2 0       0        0                   1     0       1          \n 3 0       0        0                   1     1       1          \n 4 1       0        0                   1     0       1          \n 5 1       1        0                   0     0       1          \n 6 1       0        1                   1     1       1          \n 7 1       0        0                   1     0       1          \n 8 1       1        0                   1     1       1          \n 9 0       0        0                   0     0       1          \n10 1       0        1                   1     1       1          \n# ℹ 289 more rows\n\n\nwhich is equivalent to using the standard R anonymous function syntax:\n\ndat |&gt; \n    select(where(\\(x) n_distinct(x) &lt; 10))\n\n# A tibble: 299 × 6\n   anaemia diabetes high_blood_pressure sex   smoking DEATH_EVENT\n   &lt;fct&gt;   &lt;fct&gt;    &lt;fct&gt;               &lt;fct&gt; &lt;fct&gt;   &lt;fct&gt;      \n 1 0       0        1                   1     0       1          \n 2 0       0        0                   1     0       1          \n 3 0       0        0                   1     1       1          \n 4 1       0        0                   1     0       1          \n 5 1       1        0                   0     0       1          \n 6 1       0        1                   1     1       1          \n 7 1       0        0                   1     0       1          \n 8 1       1        0                   1     1       1          \n 9 0       0        0                   0     0       1          \n10 1       0        1                   1     1       1          \n# ℹ 289 more rows\n\n\nn_distinct(x) is a more concise way of writing length(unique(x)):\n\ndat |&gt; \n    select(where(\\(x) length(unique(x)) &lt; 10))\n\n# A tibble: 299 × 6\n   anaemia diabetes high_blood_pressure sex   smoking DEATH_EVENT\n   &lt;fct&gt;   &lt;fct&gt;    &lt;fct&gt;               &lt;fct&gt; &lt;fct&gt;   &lt;fct&gt;      \n 1 0       0        1                   1     0       1          \n 2 0       0        0                   1     0       1          \n 3 0       0        0                   1     1       1          \n 4 1       0        0                   1     0       1          \n 5 1       1        0                   0     0       1          \n 6 1       0        1                   1     1       1          \n 7 1       0        0                   1     0       1          \n 8 1       1        0                   1     1       1          \n 9 0       0        0                   0     0       1          \n10 1       0        1                   1     1       1          \n# ℹ 289 more rows\n\n\nTo mutate those columns to factors, we combine across() and where() with the formula notation seen above within mutate():\n\ndat &lt;- dat |&gt; \n    mutate(across(where(~ n_distinct(.) &lt; 10), as.factor))\n\n\nstr(dat)\n\ntibble [299 × 15] (S3: tbl_df/tbl/data.frame)\n $ age                     : num [1:299] 75 55 65 50 65 90 75 60 65 80 ...\n $ anaemia                 : Factor w/ 2 levels \"0\",\"1\": 1 1 1 2 2 2 2 2 1 2 ...\n $ creatinine_phosphokinase: num [1:299] 582 7861 146 111 160 ...\n $ diabetes                : Factor w/ 2 levels \"0\",\"1\": 1 1 1 1 2 1 1 2 1 1 ...\n $ ejection_fraction       : num [1:299] 20 38 20 20 20 40 15 60 65 35 ...\n $ high_blood_pressure     : Factor w/ 2 levels \"0\",\"1\": 2 1 1 1 1 2 1 1 1 2 ...\n $ platelets               : num [1:299] 265000 263358 162000 210000 327000 ...\n $ serum_creatinine        : num [1:299] 1.9 1.1 1.3 1.9 2.7 2.1 1.2 1.1 1.5 9.4 ...\n $ serum_sodium            : num [1:299] 130 136 129 137 116 132 137 131 138 133 ...\n $ sex                     : Factor w/ 2 levels \"0\",\"1\": 2 2 2 2 1 2 2 2 1 2 ...\n $ smoking                 : Factor w/ 2 levels \"0\",\"1\": 1 1 2 1 1 2 1 2 1 2 ...\n $ time                    : num [1:299] 4 6 7 7 8 8 10 10 10 10 ...\n $ DEATH_EVENT             : Factor w/ 2 levels \"0\",\"1\": 2 2 2 2 2 2 2 2 2 2 ...\n $ Age_days                : num [1:299] 27375 20075 23725 18250 23725 ...\n $ demeaned_sodium_bysex   : num [1:299] -6.536 -0.536 -7.536 0.464 -20.79 ...",
    "crumbs": [
      "Tidyverse",
      "<span class='chapter-number'>39</span>  <span class='chapter-title'>Introduction to dplyr</span>"
    ]
  },
  {
    "objectID": "dplyr.html#dplyr-backends",
    "href": "dplyr.html#dplyr-backends",
    "title": "39  Introduction to dplyr",
    "section": "\n39.7 dplyr backends",
    "text": "39.7 dplyr backends\nUsing dplyr on data.frames or tibbles does not offer any performance benefits over performing the equivalent operations in base R, and may in fact be slower.\nA number of alternative backends, at different stages of maturity, are available that offer performance benefits for large datasets.",
    "crumbs": [
      "Tidyverse",
      "<span class='chapter-number'>39</span>  <span class='chapter-title'>Introduction to dplyr</span>"
    ]
  },
  {
    "objectID": "dplyr.html#dplyrresources",
    "href": "dplyr.html#dplyrresources",
    "title": "39  Introduction to dplyr",
    "section": "\n39.8 Resources",
    "text": "39.8 Resources\n\ndplyr website\ndplyr cheatsheet\ntibble website",
    "crumbs": [
      "Tidyverse",
      "<span class='chapter-number'>39</span>  <span class='chapter-title'>Introduction to dplyr</span>"
    ]
  },
  {
    "objectID": "dplyr.html#see-also",
    "href": "dplyr.html#see-also",
    "title": "39  Introduction to dplyr",
    "section": "\n39.9 See also",
    "text": "39.9 See also\n\ndata.table",
    "crumbs": [
      "Tidyverse",
      "<span class='chapter-number'>39</span>  <span class='chapter-title'>Introduction to dplyr</span>"
    ]
  },
  {
    "objectID": "tidyrReshape.html",
    "href": "tidyrReshape.html",
    "title": "40  Reshaping with tidyr",
    "section": "",
    "text": "40.1 Long to wide with pivot_wider()\nUsing the same example seen in Chapter 26:\ndat_long &lt;- data.frame(\n    Account_ID = c(8001, 8002, 8003, 8004, 8001, 8002, 8003, 8004, \n            8001, 8002, 8003, 8004, 8001, 8002, 8003, 8004), \n    Age = c(67.8017038366664, 42.9198507293701, 46.2301756642422, \n            39.665983196671, 67.8017038366664, 42.9198507293701, \n            46.2301756642422, 39.665983196671, 67.8017038366664, \n            42.9198507293701, 46.2301756642422, 39.665983196671, \n            67.8017038366664, 42.9198507293701, 46.2301756642422, \n            39.665983196671), \n    Admission = c(\"ED\", \"Planned\", \"Planned\", \"ED\", \"ED\", \"Planned\", \n            \"Planned\", \"ED\", \"ED\", \"Planned\", \"Planned\", \"ED\", \"ED\", \"Planned\", \n            \"Planned\", \"ED\"), \n    Lab_key = c(\"RBC\", \"RBC\", \"RBC\", \"RBC\", \"WBC\", \"WBC\", \"WBC\", \"WBC\", \n            \"Hematocrit\", \"Hematocrit\", \"Hematocrit\", \"Hematocrit\", \n            \"Hemoglobin\", \"Hemoglobin\", \"Hemoglobin\", \"Hemoglobin\"), \n    Lab_value = c(4.63449321082268, 3.34968550627897, 4.27037213597765, \n            4.93897736897793, 8374.22887757195, 7612.37380499927, \n            8759.27855519425, 6972.28096216548, 36.272693147236, \n            40.5716317809522, 39.9888624177955, 39.8786884058422, \n            12.6188444991545, 12.1739747363806, 15.1293426442183, \n            14.8885696185238)\n)\ndat_long\n\n   Account_ID      Age Admission    Lab_key   Lab_value\n1        8001 67.80170        ED        RBC    4.634493\n2        8002 42.91985   Planned        RBC    3.349686\n3        8003 46.23018   Planned        RBC    4.270372\n4        8004 39.66598        ED        RBC    4.938977\n5        8001 67.80170        ED        WBC 8374.228878\n6        8002 42.91985   Planned        WBC 7612.373805\n7        8003 46.23018   Planned        WBC 8759.278555\n8        8004 39.66598        ED        WBC 6972.280962\n9        8001 67.80170        ED Hematocrit   36.272693\n10       8002 42.91985   Planned Hematocrit   40.571632\n11       8003 46.23018   Planned Hematocrit   39.988862\n12       8004 39.66598        ED Hematocrit   39.878688\n13       8001 67.80170        ED Hemoglobin   12.618844\n14       8002 42.91985   Planned Hemoglobin   12.173975\n15       8003 46.23018   Planned Hemoglobin   15.129343\n16       8004 39.66598        ED Hemoglobin   14.888570\ndat_long2wide &lt;- pivot_wider(dat_long,\n                             id_cols = c(\"Account_ID\", \"Age\", \"Admission\"),\n                             names_from = \"Lab_key\",\n                             values_from = \"Lab_value\")\ndat_long2wide\n\n# A tibble: 4 × 7\n  Account_ID   Age Admission   RBC   WBC Hematocrit Hemoglobin\n       &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;\n1       8001  67.8 ED         4.63 8374.       36.3       12.6\n2       8002  42.9 Planned    3.35 7612.       40.6       12.2\n3       8003  46.2 Planned    4.27 8759.       40.0       15.1\n4       8004  39.7 ED         4.94 6972.       39.9       14.9",
    "crumbs": [
      "Tidyverse",
      "<span class='chapter-number'>40</span>  <span class='chapter-title'>Reshaping with **tidyr**</span>"
    ]
  },
  {
    "objectID": "tidyrReshape.html#wide-to-long-with-pivot_longer",
    "href": "tidyrReshape.html#wide-to-long-with-pivot_longer",
    "title": "40  Reshaping with tidyr",
    "section": "\n40.2 Wide to long with pivot_longer()\n",
    "text": "40.2 Wide to long with pivot_longer()\n\n\nset.seed(2022)\ndat_wide &lt;- data.frame(Account_ID = c(8001, 8002, 8003, 8004),\n                       Age = rnorm(4, mean = 57, sd = 12),\n                       RBC = rnorm(4, mean = 4.8, sd = 0.5),\n                       WBC = rnorm(4, mean = 7250, sd = 1500),\n                       Hematocrit = rnorm(4, mean = 40.2, sd = 4),\n                       Hemoglobin = rnorm(4, mean = 13.6, sd = 1.5),\n                       Admission = sample(c(\"ED\", \"Planned\"), size = 4, replace = TRUE))\ndat_wide\n\n  Account_ID      Age      RBC      WBC Hematocrit Hemoglobin Admission\n1       8001 67.80170 4.634493 8374.229   36.27269   12.61884        ED\n2       8002 42.91985 3.349686 7612.374   40.57163   12.17397   Planned\n3       8003 46.23018 4.270372 8759.279   39.98886   15.12934   Planned\n4       8004 39.66598 4.938977 6972.281   39.87869   14.88857   Planned\n\n\n\ndat_wide2long &lt;- pivot_longer(dat_wide,\n                              cols = 3:6,\n                              names_to = \"Lab_key\",\n                              values_to = \"Lab_value\")\ndat_wide2long\n\n# A tibble: 16 × 5\n   Account_ID   Age Admission Lab_key    Lab_value\n        &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;          &lt;dbl&gt;\n 1       8001  67.8 ED        RBC             4.63\n 2       8001  67.8 ED        WBC          8374.  \n 3       8001  67.8 ED        Hematocrit     36.3 \n 4       8001  67.8 ED        Hemoglobin     12.6 \n 5       8002  42.9 Planned   RBC             3.35\n 6       8002  42.9 Planned   WBC          7612.  \n 7       8002  42.9 Planned   Hematocrit     40.6 \n 8       8002  42.9 Planned   Hemoglobin     12.2 \n 9       8003  46.2 Planned   RBC             4.27\n10       8003  46.2 Planned   WBC          8759.  \n11       8003  46.2 Planned   Hematocrit     40.0 \n12       8003  46.2 Planned   Hemoglobin     15.1 \n13       8004  39.7 Planned   RBC             4.94\n14       8004  39.7 Planned   WBC          6972.  \n15       8004  39.7 Planned   Hematocrit     39.9 \n16       8004  39.7 Planned   Hemoglobin     14.9 \n\n\nNote that the “Age” and “Admission” columns were also reshaped correctly.",
    "crumbs": [
      "Tidyverse",
      "<span class='chapter-number'>40</span>  <span class='chapter-title'>Reshaping with **tidyr**</span>"
    ]
  },
  {
    "objectID": "tidyrReshape.html#see-also",
    "href": "tidyrReshape.html#see-also",
    "title": "40  Reshaping with tidyr",
    "section": "\n40.3 See also",
    "text": "40.3 See also\n\ndata.frame Reshape\ndata.table Reshape",
    "crumbs": [
      "Tidyverse",
      "<span class='chapter-number'>40</span>  <span class='chapter-title'>Reshaping with **tidyr**</span>"
    ]
  },
  {
    "objectID": "dplyrJoin.html",
    "href": "dplyrJoin.html",
    "title": "41  Joins",
    "section": "",
    "text": "41.1 Inner join\ndplyr includes the following commands for performing table joins:\nUsing the same example data as in the base R example (Chapter 27):\nab_inner &lt;- inner_join(a, b)\n\nJoining with `by = join_by(PID)`\n\nab_inner\n\n  PID Hospital Age Sex  V1 Department\n1 106      HUP  21   0 153  Neurology\n2 107      HUP  63   1  89  Radiology\n3 108 Stanford  22   0 112  Emergency\n4 109     UCSF  19   0 228 Cardiology\nNote that the resulting table only contains cases found in both datasets, i.e. IDs 106 through 109",
    "crumbs": [
      "Tidyverse",
      "<span class='chapter-number'>41</span>  <span class='chapter-title'>Joins</span>"
    ]
  },
  {
    "objectID": "dplyrJoin.html#outer-join",
    "href": "dplyrJoin.html#outer-join",
    "title": "41  Joins",
    "section": "\n41.2 Outer join",
    "text": "41.2 Outer join\n\nab_outer &lt;- full_join(a, b)\n\nJoining with `by = join_by(PID)`\n\nab_outer\n\n   PID Hospital Age Sex  V1 Department\n1  101     UCSF  22   1  NA       &lt;NA&gt;\n2  102      HUP  34   1  NA       &lt;NA&gt;\n3  103 Stanford  41   0  NA       &lt;NA&gt;\n4  104 Stanford  19   1  NA       &lt;NA&gt;\n5  105     UCSF  53   0  NA       &lt;NA&gt;\n6  106      HUP  21   0 153  Neurology\n7  107      HUP  63   1  89  Radiology\n8  108 Stanford  22   0 112  Emergency\n9  109     UCSF  19   0 228 Cardiology\n10 110     &lt;NA&gt;  NA  NA  91    Surgery\n11 111     &lt;NA&gt;  NA  NA 190  Neurology\n12 112     &lt;NA&gt;  NA  NA 101 Psychiatry\n\n\nNote that the resulting data frame contains all cases found in either dataset and missing values are represented with NA.",
    "crumbs": [
      "Tidyverse",
      "<span class='chapter-number'>41</span>  <span class='chapter-title'>Joins</span>"
    ]
  },
  {
    "objectID": "dplyrJoin.html#left-outer-join",
    "href": "dplyrJoin.html#left-outer-join",
    "title": "41  Joins",
    "section": "\n41.3 Left outer join",
    "text": "41.3 Left outer join\n\nab_leftOuter &lt;- left_join(a, b)\n\nJoining with `by = join_by(PID)`\n\nab_leftOuter\n\n  PID Hospital Age Sex  V1 Department\n1 101     UCSF  22   1  NA       &lt;NA&gt;\n2 102      HUP  34   1  NA       &lt;NA&gt;\n3 103 Stanford  41   0  NA       &lt;NA&gt;\n4 104 Stanford  19   1  NA       &lt;NA&gt;\n5 105     UCSF  53   0  NA       &lt;NA&gt;\n6 106      HUP  21   0 153  Neurology\n7 107      HUP  63   1  89  Radiology\n8 108 Stanford  22   0 112  Emergency\n9 109     UCSF  19   0 228 Cardiology\n\n\nNote that the resulting data frame contains all cases present in the left input dataset (i.e. the one defined first in the arguments) only.",
    "crumbs": [
      "Tidyverse",
      "<span class='chapter-number'>41</span>  <span class='chapter-title'>Joins</span>"
    ]
  },
  {
    "objectID": "dplyrJoin.html#right-outer-join",
    "href": "dplyrJoin.html#right-outer-join",
    "title": "41  Joins",
    "section": "\n41.4 Right outer join",
    "text": "41.4 Right outer join\n\nab_rightOuter &lt;- right_join(a, b)\n\nJoining with `by = join_by(PID)`\n\nab_rightOuter\n\n  PID Hospital Age Sex  V1 Department\n1 106      HUP  21   0 153  Neurology\n2 107      HUP  63   1  89  Radiology\n3 108 Stanford  22   0 112  Emergency\n4 109     UCSF  19   0 228 Cardiology\n5 110     &lt;NA&gt;  NA  NA  91    Surgery\n6 111     &lt;NA&gt;  NA  NA 190  Neurology\n7 112     &lt;NA&gt;  NA  NA 101 Psychiatry\n\n\nNote how the resulting data frame contains all cases present in the right input dataset (i.e. the one defined second in the arguments) only.",
    "crumbs": [
      "Tidyverse",
      "<span class='chapter-number'>41</span>  <span class='chapter-title'>Joins</span>"
    ]
  },
  {
    "objectID": "dplyrJoin.html#specifying-columns",
    "href": "dplyrJoin.html#specifying-columns",
    "title": "41  Joins",
    "section": "\n41.5 Specifying columns",
    "text": "41.5 Specifying columns\nIf the ID columns in the two data.frames to be merged do not have the same name, you can specify column names using the by argument with a slightly peculiar syntax: c(\"left_by\" = \"right_by\")\n\na &lt;- data.frame(PID = 101:109,\n                Hospital = c(\"UCSF\", \"HUP\", \"Stanford\",\n                             \"Stanford\", \"UCSF\", \"HUP\", \n                             \"HUP\", \"Stanford\", \"UCSF\"),\n                Age = c(22, 34, 41, 19, 53, 21, 63, 22, 19),\n                Sex = c(1, 1, 0, 1, 0, 0, 1, 0, 0))\na\n\n  PID Hospital Age Sex\n1 101     UCSF  22   1\n2 102      HUP  34   1\n3 103 Stanford  41   0\n4 104 Stanford  19   1\n5 105     UCSF  53   0\n6 106      HUP  21   0\n7 107      HUP  63   1\n8 108 Stanford  22   0\n9 109     UCSF  19   0\n\n\n\nb &lt;- data.frame(PatientID = 106:112,\n                V1 = c(153, 89, 112, 228,  91, 190, 101),\n                Department = c(\"Neurology\", \"Radiology\",\n                               \"Emergency\", \"Cardiology\",\n                               \"Surgery\", \"Neurology\", \"Psychiatry\"))\nb\n\n  PatientID  V1 Department\n1       106 153  Neurology\n2       107  89  Radiology\n3       108 112  Emergency\n4       109 228 Cardiology\n5       110  91    Surgery\n6       111 190  Neurology\n7       112 101 Psychiatry\n\n\n\nab_inner &lt;- inner_join(a, b, by = c(\"PID\" = \"PatientID\"))\nab_inner\n\n  PID Hospital Age Sex  V1 Department\n1 106      HUP  21   0 153  Neurology\n2 107      HUP  63   1  89  Radiology\n3 108 Stanford  22   0 112  Emergency\n4 109     UCSF  19   0 228 Cardiology",
    "crumbs": [
      "Tidyverse",
      "<span class='chapter-number'>41</span>  <span class='chapter-title'>Joins</span>"
    ]
  },
  {
    "objectID": "dplyrJoin.html#see-also",
    "href": "dplyrJoin.html#see-also",
    "title": "41  Joins",
    "section": "\n41.6 See also",
    "text": "41.6 See also\n\nbase R joins\ndata.table joins",
    "crumbs": [
      "Tidyverse",
      "<span class='chapter-number'>41</span>  <span class='chapter-title'>Joins</span>"
    ]
  },
  {
    "objectID": "lubridate.html",
    "href": "lubridate.html",
    "title": "42  Dates with lubridate",
    "section": "",
    "text": "Instead of defining Date and/or time formats using POSIX standard abbreviations, we can let the lubridate package do some guesswork for us, which works well most of the time.\n\nlibrary(lubridate)\n\n\nAttaching package: 'lubridate'\n\n\nThe following objects are masked from 'package:base':\n\n    date, intersect, setdiff, union\n\ndt &lt;- c(\"2020-03-04 13:38:54\")\ndt_posix &lt;- as_datetime(dt)\ndt_posix\n\n[1] \"2020-03-04 13:38:54 UTC\"\n\nclass(dt_posix)\n\n[1] \"POSIXct\" \"POSIXt\" \n\n\nNote that timezone defaults to UTC (Coordinated Universal Time) and must be set manually. PST is defined with “America/Los_Angeles” or the (officially deprecated) “US/Pacific” (tz database)\n\ndt_posix &lt;- as_datetime(dt, tz = \"America/Los_Angeles\")\ndt_posix\n\n[1] \"2020-03-04 13:38:54 PST\"\n\n\n\ndt2 &lt;- c(\"03.04.20 01:38.54 pm\")\ndt2_posix &lt;- as.POSIXct(dt2, format = \"%m.%d.%y %I:%M.%S %p\")\ndt2_posix\n\n[1] \"2020-03-04 13:38:54 PST\"\n\n\n\ndt2_posix &lt;- as_datetime(dt2)\ndt2_posix\n\n[1] \"2003-04-20 13:38:54 UTC\"\n\n\ndt2 got misinterpreted as year-month-day.\nFor these cases, lubridate includes a number of convenient functions to narrow down the guessing. The functions are named using all permutations of y, m, and d. The letter order signifies the order the information appears in the character you are trying to import, i.e. ymd, dmy, mdy, ydm, myd\n\ndt2 &lt;- c(\"03.04.20 01:38.54 pm\")\ndt2_posix &lt;- mdy_hms(dt2, tz = \"America/Los_Angeles\")\ndt2_posix\n\n[1] \"2020-03-04 13:38:54 PST\"",
    "crumbs": [
      "Tidyverse",
      "<span class='chapter-number'>42</span>  <span class='chapter-title'>Dates with **lubridate**</span>"
    ]
  },
  {
    "objectID": "Graphics.html",
    "href": "Graphics.html",
    "title": "Graphics",
    "section": "",
    "text": "Visualization is central to all data analysis, whether in (bio)statistics, epidemiology, machine learning, data science, etc.  It is hard to overstate the importance of good visualization.  Some of the goals of data visualization include:\n\nData quality check: identify miscoding, outliers, etc.\nCheck data transformations, preprocessing in general\nExploratory data analysis\nPlot data used for hypothesis testing\nVisualization of clustering, decomposition results in unsupervised learning\nPerformance plots in supervised learning\nCommunication of study results\n\n R has powerful graphical capabilities built in the core language. It contains two largely separate graphics systems:\n\n\nbase graphics in the graphics package, inherited from the S language\n\ngrid graphics in the grid package: a “rewrite of the graphics layout capabilities”\n\n\nThere is limited support for interaction between the two. In practice, for a given application, choose one or the other. Note that there are no high-level (user-friendly) functions for the grid graphics system built into the base R distribution, but a few very popular packages have been built on top of it, the most commonly used one today being ggplot2.\n\nBoth base and grid graphics systems can produce beautiful, layered, high-quality graphics. It is possible to build custom functions (See 21  Writing Functions) using either system to produce most, if not all, types of plots.",
    "crumbs": [
      "Graphics"
    ]
  },
  {
    "objectID": "BaseGraphics.html",
    "href": "BaseGraphics.html",
    "title": "43  Base Graphics",
    "section": "",
    "text": "43.1 Boxplot\nThis chapter is an introduction to what is known as base graphics, which is provided by the built-in graphics package. This includes a large number of functions to create plots, add graphical elements to existing plots, and control plotting parameters.\nBy no means are base graphics basic - they are powerful and flexible, and can be used to produce publication-quality graphics. In fact, you may realize that a large number of plots you see in scientific publications are produced using base R graphics. Default argument values of base graphics functions produce minimalist-looking plots, which can be customized extensively. In practice, only a little customization is usually needed to produce clean-looking and informative plots.\nIn this chapter we shall begin with simple plots and demonstrate some of the more common/useful ways to customize them. The extensive documentation of base graphics functions details all the ways the can be further customized.  Some of the most common and important types of plots can be built with the following functions:\nR documentation for each of the above commands provides extensive coverage of graphical parameters. ?par gives the main documentation file for a long list of graphical parameters. These can be set with the par() command before using any plotting command. Most can also be passed to individual plotting commands. par() documentation specifies which parameters can only be set with a call to par().\nInput: One or more vectors of any length.  A boxplot is a way to visualize the distribution of one or more vectors. Each vector does not need to be of the same length. For example, if you are plotting lab results of a patient and control group, they do not have to contain the same number of individuals. boxplot() makes it easy to plot data from one or more objects.\nIt can accept:",
    "crumbs": [
      "Graphics",
      "<span class='chapter-number'>43</span>  <span class='chapter-title'>Base Graphics</span>"
    ]
  },
  {
    "objectID": "BaseGraphics.html#boxplot",
    "href": "BaseGraphics.html#boxplot",
    "title": "43  Base Graphics",
    "section": "",
    "text": "Individual vectors: each vector forms a boxplot\nMatrix, data.frame, list: each column of a matrix, each element/i.e. column of a data.frame, each element of a list form a boxplot\nFormula of the form variable ~ factor: variable is split by factor and each level forms a boxplot\n\n\n43.1.1 Single vector\n\nx &lt;- rnorm(400, mean = 23, sd = 4)\nboxplot(x)\n\n\n\n\n\n\n\n\n43.1.2 Anatomy of a boxplot\nA boxplot shows:\n\nthe median\n\nfirst and third quartiles\n\noutliers (defined as x &lt; Q1 - 1.5 * IQR | x &gt; Q3 + 1.5 * IQR)\nrange after excluding outliers\n\n\n\n\n\nBoxplot anatomy\n\n\n\nSome synthetic data:\n\nalpha &lt;- rnorm(10)\nbeta &lt;- rnorm(100)\ngamma &lt;- rnorm(200, mean = 1, sd = 2)\n\n\n43.1.3 Individual vectors\n\nboxplot(alpha, beta, gamma)\n\n\n\n\n\n\n\n\n43.1.4 Matrix\nPassing a matrix to boxplot() draws one boxplot per column:\n\nmat &lt;- sapply(seq(5), function(i) rnorm(20))\nmat\n\n            [,1]       [,2]        [,3]       [,4]        [,5]\n [1,] -1.0010972 -0.8079834  0.65698336  0.2623609  2.47686636\n [2,] -0.2931604 -0.3216374  0.33282342  0.2049453 -0.60680892\n [3,]  0.8101997  0.2463423  0.82449950  0.8813845 -0.25849782\n [4,]  1.8445673  0.1888528 -2.47818304 -0.3985010 -1.25470960\n [5,] -1.6598302 -0.5267525 -0.05650998 -0.2629753  0.39766302\n [6,] -0.3195592  1.2656094 -0.27772948  1.0685808 -0.15973715\n [7,] -1.2341727 -0.8487012  1.04196365 -0.6378426  1.68713311\n [8,] -1.0692840 -0.2311756 -1.49907523 -1.4838518 -0.36931372\n [9,]  0.2546880  0.2055954 -0.10644680 -0.1758611  0.78708382\n[10,] -0.9644435 -1.5296709  0.60356594  1.0273176 -0.92515324\n[11,] -0.7448706  1.8879662 -1.20082614 -1.7218006  0.00465041\n[12,]  1.3135643 -0.6740892  0.34761534 -0.8228697 -1.22874970\n[13,]  0.1092927 -0.7209209  0.83975141 -0.8834776 -0.14059798\n[14,]  0.1563266 -1.3747644 -0.92126578  1.2870421 -0.20732697\n[15,] -0.5609340 -0.6739488  0.06675921 -1.3122817 -0.92153058\n[16,]  1.3775306  0.4134988 -0.12944841 -0.5716203  0.36047424\n[17,] -0.7390875  2.7460696  0.43802796  1.1840213  1.66660243\n[18,]  0.4313382 -0.9533569 -0.94802682 -1.6862024  1.44804634\n[19,]  0.9259597 -0.7128787  0.39105140 -1.3876050 -0.03285159\n[20,] -0.9850494 -0.6456256 -0.10776438 -0.7144000 -1.62843554\n\nboxplot(mat)\n\n\n\n\n\n\n\n\n43.1.5 Data frame\nPassing a data.frame to boxplot() draws one boxplot per element/column:\n\nboxplot(iris[, 1:4])\n\n\n\n\n\n\n\n\n43.1.6 List\n\ndl &lt;- list(alpha, beta, gamma)\nboxplot(dl)\n\n\n\n\n\n\n\nNote that supplying a named list is an easy way to get names to show on the categorical axis:\n\nboxplot(dl)\n\n\n\n\n\n\n\n\n43.1.7 Formula interface\nThe formula interface can be used to group any vector by a factor of the same length.\nLet’s use the built-in sleep dataset which shows the effect of two different drugs in increasing hours of sleep compared to a control group.\n\ndl &lt;- list(alpha = alpha, beta = beta, gamma = gamma)\nboxplot(extra ~ group, data = sleep)\n\n\n\n\n\n\n\n\n43.1.8 Common arguments\n\n\ncol: Set boxplot fill color\n\nborder: Set boxplot border color\n\nnames: Group names on the categorical axis\n\nbreaks: Number or value of breakpoints\n\nHere we define two custom colors using their hexadecimal RGB code and use the solid version for the border and a 33% transparent version for the fill, using adjustcolor().\nNote that we do not need two separate colors to produce an unambiguous plot since they are clearly labeled in the y-axis. It is often considered desirable/preferred to use the minimum number of different colors that is necessary.\nColor coding like the following could be useful if, for example, data from the two groups were used on another plot as well, like a scatterplot, in a multi-panel figure.\n\ncol &lt;- c(\"#16A0AC\", \"#FA6E1E\")\nboxplot(extra ~ group, data = sleep,\n        col = adjustcolor(col, alpha.f = 0.33), \n        border = col)\n\n\n\n\n\n\n\n\nstr(sleep)\n\n'data.frame':   20 obs. of  3 variables:\n $ extra: num  0.7 -1.6 -0.2 -1.2 -0.1 3.4 3.7 0.8 0 2 ...\n $ group: Factor w/ 2 levels \"1\",\"2\": 1 1 1 1 1 1 1 1 1 1 ...\n $ ID   : Factor w/ 10 levels \"1\",\"2\",\"3\",\"4\",..: 1 2 3 4 5 6 7 8 9 10 ...\n\n\n\nboxplot(extra ~ group, data = sleep)\n\n\n\n\n\n\n\n\nboxplot(extra ~ group, data = sleep,\n        col = adjustcolor(col, alpha.f = 0.33),\n        border = col,\n        names = c(\"Drug A\", \"Drug B\"))",
    "crumbs": [
      "Graphics",
      "<span class='chapter-number'>43</span>  <span class='chapter-title'>Base Graphics</span>"
    ]
  },
  {
    "objectID": "BaseGraphics.html#histogram",
    "href": "BaseGraphics.html#histogram",
    "title": "43  Base Graphics",
    "section": "\n43.2 Histogram",
    "text": "43.2 Histogram\nInput: numeric vector  A histogram is another way to visualize the distribution of a continuous variable. First, the data is binned and then the number of elements that fall in each bin is counted. The histogram plot draws bars for each bin whose heights correspond to the count of elements in the given interval.\n\nhist(x)\n\n\n\n\n\n\n\n\n43.2.1 Common arguments\n\n\ncol: bar color\n\nborder: border color, set to NA to omit borders\n\n\nhist(x, col = \"slategray\", lwd = 3)\n\n\n\n\n\n\n\n\nhist(x, \n     col = adjustcolor(\"slategray\", alpha.f = 0.5), \n     border = \"slategray\")\n\n\n\n\n\n\n\nThe breaks argument can be used to define the breakpoints to use for the binning of the values of the input. See the documentation in for the full range of options. An easy way to control the number of bins is to pass an integer to the breaks argument.  Note: Depending on the length of x and its distribution, it may or may not be possible to use the exact number requested, but the closest possible number will be used.\n\nhist(x,\n     col = adjustcolor(\"slategray\", alpha.f = 0.5), \n     border = \"slategray\",\n     breaks = 24)",
    "crumbs": [
      "Graphics",
      "<span class='chapter-number'>43</span>  <span class='chapter-title'>Base Graphics</span>"
    ]
  },
  {
    "objectID": "BaseGraphics.html#density-plot",
    "href": "BaseGraphics.html#density-plot",
    "title": "43  Base Graphics",
    "section": "\n43.3 Density plot",
    "text": "43.3 Density plot\nInput: numeric vector  A density plot is a another way to display an approximation of the distribution of a continuous variable. The density() function estimates the density of x and its output can be passed to directly to plot():\n\nplot(density(x))\n\n\n\n\n\n\n\nYou can use main = NA or main = \"\" to suppress printing a title. You can change the box type using the bty argument\n\nplot(density(x), \n     col = \"blue\",\n     bty = \"n\",\n     main = NA)",
    "crumbs": [
      "Graphics",
      "<span class='chapter-number'>43</span>  <span class='chapter-title'>Base Graphics</span>"
    ]
  },
  {
    "objectID": "BaseGraphics.html#barplot",
    "href": "BaseGraphics.html#barplot",
    "title": "43  Base Graphics",
    "section": "\n43.4 Barplot",
    "text": "43.4 Barplot\nThe barplot() function lets you plot bar plots easily. It accepts either\n\nR objects: vector or matrix\n\nformula interface\n\nLet’s look at the VADeaths built-in dataset which describes death rater per 1000 population per year broken down by age range and population group.\n\n43.4.1 Single vector\nWe can plot a single column or row. Note how R automatically gets the corresponding dimension names. For this example we use the builtin VADeaths dataset, which is a matrix.\n\nbarplot(VADeaths[, 1])\n\n\n\n\n\n\n\n\nbarplot(VADeaths[1, ])\n\n\n\n\n\n\n\n\n43.4.1.1 col and border: bar fill and border color\nAs in most plotting functions, color is controlled by the col argument. When available, border can be set to the same or different color:\n\nbarplot(VADeaths[, 1],\n  col = \"aquamarine3\", border = \"aquamarine3\"\n)\n\n\n\n\n\n\n\n\n43.4.2 Matrix\nWe can draw barplots of multiple columns at the same time by passing a matrix input. The grouping on the x-axis is based on the columns. By default, data from different rows is stacked. The argument legend.text can be used to add a legend with the row labels:\n\nbarplot(VADeaths, legend.text = TRUE)\n\n\n\n\n\n\n\nAlternatively, we can draw groups of bars beside each other with the argument beside = TRUE:\n\nbarplot(VADeaths, beside = TRUE,\n        legend.text = TRUE, args.legend = list(x = \"topright\"))\n\n\n\n\n\n\n\nTo use custom colors, we pass a vector of length equal to the number of bars within each group. These will get recycled across groups, giving a consistent color coding.\nHere, we use the adjustcolor() function again to produce 5 shades of navy.\n\ncol &lt;- sapply(seq(0.2, 0.8, length.out = 5), function(alpha) adjustcolor(\"navy\", alpha))\nbarplot(VADeaths,\n        col = col,\n        border = NA,\n        beside = TRUE,\n        legend.text = TRUE, args.legend = list(x = \"topright\"))\n\n\n\n\n\n\n\n\n43.4.3 Formula\nThe formula notation allows you to specify one or more continuous variables on the LHS and one or more categorical on the RHS. You first need to summarize the data to get one value per category. We’ll use the penguin data and get means of continuous variable as an example only - this data would be best suited for boxplots that give a picture of the entire distribution. Barplots are best for count data.\n\nlibrary(palmerpenguins)\nstr(penguins)\n\ntibble [344 × 8] (S3: tbl_df/tbl/data.frame)\n $ species          : Factor w/ 3 levels \"Adelie\",\"Chinstrap\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ island           : Factor w/ 3 levels \"Biscoe\",\"Dream\",..: 3 3 3 3 3 3 3 3 3 3 ...\n $ bill_length_mm   : num [1:344] 39.1 39.5 40.3 NA 36.7 39.3 38.9 39.2 34.1 42 ...\n $ bill_depth_mm    : num [1:344] 18.7 17.4 18 NA 19.3 20.6 17.8 19.6 18.1 20.2 ...\n $ flipper_length_mm: int [1:344] 181 186 195 NA 193 190 181 195 193 190 ...\n $ body_mass_g      : int [1:344] 3750 3800 3250 NA 3450 3650 3625 4675 3475 4250 ...\n $ sex              : Factor w/ 2 levels \"female\",\"male\": 2 1 1 NA 1 2 1 2 NA NA ...\n $ year             : int [1:344] 2007 2007 2007 2007 2007 2007 2007 2007 2007 2007 ...\n\n\n\n43.4.3.1 Single continuous by single categorical variables:\n\nbill_length_by_island &lt;- aggregate(bill_length_mm ~ island,\n                                   data = penguins, mean)\nbill_length_by_island\n\n     island bill_length_mm\n1    Biscoe       45.25749\n2     Dream       44.16774\n3 Torgersen       38.95098\n\n\n\nbarplot(bill_length_mm ~ island, data = bill_length_by_island)\n\n\n\n\n\n\n\n\n43.4.3.2 Single continuous by multiple categorical variables:\n\nbill_length_by_island_x_species &lt;- aggregate(bill_length_mm ~ island + species,\n                                             data = penguins, mean)\nbill_length_by_island_x_species\n\n     island   species bill_length_mm\n1    Biscoe    Adelie       38.97500\n2     Dream    Adelie       38.50179\n3 Torgersen    Adelie       38.95098\n4     Dream Chinstrap       48.83382\n5    Biscoe    Gentoo       47.50488\n\n\n\nbarplot(bill_length_mm ~ island + species,\n        data = bill_length_by_island_x_species,\n        legend = TRUE)\n\n\n\n\n\n\n\nOr, if you prefer, beside instead of stacked. Note that in this dataset not all species are present in each island.\n\nbarplot(bill_length_mm ~ island + species,\n        data = bill_length_by_island_x_species,\n        beside = TRUE, legend = TRUE)\n\n\n\n\n\n\n\nLet’s use the args.legend argument to push the legend to the right to avoid overlap:\n\nbarplot(bill_length_mm ~ island + species,\n        data = bill_length_by_island_x_species,\n        beside = TRUE, legend = TRUE,\n        args.legend = list(x = \"topright\", inset = c(-0.08, 0)))\n\n\n\n\n\n\n\nWhat the above value to args.legend does is to:\n\nplace the legend to the top-right of the plot (which is the default)\nmove it 8% of the width of the plot to the right.\n\nThe inset argument is a vector of length 2, where the first value is the amount to move the legend along the x-axis, i.e. to the right for positive number and to the left for negative numbers, and the second value is the amount to move it along the y-axis, i.e. up for positive numbers and down for negative numbers.\n\n43.4.3.3 Multiple continuous by single categorical\n\nbill_and_flipper_length_by_island &lt;- \n     aggregate(cbind(bill_length_mm, flipper_length_mm) ~ island,\n     data = penguins, mean)\nbill_and_flipper_length_by_island\n\n     island bill_length_mm flipper_length_mm\n1    Biscoe       45.25749          209.7066\n2     Dream       44.16774          193.0726\n3 Torgersen       38.95098          191.1961\n\n\n\nbarplot(cbind(bill_length_mm, flipper_length_mm) ~ island, \n        data = bill_and_flipper_length_by_island,\n        beside = TRUE, legend = TRUE)\n\n\n\n\n\n\n\n\n43.4.3.4 Multiple continuous by multiple categorical\nThe barplot() function does not allow you to specify multiple categorical variables on the RHS if you are using multiple continuous variables on the LHS. It is, however, trivial to create an interaction of multiple categorical variables using interaction()\n\nisland_x_species &lt;- interaction(penguins$island, penguins$species, sep = \" x \")\nbill_and_flipper_length_by_island_x_species &lt;- \n     aggregate(cbind(bill_length_mm, flipper_length_mm) ~ island_x_species,\n     data = penguins, mean)\nbill_and_flipper_length_by_island_x_species\n\n    island_x_species bill_length_mm flipper_length_mm\n1    Biscoe x Adelie       38.97500          188.7955\n2     Dream x Adelie       38.50179          189.7321\n3 Torgersen x Adelie       38.95098          191.1961\n4  Dream x Chinstrap       48.83382          195.8235\n5    Biscoe x Gentoo       47.50488          217.1870\n\n\n\nbarplot(cbind(bill_length_mm, flipper_length_mm) ~ island_x_species, \n        data = bill_and_flipper_length_by_island_x_species,\n        beside = TRUE, legend = TRUE)",
    "crumbs": [
      "Graphics",
      "<span class='chapter-number'>43</span>  <span class='chapter-title'>Base Graphics</span>"
    ]
  },
  {
    "objectID": "BaseGraphics.html#scatter-plot",
    "href": "BaseGraphics.html#scatter-plot",
    "title": "43  Base Graphics",
    "section": "\n43.5 Scatter plot",
    "text": "43.5 Scatter plot\nInput: 2 numeric vectors  A 2D scatterplot displays points using two numeric vectors as X and Y coordinates.\nLet’s create some synthetic data:\n\nset.seed(2020)\nx &lt;- rnorm(300)\ny_true &lt;- 12 + x^3\ny &lt;- 12 + x^3 + 2.5 * rnorm(300) * 1.5\n\n\nplot(x, y)\n\n\n\n\n\n\n\n\n43.5.1 Common arguments\n\n\nmain: Plot title\n\nxlab, ylab: x- and y-axis labels\n\ncol: Marker color\n\nbty: Box type (lines surrounding plot)\n\npch: Point character\n\n43.5.2 col\n\nSee Colors in R to learn about the different ways to define colors in R.\nSome common ways include:\n\nBy name, using one of 657 names given by colors(), e.g. “magenta”, “navy”, “cyan”\nBy RGB code in hexadecimal format, e.g. “#ff0000” is red\n\n\nplot(x, y, col = \"red\")\n\n\n\n\n\n\n\n\n43.5.3 bty\n\nThere are 7 bty options: “o” “l”, “7”, “c”, “u”, or “]” and “none”. They produce a box that resembles the corresponding symbol. “none” draws no box but allows the axes to show:\n\nplot(x, y, bty = \"l\")\n\n\n\n\n\n\n\n\nplot(x, y, bty = \"none\")\n\n\n\n\n\n\n\n\n43.5.4 pch\n\nThe default point character is a circle as seen above. This helps visualize overlapping points (especially for devices that do not support transparency).\nThere are 25 point characters, designated by integers 1 through 25.\nHere’s a preview of all 25 pch options. pch types 21 through 25 can be filled by a color specified by bg.\n\nplot(1:25, rep(1, 25), pch = 1:25, bg = \"blue\")\n\n\n\n\n\n\n\nLet’s use a solid disc:\n\nplot(x, y, bty = \"n\", pch = 16)\n\n\n\n\n\n\n\nWe cannot tell how many points are overlapping in the middle and therefore it’s a good idea to make the points a little transparent.\nThere are different ways to add transparency (see Colors). The easiest way is probably to use adjustcolor(). In the context of colors, alpha refers to transparency: a = 1 is opaque and a = 0 is completely transparent (therefore use a value greater than 0).\n\nplot(x, y,\n     bty = \"n\", pch = 16,\n     col = adjustcolor(\"skyblue\", alpha.f = 0.5))\n\n\n\n\n\n\n\n\n43.5.5 grid\nWe can add a grid behind the plot area using the panel.first argument, which accepts a graphical expression (a function that draws something), which will be evaluated before plotting the points on the graph (therefore appears behind the points).\n\nplot(x, y,\n     bty = \"n\", pch = 16,\n     col = adjustcolor(\"skyblue\", alpha.f = 0.5),\n     panel.first = grid(lty = 1, col = 'gray90'))\n\n\n\n\n\n\n\n\n43.5.6 main, xlab, ylab\n\n\nplot(x, y,\n     bty = \"n\", pch = 16,\n     col = adjustcolor(\"skyblue\", alpha.f = 0.5),\n     panel.first = grid(lty = 1, col = 'gray90'),\n     main = \"y vs. x\",\n     xlab = \"Variable x (xunits)\",\n     ylab = \"Variable y (yunits)\")\n\n\n\n\n\n\n\nNote that depending on where you intend to display the plot, you may leave the title blank and instead place it in the figure caption along with an explanation of the data (e.g. in a journal article).",
    "crumbs": [
      "Graphics",
      "<span class='chapter-number'>43</span>  <span class='chapter-title'>Base Graphics</span>"
    ]
  },
  {
    "objectID": "BaseGraphics.html#heatmap",
    "href": "BaseGraphics.html#heatmap",
    "title": "43  Base Graphics",
    "section": "\n43.6 Heatmap",
    "text": "43.6 Heatmap\nInput: matrix  A heatmap is a 2D matrix-like plot with x- and y-axis labels and a value in each cell. It can be used to display many different types of data. A common usage in data science is to plot the correlation matrix of a set of numerical features. In many cases, the rows and/or columns of a heatmap can be reordered based on hierarchical clustering.\n\nx &lt;- sapply(1:20, function(i) rnorm(20))\nx_cor &lt;- cor(x)\n\nBy default, the heatmap() function draws marginal dendrograms and rearranges rows and columns. We can prevent that by setting Rowv and Colv to NA:\n\nheatmap(x_cor, Rowv = NA, Colv = NA)\n\n\n\n\n\n\n\nTo allow clustering and row and column reordering, use the defaults:\n\nheatmap(x_cor)",
    "crumbs": [
      "Graphics",
      "<span class='chapter-number'>43</span>  <span class='chapter-title'>Base Graphics</span>"
    ]
  },
  {
    "objectID": "BaseGraphics.html#mosaicplot",
    "href": "BaseGraphics.html#mosaicplot",
    "title": "43  Base Graphics",
    "section": "\n43.7 Mosaic plot",
    "text": "43.7 Mosaic plot\nMosaic plots are used to visualize contingency tables. They can be informative to look at during data exploration. They are less likely to be included in a research article where it’s probably best to show the table itself.  Some synthetic data:\n\nset.seed(2021)\nCohort &lt;- factor(sample(c(\"Control\", \"Case\"), size = 500, replace = TRUE),\n                 levels = c(\"Control\", \"Case\"))\nSex &lt;- factor(\n  sapply(seq(Cohort), \n     \\(i) sample(c(\"Male\", \"Female\"), size = 1,\n     prob = if (Cohort[i] == \"Control\") c(1, 1) else c(2, 1))))\n\nUse mosaicplot() on the output of table():\n\nmosaicplot(table(Cohort), main = \"Cases vs. Controls\")\n\n\n\n\n\n\n\nWe can plot the breakdown of sexes, this time also adding color:\n\nmosaicplot(table(Sex), main = \"Males vs. Females\",\n           col = c(\"orchid\", \"skyblue\"))\n\n\n\n\n\n\n\nCross-tabulating is usually most informatively. We us the same color for the sexes, which will be recycled.\nWe also remove the border for a cleaner look:\n\nmosaicplot(table(Cohort, Sex),\n           color = c(\"orchid\", \"skyblue\"),\n           border = NA,\n           main = \"Cohort x Sex\")",
    "crumbs": [
      "Graphics",
      "<span class='chapter-number'>43</span>  <span class='chapter-title'>Base Graphics</span>"
    ]
  },
  {
    "objectID": "BaseGraphics.html#graphical-parameters",
    "href": "BaseGraphics.html#graphical-parameters",
    "title": "43  Base Graphics",
    "section": "\n43.8 Graphical parameters",
    "text": "43.8 Graphical parameters\nThe par() function allows setting or querying graphical parameters of the base graphics system. Have a look at its documentation (?par).  For par() to have an effect, it must be called prior to the plotting function whose output you wish to customize.  Some graphical parameters can only be set with a call to par(). However, many parameters can also be passed using the ... construct of each base plotting function. Some common base graphical parameters:\n\n\npch: Point character\n\ncol: Color\n\ncex: Character expansion, i.e. relative size\n\nbty: Box type\n\nxlab: x-axis label\n\nylab: y-axis label\n\nmain: Main title\n\nmar: Plot margins\n\nYou can see what the current value of these parameters is by calling par() or directly accessing a specific parameter:\n\npar()$mar\n\n[1] 5.1 4.1 4.1 2.1\n\n\nmar sets the plot margins. It is a vector of length 4 and each number corresponds to the bottom-left-top-right margin, in that order. Use it to reduce empty white space between plots or add space if labels are getting cropped, for example.  Always make sure that your plotting characters, axis labels and titles are legible.\n\n\ncex: Character expansion for the plotting characters\n\ncex.axis: cex for axis annotation\n\ncex.lab: cex for x and y labels\n\ncex.main: cex for main title\n\nNote: All of these can be set either with a call to par() prior to plotting or passed as arguments in a plotting command, like plot().  There is one important distinction: cex set with par() (which defaults to 1), sets the baseline and all other cex parameters multiply it. However, cex set within plot() still multiplies cex set with par(), but only affects the plotting character size.\n\n43.8.1 Save and reload graphical parameters\nYou can save all current graphical parameters by assigning the output of par() to an object.\n\npar_default &lt;- par()\n\nThere are a few parameters that you cannot control, those are read-only. You can exclude those since you cannot change them anyway:\n\npar_default &lt;- par(no.readonly = TRUE)\n\nIf you make changes to par() to produce plots and you want to recover the parameters you saved above, you can reload them by passing them to par():\n\npar(par_default)\n\nAlternatively, you can always restart the graphics device using dev.off() and then making a new plot.  Note: here “device” does not refer to a physical device but to different software graphics interfaces that can be used to display a plot to screen or save to file.\n\ndev.off() # shuts down graphics device\n\nnull device \n          1 \n\nplot(rnorm(10))\n\ndev.new() can be used to manually start a new graphics device.",
    "crumbs": [
      "Graphics",
      "<span class='chapter-number'>43</span>  <span class='chapter-title'>Base Graphics</span>"
    ]
  },
  {
    "objectID": "BaseGraphics.html#multipanel-plots",
    "href": "BaseGraphics.html#multipanel-plots",
    "title": "43  Base Graphics",
    "section": "\n43.9 Multipanel plots",
    "text": "43.9 Multipanel plots\nThere are different ways to create multipanel plots, but probably the most straightforward is to use either the mfrow or the mfcol argument of par().\n\nset.seed(2020)\nx &lt;- rnorm(500)\ny &lt;- x^3 + rnorm(500) * 2\nz &lt;- x^2 + rnorm(500)\n\nBoth mfrow and mfcol accept an integer vector of length 2 indicating number of rows and number of columns, respectively. With mfrow, the plots are drawn row-wise and with mfcol they are drawn column-wise. Remember to reset mfrow or mfcol back to c(1, 1)\nFor example, let’s plot a 2-by-3 panel of plots, drawn row-wise:\n\n# Get the current parameters before changing them\npar_og &lt;- par(no.readonly = TRUE)\npar(mfrow = c(2, 3), mar = c(4, 4, 1, 1))\nhist(x, col = \"#052049bb\", border = \"white\", main = \"\")\nhist(y, col = \"#052049bb\", border = \"white\", main = \"\")\nhist(z, col = \"#052049bb\", border = \"white\", main = \"\")\nplot(x, y, col = \"#05204955\", pch = 16, bty = \"n\")\nplot(x, z, col = \"#05204955\", pch = 16, bty = \"n\")\nplot(y, z, col = \"#05204955\", pch = 16, bty = \"n\")\n\n\n\n\n\n\n# Restore mfrow to one figure at a time\n# This is not necessary if you are running the line below\n# which restores all parameters\npar(mfrow = c(1, 1))\n# Restore all parameters\npar(par_og)",
    "crumbs": [
      "Graphics",
      "<span class='chapter-number'>43</span>  <span class='chapter-title'>Base Graphics</span>"
    ]
  },
  {
    "objectID": "BaseGraphics.html#saveplots",
    "href": "BaseGraphics.html#saveplots",
    "title": "43  Base Graphics",
    "section": "\n43.10 Saving plots to file",
    "text": "43.10 Saving plots to file\nYou can save base graphics to disk using a number of different file formats. To do this, you have to:\n\nOpen a graphics device - e.g. pdf(\"path/to/xy_scatter.pdf\")\n\nWrite to it - e.g. plot(x, y)\n\nClose graphics device - dev.off()\n\n\nThe following commands are used to open graphical devices that will save to a file of the corresponding type.\nRaster graphics:\n\nbmp(filename = \"path/to/file\", width = [in pixels], height = [in pixels])\njpeg(filename = \"path/to/file\", width = [in pixels], height = [in pixels])\npng(filename = \"path/to/file\", width = [in pixels], height = [in pixels])\ntiff(filename = \"path/to/file\", width = [in pixels], height = [in pixels])\n\nVector graphics:\n\nsvg(filename = \"path/to/file\", width = [in inches], height = [in inches]\npdf(file = \"path/to/file\", width = [in inches], height = [in inches])\n\nNotice the difference when writing to PDF: you define a file instead of a filename, and width and height are in inches, not pixels.\nIt is recommended to save plots in PDF format because this will save plots as vector graphics without any loss of information. It is easy to export to other graphics formats later on if and as needed, e.g. to the specification of a journal, which often ask for high resolution bitmap files.\n\npdf(\"~/Desktop/plot.pdf\", width = 5, height = 5)\nplot(iris$Sepal.Length, iris$Petal.Length,\n     pch = 16,\n     col = \"#18A3AC66\",\n     cex = 1.8,\n     bty = \"n\", # also try \"l\"\n     xlab = \"Sepal Length\", ylab = \"Petal Length\")\ndev.off()\n\n\n\n\n\n\n\nTip\n\n\n\nScientific plots need to be clear and informative. It’s good practice to only introduce those graphical elements and properties necessary to convey the required information. A good example is the use of color: A scatterplot with multiple lines requires different color or line type to distinguish between traces. A barplot may not require different color per bar since the bars may be labeled directly. However, if using groups of plots together, you may want to use the same color to represent the same group across plots.",
    "crumbs": [
      "Graphics",
      "<span class='chapter-number'>43</span>  <span class='chapter-title'>Base Graphics</span>"
    ]
  },
  {
    "objectID": "Colors.html",
    "href": "Colors.html",
    "title": "44  Colors",
    "section": "",
    "text": "44.1 Color names\nColors in R can be defined in many different ways:\nThere is a long list of color names R understands, and can be listed using colors().\nThey can be passed directly as characters.\nShades of gray are provided as gray0/grey0 (white) to gray100/grey100 (black).  An extra wide PDF with all built-in R colors is available here:",
    "crumbs": [
      "Graphics",
      "<span class='chapter-number'>44</span>  <span class='chapter-title'>Colors</span>"
    ]
  },
  {
    "objectID": "Colors.html#hexadecimal-codes",
    "href": "Colors.html#hexadecimal-codes",
    "title": "44  Colors",
    "section": "\n44.2 Hexadecimal codes",
    "text": "44.2 Hexadecimal codes\nHexadecimal color codes are characters starting with the pound sign, followed by 4 pairs of hex codes representing Red, Green, Blue, and Alpha values. Since RGB values go from 0 to 255, hex goes from 00 to FF. You can convert decimal to hex using as.hexmode():\n\nas.hexmode(0)\n\n[1] \"0\"\n\nas.hexmode(127)\n\n[1] \"7f\"\n\nas.hexmode(255)\n\n[1] \"ff\"\n\n\nThe last two values for the alpha setting are optional: if not included, defaults to max, i.e. opaque.",
    "crumbs": [
      "Graphics",
      "<span class='chapter-number'>44</span>  <span class='chapter-title'>Colors</span>"
    ]
  },
  {
    "objectID": "Colors.html#rgb",
    "href": "Colors.html#rgb",
    "title": "44  Colors",
    "section": "\n44.3 RGB",
    "text": "44.3 RGB\n\nrgb(0, 0, 1)\n\n[1] \"#0000FF\"\n\n\nNote the default maxColorValue = 1, set to 255 to use the usual RGB range of 0 to 255:\n\nrgb(0, 0, 255, maxColorValue = 255)\n\n[1] \"#0000FF\"",
    "crumbs": [
      "Graphics",
      "<span class='chapter-number'>44</span>  <span class='chapter-title'>Colors</span>"
    ]
  },
  {
    "objectID": "Colors.html#hsv",
    "href": "Colors.html#hsv",
    "title": "44  Colors",
    "section": "\n44.4 HSV",
    "text": "44.4 HSV\nColor can also be parameterized using the hue, saturation, and value system (HSV). Each range from 0 to 1.\nSimplistically: Hue controls the color. Saturation 1 is max color and 0 is white. Value 1 is max color and 0 is black.\n\nhsv(1, 1, 1)\n\n[1] \"#FF0000\"\n\n\nIn the following plot, the values around the polar plot represent hue. Moving inwards to the center, saturation changes from 1 to 0. (The plot is produced using the mplot_hsv() function from the rtemis package.)\n\nmplot_hsv()\n\n\n\n\n\n\nmplot_hsv(v = 0.5)",
    "crumbs": [
      "Graphics",
      "<span class='chapter-number'>44</span>  <span class='chapter-title'>Colors</span>"
    ]
  },
  {
    "objectID": "Colors.html#transparency",
    "href": "Colors.html#transparency",
    "title": "44  Colors",
    "section": "\n44.5 Transparency",
    "text": "44.5 Transparency\nAn easy way to add transparency to any color is using adjustcolor():\nFor example, to get 50% transparent blue:\n\nadjustcolor(\"blue\", alpha.f = 0.5)\n\n[1] \"#0000FF80\"\n\n\n“FF” is hex for 255, and “80” in hex is 128, therefore you can also define the above color as “#0000FF80”, i.e. 0 red, 0 green, 255 blue, 128 alpha.",
    "crumbs": [
      "Graphics",
      "<span class='chapter-number'>44</span>  <span class='chapter-title'>Colors</span>"
    ]
  },
  {
    "objectID": "ggplot2.html",
    "href": "ggplot2.html",
    "title": "45  Introduction to ggplot2",
    "section": "",
    "text": "45.1 Setup\nggplot2, created by Hadley Wickham (Wickham 2011), follows the Grammar of Graphics approach of Leland Wilkinson (Wilkinson 2012) and has a very different syntax than base R graphics functions. It is based on the grid graphics package and is for the most part not compatible with base graphics.  The general idea is to start by defining the data and then add and/or modify graphical elements in a stepwise manner, which allows one to build complex and layered visualizations. A simplified interface to ggplot graphics is provided in the qplot() function of ggplot2. This chapter focuses on the basics of the ggplot() function, which is more flexible and important to learn.",
    "crumbs": [
      "Graphics",
      "<span class='chapter-number'>45</span>  <span class='chapter-title'>Introduction to **ggplot2**</span>"
    ]
  },
  {
    "objectID": "ggplot2.html#setup",
    "href": "ggplot2.html#setup",
    "title": "45  Introduction to ggplot2",
    "section": "",
    "text": "45.1.1 Packages\nLoad ggplot2\n\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(tibble)\n# You can alternatively load all tidyverse packages with:\n# library(tidyverse)\n\n\n45.1.2 Synthetic Data\n\nlibrary(data.table)\nset.seed(2022)\ndt &lt;- data.table(\n    PID = sample(8001:9000, size = 100),\n    Age = rnorm(100, mean = 33, sd = 8),\n    Weight = rnorm(100, mean = 70, sd = 9),\n    SysBP = rnorm(100, mean = 110, sd = 6),\n    DiaBP = rnorm(100, mean = 80, sd = 6),\n    Sex = factor(sample(c(\"Female\", \"Male\"), size = 100, replace = TRUE))\n)\ndt[, SysBP := SysBP + 0.5 * Age]\ndt[Sex == \"Male\", Weight := Weight + rnorm(.N, mean = 16, sd = 1.5)]\ndt[Sex == \"Male\", Age := Age + rnorm(.N, mean = 6, sd = 1.8)]\ndt &lt;- as_tibble(dt)\n\nDefine a color palette, palette_, and a version of the same palette at 2/3 transparency, palette_a, for use in plots:\n\npalette_ &lt;- c(\"#43A4AC\", \"#FA9860\")\npalette_a &lt;- adjustcolor(palette_, 0.666)\n\n\n\n\n\n\n\nNote\n\n\n\nConfusingly, ggplot2 uses the aes() function, short for aesthetics, to define the plot data.",
    "crumbs": [
      "Graphics",
      "<span class='chapter-number'>45</span>  <span class='chapter-title'>Introduction to **ggplot2**</span>"
    ]
  },
  {
    "objectID": "ggplot2.html#box-plot",
    "href": "ggplot2.html#box-plot",
    "title": "45  Introduction to ggplot2",
    "section": "\n45.2 Box plot",
    "text": "45.2 Box plot\nggplot requires a categorical x-axis to draw boxplots. This means we need to convert our dataset from wide to long format.\n\ndt_long &lt;- dt |&gt; pivot_longer(\n    cols = c(\"SysBP\", \"DiaBP\"),\n    names_to = \"Measure\",\n    values_to = \"Value\"\n)\ndt_long\n\n# A tibble: 200 × 6\n     PID   Age Weight Sex    Measure Value\n   &lt;int&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;fct&gt;  &lt;chr&gt;   &lt;dbl&gt;\n 1  8228  28.5   82.2 Male   SysBP   122. \n 2  8228  28.5   82.2 Male   DiaBP    79.1\n 3  8435  50.1   72.6 Female SysBP   136. \n 4  8435  50.1   72.6 Female DiaBP    84.3\n 5  8718  31.0   73.0 Female SysBP   124. \n 6  8718  31.0   73.0 Female DiaBP    78.1\n 7  8823  30.0   77.5 Male   SysBP   126. \n 8  8823  30.0   77.5 Male   DiaBP    80.9\n 9  8843  40.5   86.7 Male   SysBP   133. \n10  8843  40.5   86.7 Male   DiaBP    68.6\n# ℹ 190 more rows\n\n\n\np &lt;- ggplot(dt_long, aes(Measure, Value)) + \n    geom_boxplot()\np\n\n\n\n\n\n\n\nWe can specify color and fill to change the color of the boxplot border and fill, respectively.\n\np &lt;- ggplot(dt_long, aes(Measure, Value)) + \n    geom_boxplot(color = palette_[1:2], fill = palette_a[1:2])\np\n\n\n\n\n\n\n\n\n45.2.1 Grouped boxplot\n\np &lt;- ggplot(dt, aes(x = Sex, y = Age)) + \n    geom_boxplot(colour = palette_[2:1], fill = palette_a[2:1])\np",
    "crumbs": [
      "Graphics",
      "<span class='chapter-number'>45</span>  <span class='chapter-title'>Introduction to **ggplot2**</span>"
    ]
  },
  {
    "objectID": "ggplot2.html#histogram",
    "href": "ggplot2.html#histogram",
    "title": "45  Introduction to ggplot2",
    "section": "\n45.3 Histogram",
    "text": "45.3 Histogram\n\np &lt;- ggplot(dt, aes(Age)) + \n    geom_histogram()\np\n\n\n\n\n\n\n\nWe can specify the number of bins to use with the bins argument and the border and fill colors with color and fill, respectively, as above. xlab() can be used to define the x-axis label.\n\np &lt;- ggplot(dt, aes(Age)) + \n    geom_histogram(bins = 24, color = palette_[1], fill = palette_a[1]) +\n    xlab(\"Age (years)\")\np\n\n\n\n\n\n\n\n\n45.3.1 Grouped Histogram\n\np &lt;- ggplot(dt, aes(x = Age, fill = Sex)) + \n    geom_histogram(bins = 24, position = \"identity\")\np\n\n\n\n\n\n\n\nscale_fill_manual can be used to define the colors of the bars:\n\np &lt;- ggplot(dt, aes(x = Age, fill = Sex)) + \n    geom_histogram(bins = 24, position = \"identity\") +\n    scale_fill_manual(values = palette_a[2:1])\np\n\n\n\n\n\n\n\nposition = \"identity\" displays overlapping bars. Alternatively, position = \"dodge\" can be used to display groups’ bars side by side instead. Finally, position = \"stack\", is the (unfortunate) default and results in vertically stacked bars, which can be confusing.\n\np &lt;- ggplot(dt, aes(x = Age, fill = Sex)) + \n    geom_histogram(bins = 24, position = \"dodge\") +\n    scale_fill_manual(values = palette_a[2:1])\np\n\n\n\n\n\n\n\n\np &lt;- ggplot(dt, aes(x = Age, fill = Sex)) + \n    geom_histogram(bins = 24, position = \"stack\") +\n    scale_fill_manual(values = palette_a[2:1])\np",
    "crumbs": [
      "Graphics",
      "<span class='chapter-number'>45</span>  <span class='chapter-title'>Introduction to **ggplot2**</span>"
    ]
  },
  {
    "objectID": "ggplot2.html#density-plot",
    "href": "ggplot2.html#density-plot",
    "title": "45  Introduction to ggplot2",
    "section": "\n45.4 Density plot",
    "text": "45.4 Density plot\n\np &lt;- ggplot(dt, aes(x = Age)) + \n    geom_density(color = palette_[1], fill = palette_a[1])\np\n\n\n\n\n\n\n\n\n45.4.1 Grouped density plot\n\np &lt;- ggplot(dt, aes(x = Age, fill = Sex)) + \n    geom_density(color = NA) +\n    scale_fill_manual(values = palette_a[2:1])\np",
    "crumbs": [
      "Graphics",
      "<span class='chapter-number'>45</span>  <span class='chapter-title'>Introduction to **ggplot2**</span>"
    ]
  },
  {
    "objectID": "ggplot2.html#barplot",
    "href": "ggplot2.html#barplot",
    "title": "45  Introduction to ggplot2",
    "section": "\n45.5 Barplot",
    "text": "45.5 Barplot\n\nschools &lt;- data.frame(UCSF = 4, Stanford = 7, Penn = 12)\n\nggplot2 requires an explicit column in the data that define the categorical x-axis:\n\nschools_df &lt;- data.frame(\n    University = factor(colnames(schools), \n        levels = c(\"UCSF\", \"Stanford\", \"Penn\")),\n     N_schools = as.numeric(schools[1, ])\n)\n\n\nggplot(schools_df, aes(University, N_schools)) +\n  geom_bar(\n    stat = \"identity\",\n    color = palette_a[1],\n    fill = palette_a[1]\n  )",
    "crumbs": [
      "Graphics",
      "<span class='chapter-number'>45</span>  <span class='chapter-title'>Introduction to **ggplot2**</span>"
    ]
  },
  {
    "objectID": "ggplot2.html#scatterplot",
    "href": "ggplot2.html#scatterplot",
    "title": "45  Introduction to ggplot2",
    "section": "\n45.6 Scatterplot",
    "text": "45.6 Scatterplot\n\np &lt;- ggplot(dt, aes(Age, SysBP)) +\n    geom_point(color = palette_a[1])\np\n\n\n\n\n\n\n\n\n45.6.1 Grouped Scatterplot\n\np &lt;- ggplot(dt, aes(Age, SysBP, col = Sex)) +\n    geom_point() +\n    scale_color_manual(values = palette_[2:1])\np",
    "crumbs": [
      "Graphics",
      "<span class='chapter-number'>45</span>  <span class='chapter-title'>Introduction to **ggplot2**</span>"
    ]
  },
  {
    "objectID": "ggplot2.html#save-plot-to-file",
    "href": "ggplot2.html#save-plot-to-file",
    "title": "45  Introduction to ggplot2",
    "section": "\n45.7 Save plot to file",
    "text": "45.7 Save plot to file\nWe’ll use the grouped boxplot example from above to show how to save each type of plot to file, using a PDF output as an example.\n\np &lt;- ggplot(dt, aes(x = Sex, y = Age)) + \n    geom_boxplot(colour = palette_[2:1], fill = palette_a[2:1])\nggsave(\"Age_by_Sex_ggplot.pdf\", p,\n    width = 5.5, height = 5.5, scale = 1, units = \"in\")",
    "crumbs": [
      "Graphics",
      "<span class='chapter-number'>45</span>  <span class='chapter-title'>Introduction to **ggplot2**</span>"
    ]
  },
  {
    "objectID": "ggplot2.html#resources",
    "href": "ggplot2.html#resources",
    "title": "45  Introduction to ggplot2",
    "section": "\n45.8 Resources",
    "text": "45.8 Resources\n\nggplot2 Documentation\n\n\n\n\n\nWickham, Hadley. 2011. “Ggplot2.” Wiley Interdisciplinary Reviews: Computational Statistics 3 (2): 180–85.\n\n\nWilkinson, Leland. 2012. “The Grammar of Graphics.” In Handbook of Computational Statistics, 375–414. Springer.",
    "crumbs": [
      "Graphics",
      "<span class='chapter-number'>45</span>  <span class='chapter-title'>Introduction to **ggplot2**</span>"
    ]
  },
  {
    "objectID": "plotly.html",
    "href": "plotly.html",
    "title": "46  Introduction to plotly",
    "section": "",
    "text": "46.1 Setup\nPlotly (Sievert et al. 2017) is a comprehensive plotting library that produces interactive plots.",
    "crumbs": [
      "Graphics",
      "<span class='chapter-number'>46</span>  <span class='chapter-title'>Introduction to **plotly**</span>"
    ]
  },
  {
    "objectID": "plotly.html#setup",
    "href": "plotly.html#setup",
    "title": "46  Introduction to plotly",
    "section": "",
    "text": "46.1.1 Libraries\nLoad libraries we will be using in this chapter:\n\nlibrary(plotly)\nlibrary(data.table)\noptions(datatable.print.class = TRUE)\n\n\n46.1.2 Synthetic Data\n\nlibrary(data.table)\nset.seed(2022)\ndt &lt;- data.table(\n    PID = sample(8001:9000, size = 100),\n    Age = rnorm(100, mean = 33, sd = 8),\n    Weight = rnorm(100, mean = 70, sd = 9),\n    SysBP = rnorm(100, mean = 110, sd = 6),\n    DiaBP = rnorm(100, mean = 80, sd = 6),\n    Sex = factor(sample(c(\"Female\", \"Male\"), size = 100, replace = TRUE))\n)\ndt[, SysBP := SysBP + 0.5 * Age]\ndt[Sex == \"Male\", Weight := Weight + rnorm(.N, mean = 16, sd = 1.5)]\ndt[Sex == \"Male\", Age := Age + rnorm(.N, mean = 6, sd = 1.8)]\n\nDefine a color palette palette and a version of the same palette at 2/3 transparency, palette_a:\n\npalette &lt;- c(\"#43A4AC\", \"#FA9860\")\npalette_a &lt;- adjustcolor(palette, alpha.f = 2/3)",
    "crumbs": [
      "Graphics",
      "<span class='chapter-number'>46</span>  <span class='chapter-title'>Introduction to **plotly**</span>"
    ]
  },
  {
    "objectID": "plotly.html#box-plot",
    "href": "plotly.html#box-plot",
    "title": "46  Introduction to plotly",
    "section": "\n46.2 Box plot",
    "text": "46.2 Box plot\nReference: R plotly boxplots\nIn plotly, we can use a loop to add each column’s boxplot one at a time. In the following example, we turn off the legend, since the names also appear below each boxplot:\n\nplt &lt;- plot_ly(y = dt[, SysBP], type = \"box\", name = \"SysBP\",\n    line = list(color = palette[1]), fillcolor = palette_a[1])  |&gt; \n    add_boxplot(y = dt[, DiaBP], name = \"DiaBP\",\n        line = list(color = palette[2]), fillcolor = palette_a[2])\nplt |&gt; layout(showlegend = FALSE)",
    "crumbs": [
      "Graphics",
      "<span class='chapter-number'>46</span>  <span class='chapter-title'>Introduction to **plotly**</span>"
    ]
  },
  {
    "objectID": "plotly.html#grouped-boxplot",
    "href": "plotly.html#grouped-boxplot",
    "title": "46  Introduction to plotly",
    "section": "\n46.3 Grouped boxplot",
    "text": "46.3 Grouped boxplot\n\np &lt;- plot_ly(y = dt[, Age], type = \"box\", color = dt[, Sex],\n    colors = palette[2:1])\np |&gt; layout(showlegend = FALSE)",
    "crumbs": [
      "Graphics",
      "<span class='chapter-number'>46</span>  <span class='chapter-title'>Introduction to **plotly**</span>"
    ]
  },
  {
    "objectID": "plotly.html#histogram",
    "href": "plotly.html#histogram",
    "title": "46  Introduction to plotly",
    "section": "\n46.4 Histogram",
    "text": "46.4 Histogram\n\np &lt;- plot_ly(\n    x = dt[, Age], type = \"histogram\",\n    nbinsx = 24,\n    marker = list(color = palette_a[1], \n        line = list(color = palette[1], width = 2)\n    )\n) |&gt; layout(xaxis = list(title = \"Age (years)\"))\np",
    "crumbs": [
      "Graphics",
      "<span class='chapter-number'>46</span>  <span class='chapter-title'>Introduction to **plotly**</span>"
    ]
  },
  {
    "objectID": "plotly.html#grouped-histogram",
    "href": "plotly.html#grouped-histogram",
    "title": "46  Introduction to plotly",
    "section": "\n46.5 Grouped Histogram",
    "text": "46.5 Grouped Histogram\n\np &lt;- plot_ly(x = dt[, Age], type = \"histogram\", color = dt[, Sex],\n    colors = palette_a[2:1], nbinsx = 24)\np\n\n\n\n\n\nMore control is possible when adding traces one at a time:\n\np &lt;- plot_ly() |&gt; \n    add_histogram(\n        x = dt[Sex == \"Female\", Age],\n        nbinsx = 24, name = \"Female\",\n        marker = list(color = palette_a[2], \n        line = list(color = palette[2], width = 1))\n    ) |&gt; \n    add_histogram(\n        x = dt[Sex == \"Male\", Age],\n        nbinsx = 24, name = \"Male\",\n        marker = list(color = palette_a[1], \n        line = list(color = palette[1], width = 1))\n    ) |&gt; \n    layout(xaxis = list(title = \"Age\"))\np\n\n\n\n\n\nCan control placement of different traces’ bars using barmode arguments, which defaults to “group”.\nTo switch to “overlay”:\n\np |&gt; layout(barmode = \"overlay\")",
    "crumbs": [
      "Graphics",
      "<span class='chapter-number'>46</span>  <span class='chapter-title'>Introduction to **plotly**</span>"
    ]
  },
  {
    "objectID": "plotly.html#density-plot",
    "href": "plotly.html#density-plot",
    "title": "46  Introduction to plotly",
    "section": "\n46.6 Density plot",
    "text": "46.6 Density plot\nThe built-in density() function returns x and y coordinates we can use to draw a density plot.\n\nage_density &lt;- density(dt[, Age])\n\n\np &lt;- plot_ly(\n    x = age_density$x, \n    y = age_density$y, \n    type = \"scatter\", mode = \"none\",\n    fill = \"tozeroy\",\n    fillcolor = palette_a[1]\n)\np",
    "crumbs": [
      "Graphics",
      "<span class='chapter-number'>46</span>  <span class='chapter-title'>Introduction to **plotly**</span>"
    ]
  },
  {
    "objectID": "plotly.html#grouped-density-plot",
    "href": "plotly.html#grouped-density-plot",
    "title": "46  Introduction to plotly",
    "section": "\n46.7 Grouped density plot",
    "text": "46.7 Grouped density plot\n\nfemale_age_density &lt;- density(dt[Sex == \"Female\", Age])\nmale_age_density &lt;- density(dt[Sex == \"Male\", Age])\n\n\np &lt;- plot_ly(\n    x = female_age_density$x, y = female_age_density$y,\n    type = \"scatter\", mode = \"none\",\n    name = \"Female\",\n    fill = \"tozeroy\", fillcolor = palette_a[2]) |&gt; \n    add_trace(\n        x = male_age_density$x, y = male_age_density$y,\n        type = \"scatter\", mode = \"none\",\n        name = \"Male\",\n        fill = \"tozeroy\", fillcolor = palette_a[1])\np",
    "crumbs": [
      "Graphics",
      "<span class='chapter-number'>46</span>  <span class='chapter-title'>Introduction to **plotly**</span>"
    ]
  },
  {
    "objectID": "plotly.html#barplot",
    "href": "plotly.html#barplot",
    "title": "46  Introduction to plotly",
    "section": "\n46.8 Barplot",
    "text": "46.8 Barplot\n\nschools &lt;- data.frame(UCSF = 4, Stanford = 7, Penn = 12)\n\n\nschools_df &lt;- data.frame(\n    University = factor(colnames(schools), \n        levels = c(\"UCSF\", \"Stanford\", \"Penn\")),\n    N_schools = as.numeric(schools[1, ])\n)\n\n\np &lt;- plot_ly(\n    x = schools_df$University,\n    y = schools_df$N_schools,\n    name = \"Schools\",\n    type = \"bar\",\n    marker = list(color = palette_a[1], \n        line = list(color = palette[1], width = 2)\n    ))\np |&gt; layout(yaxis = list(title = \"N schools\"))",
    "crumbs": [
      "Graphics",
      "<span class='chapter-number'>46</span>  <span class='chapter-title'>Introduction to **plotly**</span>"
    ]
  },
  {
    "objectID": "plotly.html#scatterplot",
    "href": "plotly.html#scatterplot",
    "title": "46  Introduction to plotly",
    "section": "\n46.9 Scatterplot",
    "text": "46.9 Scatterplot\n\np &lt;- plot_ly(\n    dt, x = ~Age, y = ~SysBP, \n    type = \"scatter\", mode = \"markers\",\n    marker = list(color = palette_a[1])\n)\np\n\n\n\n\n\nsame as:\n\np &lt;- plot_ly(dt, x = ~Age, y = ~SysBP) |&gt; \n    add_trace(type = \"scatter\", mode = \"markers\",\n        marker = list(color = palette_a[1])\n    )\np",
    "crumbs": [
      "Graphics",
      "<span class='chapter-number'>46</span>  <span class='chapter-title'>Introduction to **plotly**</span>"
    ]
  },
  {
    "objectID": "plotly.html#grouped-scatterplot",
    "href": "plotly.html#grouped-scatterplot",
    "title": "46  Introduction to plotly",
    "section": "\n46.10 Grouped Scatterplot",
    "text": "46.10 Grouped Scatterplot\n\np &lt;- plot_ly() |&gt; \n    add_trace(x = dt[Sex == \"Female\", Age], y = dt[Sex == \"Female\", SysBP],\n        name = \"Female\",\n        type = \"scatter\", mode = \"markers\",\n        marker = list(color = palette_a[2])\n    ) |&gt; \n    add_trace(x = dt[Sex == \"Male\", Age], y = dt[Sex == \"Male\", SysBP],\n        name = \"Male\",\n        type = \"scatter\", mode = \"markers\",\n        marker = list(color = palette_a[1])\n    )\np",
    "crumbs": [
      "Graphics",
      "<span class='chapter-number'>46</span>  <span class='chapter-title'>Introduction to **plotly**</span>"
    ]
  },
  {
    "objectID": "plotly.html#save-plot-to-file",
    "href": "plotly.html#save-plot-to-file",
    "title": "46  Introduction to plotly",
    "section": "\n46.11 Save plot to file",
    "text": "46.11 Save plot to file\nWe’ll use the grouped boxplot example from above to show how to save each type of plot to file, using a PDF output as an example.\n\np &lt;- plot_ly(y = dt[, Age], type = \"box\", color = dt[, Sex],\n    colors = palette[2:1])\np |&gt; layout(showlegend = FALSE)\nsave_image(p, \"Age_by_Sex_plotly.pdf\", width = 5.5, height = 5.5, scale = 1)",
    "crumbs": [
      "Graphics",
      "<span class='chapter-number'>46</span>  <span class='chapter-title'>Introduction to **plotly**</span>"
    ]
  },
  {
    "objectID": "plotly.html#references",
    "href": "plotly.html#references",
    "title": "46  Introduction to plotly",
    "section": "\n46.12 References",
    "text": "46.12 References\n\nR plotly Documentation\n\n\n\n\n\nSievert, Carson, Chris Parmer, Toby Hocking, Scott Chamberlain, Karthik Ram, Marianne Corvellec, and Pedro Despouy. 2017. “Plotly: Create Interactive Web Graphics via ‘Plotly. Js’.” R Package Version 4 (1): 110.",
    "crumbs": [
      "Graphics",
      "<span class='chapter-number'>46</span>  <span class='chapter-title'>Introduction to **plotly**</span>"
    ]
  },
  {
    "objectID": "HypothesisTesting.html",
    "href": "HypothesisTesting.html",
    "title": "47  Common Statistical Tests",
    "section": "",
    "text": "47.1 Correlation test\nR includes a large number of functions to perform statistical hypothesis testing in the built-in stats package. This chapter includes a brief overview of the syntax for some common tests along with code to produce relevant plots of your data.\nset.seed(2020)\nx &lt;- rnorm(100)\ny1 &lt;- 0.1 * x + rnorm(100)\ny2 &lt;- 0.3 * x + rnorm(100)\ny3 &lt;- x + rnorm(100)/5\ny4 &lt;- x^2 + rnorm(100)\nScatterplot with linear fit:\nplot(x, y1,\n     col = \"#00000077\",\n     pch = 16, bty = \"none\")\nabline(lm(y1 ~ x), col = \"red\", lwd = 2)\nplot(x, y2,\n     col = \"#00000077\",\n     pch = 16, bty = \"none\")\nabline(lm(y3 ~ x), col = \"red\", lwd = 2)\nplot(x, y3,\n     col = \"#00000077\",\n     pch = 16, bty = \"none\")\nabline(lm(y3 ~ x), col = \"red\", lwd = 2)\nScatterplot with a LOESS fit\nscatter.smooth(x, y4,\n               col = \"#00000077\",\n               pch = 16, bty = \"none\",\n               lpars = list(col = \"red\", lwd = 2))\ncor.test(x, y1)\n\n\n    Pearson's product-moment correlation\n\ndata:  x and y1\nt = 0.66018, df = 98, p-value = 0.5107\nalternative hypothesis: true correlation is not equal to 0\n95 percent confidence interval:\n -0.1315978  0.2595659\nsample estimates:\n       cor \n0.06654026 \n\ncor.test(x, y2)\n\n\n    Pearson's product-moment correlation\n\ndata:  x and y2\nt = 3.3854, df = 98, p-value = 0.001024\nalternative hypothesis: true correlation is not equal to 0\n95 percent confidence interval:\n 0.1357938 0.4889247\nsample estimates:\n      cor \n0.3235813 \n\ncor.test(x, y3)\n\n\n    Pearson's product-moment correlation\n\ndata:  x and y3\nt = 53.689, df = 98, p-value &lt; 2.2e-16\nalternative hypothesis: true correlation is not equal to 0\n95 percent confidence interval:\n 0.9754180 0.9888352\nsample estimates:\n      cor \n0.9834225 \n\ncor.test(x, y4)\n\n\n    Pearson's product-moment correlation\n\ndata:  x and y4\nt = 0.66339, df = 98, p-value = 0.5086\nalternative hypothesis: true correlation is not equal to 0\n95 percent confidence interval:\n -0.1312793  0.2598681\nsample estimates:\n       cor \n0.06686289",
    "crumbs": [
      "<span class='chapter-number'>47</span>  <span class='chapter-title'>Common Statistical Tests</span>"
    ]
  },
  {
    "objectID": "HypothesisTesting.html#students-t-test",
    "href": "HypothesisTesting.html#students-t-test",
    "title": "47  Common Statistical Tests",
    "section": "\n47.2 Student’s t-test",
    "text": "47.2 Student’s t-test\n\nset.seed(2021)\nx0 &lt;- rnorm(500)\nx1 &lt;- rnorm(500, mean = 0.7)\n\nFor all tests of differences in means, a boxplot is a good way to visualize. It accepts individual vectors, list or data.frame of vectors, or a formula to split a vector into groups by a factor.\n\nboxplot(x0, x1,\n        col = \"#05204999\", border = \"#052049\",\n        boxwex = 0.3, names = c(\"x0\", \"x1\"))\n\n\n\n\n\n\n\n\n47.2.1 One sample t-test\n\nt.test(x0)\n\n\n    One Sample t-test\n\ndata:  x0\nt = 0.093509, df = 499, p-value = 0.9255\nalternative hypothesis: true mean is not equal to 0\n95 percent confidence interval:\n -0.08596896  0.09456106\nsample estimates:\n  mean of x \n0.004296046 \n\n\n\nt.test(x1)\n\n\n    One Sample t-test\n\ndata:  x1\nt = 15.935, df = 499, p-value &lt; 2.2e-16\nalternative hypothesis: true mean is not equal to 0\n95 percent confidence interval:\n 0.6322846 0.8101311\nsample estimates:\nmean of x \n0.7212079 \n\n\n\nboxplot(extra ~ group, data = sleep,\n        col = \"#05204999\", border = \"#052049\",\n        boxwex = 0.3)\n\n\n\n\n\n\n\n\n47.2.2 Two-sample T-test\nBoth t.test() and wilcox.test() (below) either accept input as two vectors, t.test(x, y) or a formula of the form t.test(x ~ group). The paired argument allows us to define a paired test. Since the sleep dataset includes measurements on the same cases in two conditions, we set paired = TRUE.\n\nt.test(extra ~ group, data = sleep, paired = TRUE)\n\n\n    Paired t-test\n\ndata:  extra by group\nt = -4.0621, df = 9, p-value = 0.002833\nalternative hypothesis: true mean difference is not equal to 0\n95 percent confidence interval:\n -2.4598858 -0.7001142\nsample estimates:\nmean difference \n          -1.58",
    "crumbs": [
      "<span class='chapter-number'>47</span>  <span class='chapter-title'>Common Statistical Tests</span>"
    ]
  },
  {
    "objectID": "HypothesisTesting.html#wilcoxon-test",
    "href": "HypothesisTesting.html#wilcoxon-test",
    "title": "47  Common Statistical Tests",
    "section": "\n47.3 Wilcoxon test",
    "text": "47.3 Wilcoxon test\nData from R Documentation:\n\n## Hollander & Wolfe (1973), 29f.\n## Hamilton depression scale factor measurements in 9 patients with\n##  mixed anxiety and depression, taken at the first (x) and second\n##  (y) visit after initiation of a therapy (administration of a\n##  tranquilizer).\nx &lt;- c(1.83,  0.50,  1.62,  2.48, 1.68, 1.88, 1.55, 3.06, 1.30)\ny &lt;- c(0.878, 0.647, 0.598, 2.05, 1.06, 1.29, 1.06, 3.14, 1.29)\ndepression &lt;- data.frame(first = x, second = y, change = y - x)\n\n\n47.3.1 One-sample Wilcoxon\n\nwilcox.test(depression$change)\n\n\n    Wilcoxon signed rank exact test\n\ndata:  depression$change\nV = 5, p-value = 0.03906\nalternative hypothesis: true location is not equal to 0\n\n\n\n47.3.2 Two-sample Wilcoxon rank sum test (unpaired)\na.k.a Mann-Whitney U test a.k.a. Mann–Whitney–Wilcoxon (MWW) a.k.a. Wilcoxon–Mann–Whitney test\n\nx1 &lt;- rnorm(500, mean = 3, sd = 1.5)\nx2 &lt;- rnorm(500, mean = 5, sd = 2)\nwilcox.test(x1, x2)\n\n\n    Wilcoxon rank sum test with continuity correction\n\ndata:  x1 and x2\nW = 47594, p-value &lt; 2.2e-16\nalternative hypothesis: true location shift is not equal to 0\n\n\n\n47.3.3 Two-sample Wilcoxon signed-rank test (paired)\n\nwilcox.test(x, y, paired = TRUE)\n\n\n    Wilcoxon signed rank exact test\n\ndata:  x and y\nV = 40, p-value = 0.03906\nalternative hypothesis: true location shift is not equal to 0\n\n\n\nwilcox.test(x, y, paired = TRUE, alternative = \"greater\")\n\n\n    Wilcoxon signed rank exact test\n\ndata:  x and y\nV = 40, p-value = 0.01953\nalternative hypothesis: true location shift is greater than 0",
    "crumbs": [
      "<span class='chapter-number'>47</span>  <span class='chapter-title'>Common Statistical Tests</span>"
    ]
  },
  {
    "objectID": "HypothesisTesting.html#analysis-of-variance",
    "href": "HypothesisTesting.html#analysis-of-variance",
    "title": "47  Common Statistical Tests",
    "section": "\n47.4 Analysis of Variance",
    "text": "47.4 Analysis of Variance\n\nset.seed(20)\nBP_drug &lt;- data.frame(\n  Group = factor(rep(c(\"Placebo\", \"Drug_A\", \"Drug_B\"), each = 20),\n                 levels = c(\"Placebo\", \"Drug_A\", \"Drug_B\")),\n    SBP = c(rnorm(20, mean = 140, sd = 2.2), rnorm(20, mean = 132, sd = 2.1),\n            rnorm(20, mean = 138, sd = 2))\n)\n\n\nboxplot(SBP ~ Group, data = BP_drug,\n        col = \"#05204999\", border = \"#052049\",\n        boxwex = 0.3)\n\n\n\n\n\n\n\n\nSBP_aov &lt;- aov(SBP ~ Group, data = BP_drug)\nSBP_aov\n\nCall:\n   aov(formula = SBP ~ Group, data = BP_drug)\n\nTerms:\n                   Group Residuals\nSum of Squares  728.2841  264.4843\nDeg. of Freedom        2        57\n\nResidual standard error: 2.154084\nEstimated effects may be unbalanced\n\n\n\nsummary(SBP_aov)\n\n            Df Sum Sq Mean Sq F value Pr(&gt;F)    \nGroup        2  728.3   364.1   78.48 &lt;2e-16 ***\nResiduals   57  264.5     4.6                   \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nThe analysis of variance p-value is highly significant, but doesn’t tell us which levels of the Group factor are significantly different from each other. The boxplot already gives us a pretty good idea, but we can follow up with a pairwise t-test\n\n47.4.1 Pot-hoc pairwise t-tests\n\npairwise.t.test(BP_drug$SBP, BP_drug$Group,\n                p.adj = \"holm\")\n\n\n    Pairwise comparisons using t tests with pooled SD \n\ndata:  BP_drug$SBP and BP_drug$Group \n\n       Placebo Drug_A \nDrug_A 2.9e-16 -      \nDrug_B 0.065   1.7e-13\n\nP value adjustment method: holm \n\n\nThe pairwise tests suggest that the difference between Placebo and Drug_A and between Drug_a and Drug_b are highly significant, while difference between Placebo and Drub_B is not (p = 0.065).",
    "crumbs": [
      "<span class='chapter-number'>47</span>  <span class='chapter-title'>Common Statistical Tests</span>"
    ]
  },
  {
    "objectID": "HypothesisTesting.html#kruskal-wallis-test",
    "href": "HypothesisTesting.html#kruskal-wallis-test",
    "title": "47  Common Statistical Tests",
    "section": "\n47.5 Kruskal-Wallis test",
    "text": "47.5 Kruskal-Wallis test\nKruskal-Wallis rank sum test of the null that the location parameters of the distribution of x are the same in each group (sample). The alternative is that they differ in at least one. It is a generalization of the Wilcoxon test to multiple independent samples.\nFrom the R Documentation:\n\n## Hollander & Wolfe (1973), 116.\n## Mucociliary efficiency from the rate of removal of dust in normal\n##  subjects, subjects with obstructive airway disease, and subjects\n##  with asbestosis.\nx &lt;- c(2.9, 3.0, 2.5, 2.6, 3.2) # normal subjects\ny &lt;- c(3.8, 2.7, 4.0, 2.4)      # with obstructive airway disease\nz &lt;- c(2.8, 3.4, 3.7, 2.2, 2.0) # with asbestosis\nkruskal.test(list(x, y, z))\n\n\n    Kruskal-Wallis rank sum test\n\ndata:  list(x, y, z)\nKruskal-Wallis chi-squared = 0.77143, df = 2, p-value = 0.68\n\n\n\nboxplot(Ozone ~ Month, data = airquality,\n        col = \"#05204999\", border = \"#052049\",\n        boxwex = 0.3)\n\n\n\n\n\n\n\n\nkruskal.test(Ozone ~ Month, data = airquality)\n\n\n    Kruskal-Wallis rank sum test\n\ndata:  Ozone by Month\nKruskal-Wallis chi-squared = 29.267, df = 4, p-value = 6.901e-06",
    "crumbs": [
      "<span class='chapter-number'>47</span>  <span class='chapter-title'>Common Statistical Tests</span>"
    ]
  },
  {
    "objectID": "HypothesisTesting.html#chi-squared-test",
    "href": "HypothesisTesting.html#chi-squared-test",
    "title": "47  Common Statistical Tests",
    "section": "\n47.6 Chi-squared Test",
    "text": "47.6 Chi-squared Test\nPearson’s chi-squared test for count data\nSome synthetic data:\n\nset.seed(2021)\nset.seed(2021)\nCohort &lt;- factor(sample(c(\"Control\", \"Case\"), size = 500, replace = TRUE),\n                 levels = c(\"Control\", \"Case\"))\nSex &lt;- factor(\n  sapply(seq(Cohort), \\(i) sample(c(\"Male\", \"Female\"), size = 1,\n                                  prob = if (Cohort[i] == \"Control\") c(1, 1) else c(2, 1))))\ndat &lt;- data.frame(Cohort, Sex)\nhead(dat)\n\n   Cohort    Sex\n1 Control   Male\n2    Case   Male\n3    Case   Male\n4    Case Female\n5 Control Female\n6    Case   Male\n\n\nYou can lot count data using a mosaic plot, with either a table or formula input:\n\nmosaicplot(table(Cohort, Sex),\n           color = c(\"orchid\", \"skyblue\"),\n           border = NA,\n           main = \"Cohort x Sex\")\n\n\n\n\n\n\n\n\nmosaicplot(Cohort ~ Sex, dat,\n           color = c(\"orchid\", \"skyblue\"),\n           border = NA,\n           main = \"Cohort x Sex\")\n\n\n\n\n\n\n\nchisq.test() accepts either two factors, or a table:\n\ncohort_sex_chisq &lt;- chisq.test(dat$Cohort, dat$Sex)\ncohort_sex_chisq\n\n\n    Pearson's Chi-squared test with Yates' continuity correction\n\ndata:  dat$Cohort and dat$Sex\nX-squared = 18.015, df = 1, p-value = 2.192e-05\n\n\n\ncohort_sex_chisq &lt;- chisq.test(table(dat$Cohort, dat$Sex))\ncohort_sex_chisq\n\n\n    Pearson's Chi-squared test with Yates' continuity correction\n\ndata:  table(dat$Cohort, dat$Sex)\nX-squared = 18.015, df = 1, p-value = 2.192e-05",
    "crumbs": [
      "<span class='chapter-number'>47</span>  <span class='chapter-title'>Common Statistical Tests</span>"
    ]
  },
  {
    "objectID": "HypothesisTesting.html#fishers-exact-test",
    "href": "HypothesisTesting.html#fishers-exact-test",
    "title": "47  Common Statistical Tests",
    "section": "\n47.7 Fisher’s exact test",
    "text": "47.7 Fisher’s exact test\nFisher’s exact test for count data\nWorking on the same data as above, fisher.test() also accepts either two factors or a table as input:\n\ncohort_sex_fisher &lt;- fisher.test(dat$Cohort, dat$Sex)\ncohort_sex_fisher\n\n\n    Fisher's Exact Test for Count Data\n\ndata:  dat$Cohort and dat$Sex\np-value = 1.512e-05\nalternative hypothesis: true odds ratio is not equal to 1\n95 percent confidence interval:\n 1.516528 3.227691\nsample estimates:\nodds ratio \n  2.207866 \n\n\n\ncohort_sex_fisher &lt;- fisher.test(table(dat$Cohort, dat$Sex))\ncohort_sex_fisher\n\n\n    Fisher's Exact Test for Count Data\n\ndata:  table(dat$Cohort, dat$Sex)\np-value = 1.512e-05\nalternative hypothesis: true odds ratio is not equal to 1\n95 percent confidence interval:\n 1.516528 3.227691\nsample estimates:\nodds ratio \n  2.207866",
    "crumbs": [
      "<span class='chapter-number'>47</span>  <span class='chapter-title'>Common Statistical Tests</span>"
    ]
  },
  {
    "objectID": "HypothesisTesting.html#f-test-to-compare-two-variances",
    "href": "HypothesisTesting.html#f-test-to-compare-two-variances",
    "title": "47  Common Statistical Tests",
    "section": "\n47.8 F Test to compare two variances",
    "text": "47.8 F Test to compare two variances\n\nx1 &lt;- rnorm(500, sd = 1)\nx2 &lt;- rnorm(400, sd = 1.5)\nvar.test(x1, x2)\n\n\n    F test to compare two variances\n\ndata:  x1 and x2\nF = 0.43354, num df = 499, denom df = 399, p-value &lt; 2.2e-16\nalternative hypothesis: true ratio of variances is not equal to 1\n95 percent confidence interval:\n 0.3594600 0.5218539\nsample estimates:\nratio of variances \n         0.4335363 \n\n\n\nboxplot(x1, x2,\n        col = \"#05204999\", border = \"#052049\",\n        boxwex = 0.3)\n\n\n\n\n\n\n\nFrom R Documentation:\n\nx &lt;- rnorm(50, mean = 0, sd = 2)\ny &lt;- rnorm(30, mean = 1, sd = 1)\nvar.test(x, y)                  # Do x and y have the same variance?\n\n\n    F test to compare two variances\n\ndata:  x and y\nF = 5.4776, num df = 49, denom df = 29, p-value = 5.817e-06\nalternative hypothesis: true ratio of variances is not equal to 1\n95 percent confidence interval:\n  2.752059 10.305597\nsample estimates:\nratio of variances \n          5.477573 \n\nvar.test(lm(x ~ 1), lm(y ~ 1))  # same\n\n\n    F test to compare two variances\n\ndata:  lm(x ~ 1) and lm(y ~ 1)\nF = 5.4776, num df = 49, denom df = 29, p-value = 5.817e-06\nalternative hypothesis: true ratio of variances is not equal to 1\n95 percent confidence interval:\n  2.752059 10.305597\nsample estimates:\nratio of variances \n          5.477573",
    "crumbs": [
      "<span class='chapter-number'>47</span>  <span class='chapter-title'>Common Statistical Tests</span>"
    ]
  },
  {
    "objectID": "HypothesisTesting.html#bartlett-test-of-homogeneity-of-variances",
    "href": "HypothesisTesting.html#bartlett-test-of-homogeneity-of-variances",
    "title": "47  Common Statistical Tests",
    "section": "\n47.9 Bartlett test of homogeneity of variances",
    "text": "47.9 Bartlett test of homogeneity of variances\nPerforms Bartlett’s test of the null that the variances in each of the groups (samples) are the same.\nFrom the R Documentation:\n\nplot(count ~ spray, data = InsectSprays)\n\n\n\n\n\n\n\n\nbartlett.test(InsectSprays$count, InsectSprays$spray)\n\n\n    Bartlett test of homogeneity of variances\n\ndata:  InsectSprays$count and InsectSprays$spray\nBartlett's K-squared = 25.96, df = 5, p-value = 9.085e-05\n\n\n\nbartlett.test(count ~ spray, data = InsectSprays)\n\n\n    Bartlett test of homogeneity of variances\n\ndata:  count by spray\nBartlett's K-squared = 25.96, df = 5, p-value = 9.085e-05",
    "crumbs": [
      "<span class='chapter-number'>47</span>  <span class='chapter-title'>Common Statistical Tests</span>"
    ]
  },
  {
    "objectID": "HypothesisTesting.html#fligner-killeen-test-of-homogeneity-of-variances",
    "href": "HypothesisTesting.html#fligner-killeen-test-of-homogeneity-of-variances",
    "title": "47  Common Statistical Tests",
    "section": "\n47.10 Fligner-Killeen test of homogeneity of variances",
    "text": "47.10 Fligner-Killeen test of homogeneity of variances\nPerforms a Fligner-Killeen (median) test of the null that the variances in each of the groups (samples) are the same.\n\nboxplot(count ~ spray, data = InsectSprays)\n\n\n\n\n\n\n# works the same if you do plot(count ~ spray, data = InsectSprays)\nfligner.test(InsectSprays$count, InsectSprays$spray)\n\n\n    Fligner-Killeen test of homogeneity of variances\n\ndata:  InsectSprays$count and InsectSprays$spray\nFligner-Killeen:med chi-squared = 14.483, df = 5, p-value = 0.01282\n\nfligner.test(count ~ spray, data = InsectSprays)\n\n\n    Fligner-Killeen test of homogeneity of variances\n\ndata:  count by spray\nFligner-Killeen:med chi-squared = 14.483, df = 5, p-value = 0.01282",
    "crumbs": [
      "<span class='chapter-number'>47</span>  <span class='chapter-title'>Common Statistical Tests</span>"
    ]
  },
  {
    "objectID": "HypothesisTesting.html#ansari-bradley-test",
    "href": "HypothesisTesting.html#ansari-bradley-test",
    "title": "47  Common Statistical Tests",
    "section": "\n47.11 Ansari-Bradley test",
    "text": "47.11 Ansari-Bradley test\nPerforms the Ansari-Bradley two-sample test for a difference in scale parameters.\n\nramsay &lt;- c(111, 107, 100, 99, 102, 106, 109, 108, 104, 99,\n            101, 96, 97, 102, 107, 113, 116, 113, 110, 98)\njung.parekh &lt;- c(107, 108, 106, 98, 105, 103, 110, 105, 104,\n            100, 96, 108, 103, 104, 114, 114, 113, 108, 106, 99)\nansari.test(ramsay, jung.parekh)\n\nWarning in ansari.test.default(ramsay, jung.parekh): cannot compute exact\np-value with ties\n\n\n\n    Ansari-Bradley test\n\ndata:  ramsay and jung.parekh\nAB = 185.5, p-value = 0.1815\nalternative hypothesis: true ratio of scales is not equal to 1\n\n\n\nx &lt;- rnorm(40, sd = 1.5)\ny &lt;- rnorm(40, sd = 2.5)\nansari.test(x, y)\n\n\n    Ansari-Bradley test\n\ndata:  x and y\nAB = 963, p-value = 0.005644\nalternative hypothesis: true ratio of scales is not equal to 1",
    "crumbs": [
      "<span class='chapter-number'>47</span>  <span class='chapter-title'>Common Statistical Tests</span>"
    ]
  },
  {
    "objectID": "HypothesisTesting.html#mood-two-sample-test-of-scale",
    "href": "HypothesisTesting.html#mood-two-sample-test-of-scale",
    "title": "47  Common Statistical Tests",
    "section": "\n47.12 Mood two-sample test of scale",
    "text": "47.12 Mood two-sample test of scale\n\nmood.test(x, y)\n\n\n    Mood two-sample test of scale\n\ndata:  x and y\nZ = -2.7363, p-value = 0.006213\nalternative hypothesis: two.sided",
    "crumbs": [
      "<span class='chapter-number'>47</span>  <span class='chapter-title'>Common Statistical Tests</span>"
    ]
  },
  {
    "objectID": "HypothesisTesting.html#kolmogorov-smirnoff-test",
    "href": "HypothesisTesting.html#kolmogorov-smirnoff-test",
    "title": "47  Common Statistical Tests",
    "section": "\n47.13 Kolmogorov-Smirnoff test",
    "text": "47.13 Kolmogorov-Smirnoff test\nPerform a one- or two-sample Kolmogorov-Smirnov test Null: x and y were drawn from the same continuous distribution.\n\nx1 &lt;- rnorm(200, mean = 0, sd = 1)\nx2 &lt;- rnorm(200, mean = -0.5, sd = 1.5)\nks.test(x1, x2)\n\n\n    Asymptotic two-sample Kolmogorov-Smirnov test\n\ndata:  x1 and x2\nD = 0.35, p-value = 4.579e-11\nalternative hypothesis: two-sided",
    "crumbs": [
      "<span class='chapter-number'>47</span>  <span class='chapter-title'>Common Statistical Tests</span>"
    ]
  },
  {
    "objectID": "HypothesisTesting.html#shapiro-wilk-test-of-normality",
    "href": "HypothesisTesting.html#shapiro-wilk-test-of-normality",
    "title": "47  Common Statistical Tests",
    "section": "\n47.14 Shapiro-Wilk test of normality",
    "text": "47.14 Shapiro-Wilk test of normality\n\nset.seed(2021)\nx &lt;- rnorm(2000)\ny1 &lt;- 0.7 * x\ny2 &lt;- x + x^3\n\n\n47.14.1 Q-Q Plot\n\nqqplot(rnorm(300), y1, pch = 16, col = \"#00000077\")\nqqline(y1, col = \"red\", lwd = 2)\n\n\n\n\n\n\n\n\nqqplot(rnorm(300), y2, pch = 16, col = \"#00000077\")\nqqline(y2, col = \"red\", lwd = 2)",
    "crumbs": [
      "<span class='chapter-number'>47</span>  <span class='chapter-title'>Common Statistical Tests</span>"
    ]
  },
  {
    "objectID": "HypothesisTesting.html#shapiro-wilk-test",
    "href": "HypothesisTesting.html#shapiro-wilk-test",
    "title": "47  Common Statistical Tests",
    "section": "\n47.15 Shapiro-Wilk test",
    "text": "47.15 Shapiro-Wilk test\n\nshapiro.test(y1)\n\n\n    Shapiro-Wilk normality test\n\ndata:  y1\nW = 0.99952, p-value = 0.9218\n\nshapiro.test(y2)\n\n\n    Shapiro-Wilk normality test\n\ndata:  y2\nW = 0.72936, p-value &lt; 2.2e-16",
    "crumbs": [
      "<span class='chapter-number'>47</span>  <span class='chapter-title'>Common Statistical Tests</span>"
    ]
  },
  {
    "objectID": "HypothesisTesting.html#statsresources",
    "href": "HypothesisTesting.html#statsresources",
    "title": "47  Common Statistical Tests",
    "section": "\n47.16 Resources",
    "text": "47.16 Resources\n\nRegression Methods in Biostatistics: Linear, Logistic, Survival, and Repeated Measures Models",
    "crumbs": [
      "<span class='chapter-number'>47</span>  <span class='chapter-title'>Common Statistical Tests</span>"
    ]
  },
  {
    "objectID": "GLM.html",
    "href": "GLM.html",
    "title": "48  Introduction to the GLM",
    "section": "",
    "text": "48.1 Generalized Linear Model (GLM)\nThe Generalized Linear Model is one of the most popular and important models in statistics.\nIt fits a model of the form:\n\\[y = β_0 + β_1 x_1 + β_2 x_2 + ... β_n x_n + ε\\] where:\nIn matrix notation:\n\\[y = Χβ + ε\\]\nLet’s look at an example using the GLM for regression. We’ll use the diabetes dataset from the mlbench package as an example.\ndata(PimaIndiansDiabetes2, package = \"mlbench\")\nstr(PimaIndiansDiabetes2)\n\n'data.frame':   768 obs. of  9 variables:\n $ pregnant: num  6 1 8 1 0 5 3 10 2 8 ...\n $ glucose : num  148 85 183 89 137 116 78 115 197 125 ...\n $ pressure: num  72 66 64 66 40 74 50 NA 70 96 ...\n $ triceps : num  35 29 NA 23 35 NA 32 NA 45 NA ...\n $ insulin : num  NA NA NA 94 168 NA 88 NA 543 NA ...\n $ mass    : num  33.6 26.6 23.3 28.1 43.1 25.6 31 35.3 30.5 NA ...\n $ pedigree: num  0.627 0.351 0.672 0.167 2.288 ...\n $ age     : num  50 31 32 21 33 30 26 29 53 54 ...\n $ diabetes: Factor w/ 2 levels \"neg\",\"pos\": 2 1 2 1 2 1 2 1 2 2 ...\nWe fit a model predicting glucose level from all other covariates:\nmod &lt;- glm(glucose ~ ., family = \"gaussian\", data = PimaIndiansDiabetes2)\nmod\n\n\nCall:  glm(formula = glucose ~ ., family = \"gaussian\", data = PimaIndiansDiabetes2)\n\nCoefficients:\n(Intercept)     pregnant     pressure      triceps      insulin         mass  \n    75.5742      -0.2168       0.1826       0.0277       0.1174      -0.0896  \n   pedigree          age  diabetespos  \n     0.1955       0.3700      21.6502  \n\nDegrees of Freedom: 391 Total (i.e. Null);  383 Residual\n  (376 observations deleted due to missingness)\nNull Deviance:      372400 \nResidual Deviance: 192000   AIC: 3561\n\nclass(mod)\n\n[1] \"glm\" \"lm\"\nThe glm() function accepts a formula that defines the model.\nThe formula hp ~ . means “regress hp on all other variables”. The family argument defines we are performing regression and the data argument points to the data frame where the covariates used in the formula are found.\nFor a gaussian output, we can also use the lm() function. There are minor differences in the output created, but the model is the same:\nmod_lm &lt;- lm(glucose ~ ., data = PimaIndiansDiabetes2)\nmod_lm\n\n\nCall:\nlm(formula = glucose ~ ., data = PimaIndiansDiabetes2)\n\nCoefficients:\n(Intercept)     pregnant     pressure      triceps      insulin         mass  \n    75.5742      -0.2168       0.1826       0.0277       0.1174      -0.0896  \n   pedigree          age  diabetespos  \n     0.1955       0.3700      21.6502  \n\nclass(mod_lm)\n\n[1] \"lm\"",
    "crumbs": [
      "<span class='chapter-number'>48</span>  <span class='chapter-title'>Introduction to the GLM</span>"
    ]
  },
  {
    "objectID": "GLM.html#generalized-linear-model-glm",
    "href": "GLM.html#generalized-linear-model-glm",
    "title": "48  Introduction to the GLM",
    "section": "",
    "text": "\\(y\\) is the dependent variable, i.e. outcome of interest\n\n\\(x_1\\) to \\(x_n\\) are the independent variables, a.k.a. covariates, a.k.a. predictors\n\n\\(β_0\\) is the intercept\n\n\\(β_1\\) to \\(β_n\\) are the coefficients\n\n\\(ε\\) is the error\n\n\n\n\n\n\n\n\n\n\n\n48.1.1 Summary\nGet summary of the model using summary():\n\nsummary(mod)\n\n\nCall:\nglm(formula = glucose ~ ., family = \"gaussian\", data = PimaIndiansDiabetes2)\n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) 75.57419    8.08972   9.342  &lt; 2e-16 ***\npregnant    -0.21685    0.48754  -0.445   0.6567    \npressure     0.18262    0.10014   1.824   0.0690 .  \ntriceps      0.02770    0.14665   0.189   0.8503    \ninsulin      0.11740    0.01027  11.433  &lt; 2e-16 ***\nmass        -0.08960    0.22836  -0.392   0.6950    \npedigree     0.19555    3.40567   0.057   0.9542    \nage          0.36997    0.16183   2.286   0.0228 *  \ndiabetespos 21.65020    2.75623   7.855 4.07e-14 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for gaussian family taken to be 501.4034)\n\n    Null deviance: 372384  on 391  degrees of freedom\nResidual deviance: 192037  on 383  degrees of freedom\n  (376 observations deleted due to missingness)\nAIC: 3560.6\n\nNumber of Fisher Scoring iterations: 2\n\n\nNote how R prints stars next to covariates whose p-values falls within certain limits, described right below the table of estimates.\nAlso notice that categorical variables of n levels get n-1 separate coefficients; the first level is considered the baseline. Therefore, make sure to set up factors appropriately before modeling to ensure the correct level is used as baseline.\n\n48.1.2 Coefficients\n\ncoefficients(mod)\n\n(Intercept)    pregnant    pressure     triceps     insulin        mass \n75.57418905 -0.21684536  0.18261621  0.02769953  0.11739871 -0.08959822 \n   pedigree         age diabetespos \n 0.19554841  0.36997121 21.65020282 \n\n# or\nmod$coefficients\n\n(Intercept)    pregnant    pressure     triceps     insulin        mass \n75.57418905 -0.21684536  0.18261621  0.02769953  0.11739871 -0.08959822 \n   pedigree         age diabetespos \n 0.19554841  0.36997121 21.65020282 \n\n\n\n48.1.3 Fitted values\n\nfitted(mod) |&gt; head()\n\n       4        5        7        9       14       15 \n104.3669 134.0163 123.8123 191.4744 227.1301 147.0313 \n\n# or\nmod$fitted.values |&gt; head()\n\n       4        5        7        9       14       15 \n104.3669 134.0163 123.8123 191.4744 227.1301 147.0313 \n\n\n\n48.1.4 Residuals\n\nresiduals(mod) |&gt; head()\n\n         4          5          7          9         14         15 \n-15.366923   2.983712 -45.812340   5.525562 -38.130138  18.968718 \n\n# or\nmod$residuals |&gt; head()\n\n         4          5          7          9         14         15 \n-15.366923   2.983712 -45.812340   5.525562 -38.130138  18.968718 \n\n\n\n48.1.5 p-values\nTo extract the p-values of the intercept and each coefficient, we use coef() on summary(). The final (4th) column lists the p-values:\n\ncoef(summary(mod))\n\n               Estimate Std. Error     t value     Pr(&gt;|t|)\n(Intercept) 75.57418905 8.08972421  9.34199821 7.916237e-19\npregnant    -0.21684536 0.48753958 -0.44477489 6.567337e-01\npressure     0.18261621 0.10014453  1.82352656 6.900293e-02\ntriceps      0.02769953 0.14664887  0.18888336 8.502843e-01\ninsulin      0.11739871 0.01026851 11.43288871 3.047384e-26\nmass        -0.08959822 0.22835576 -0.39236241 6.950087e-01\npedigree     0.19554841 3.40566786  0.05741852 9.542418e-01\nage          0.36997121 0.16183342  2.28612371 2.279239e-02\ndiabetespos 21.65020282 2.75623039  7.85500474 4.071061e-14\n\n\n\n48.1.6 Plot linear fit\nYou use lines() to add a line on top of a scatterplot drawn with plot().lines() accepts x and y vectors of coordinates:\n\nset.seed(2020)\nx &lt;- rnorm(500)\ny &lt;- 0.73 * x + 0.5 * rnorm(500)\nxy.fit &lt;- lm(y~x)$fitted\nplot(x, y, pch = 16, col = \"#18A3AC99\")\nlines(x, xy.fit, col = \"#178CCB\", lwd = 2)\n\n\n\n\n\n\n\nIn rtemis, you can use argument fit to use any supported algorithm (see modSelect()) to estimate the fit:\n\nmplot3_xy(x, y, fit = \"glm\")\n\n\n\n\n\n\n\n\n48.1.7 Logistic Regression\nFor logistic regression, i.e. classification, you can use glm() with family = binomial\nUsing the same dataset, let’s predict diabetes status:\n\ndiabetes_mod &lt;- glm(diabetes ~ ., data = PimaIndiansDiabetes2, \n                    family = \"binomial\")\ndiabetes_mod\n\n\nCall:  glm(formula = diabetes ~ ., family = \"binomial\", data = PimaIndiansDiabetes2)\n\nCoefficients:\n(Intercept)     pregnant      glucose     pressure      triceps      insulin  \n -1.004e+01    8.216e-02    3.827e-02   -1.420e-03    1.122e-02   -8.253e-04  \n       mass     pedigree          age  \n  7.054e-02    1.141e+00    3.395e-02  \n\nDegrees of Freedom: 391 Total (i.e. Null);  383 Residual\n  (376 observations deleted due to missingness)\nNull Deviance:      498.1 \nResidual Deviance: 344  AIC: 362\n\n\n\nsummary(diabetes_mod)\n\n\nCall:\nglm(formula = diabetes ~ ., family = \"binomial\", data = PimaIndiansDiabetes2)\n\nCoefficients:\n              Estimate Std. Error z value Pr(&gt;|z|)    \n(Intercept) -1.004e+01  1.218e+00  -8.246  &lt; 2e-16 ***\npregnant     8.216e-02  5.543e-02   1.482  0.13825    \nglucose      3.827e-02  5.768e-03   6.635 3.24e-11 ***\npressure    -1.420e-03  1.183e-02  -0.120  0.90446    \ntriceps      1.122e-02  1.708e-02   0.657  0.51128    \ninsulin     -8.253e-04  1.306e-03  -0.632  0.52757    \nmass         7.054e-02  2.734e-02   2.580  0.00989 ** \npedigree     1.141e+00  4.274e-01   2.669  0.00760 ** \nage          3.395e-02  1.838e-02   1.847  0.06474 .  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 498.10  on 391  degrees of freedom\nResidual deviance: 344.02  on 383  degrees of freedom\n  (376 observations deleted due to missingness)\nAIC: 362.02\n\nNumber of Fisher Scoring iterations: 5",
    "crumbs": [
      "<span class='chapter-number'>48</span>  <span class='chapter-title'>Introduction to the GLM</span>"
    ]
  },
  {
    "objectID": "GLM.html#mass-univariate-analysis",
    "href": "GLM.html#mass-univariate-analysis",
    "title": "48  Introduction to the GLM",
    "section": "\n48.2 Mass-univariate analysis",
    "text": "48.2 Mass-univariate analysis\nThere are many cases where we have a large number of predictors and, along with any other number of tests or models, we may want to regress our outcome of interest on each covariate, one at a time.\nLet’s create some synthetic data with 1000 cases and 100 covariates\nThe outcome is generated using just 4 of those 100 covariates and has added noise.\n\nset.seed(2020)\nn_col &lt;- 100\nn_row &lt;- 1000\nx &lt;- as.data.frame(lapply(seq(n_col), function(i) rnorm(n_row)),\n                   col.names = paste0(\"Feature_\", seq(n_col)))\ndim(x)\n\n[1] 1000  100\n\ny &lt;- 0.7 + x[, 10] + 0.3 * x[, 20] + 1.3 * x[, 30] + x[, 50] + rnorm(500)\n\nLet’s fit a linear model regressing y on each column of x using lm:\n\nmod.xy.massuni &lt;- lapply(seq(x), function(i) lm(y ~ x[, i]))\nlength(mod.xy.massuni)\n\n[1] 100\n\nnames(mod.xy.massuni) &lt;- paste0(\"mod\", seq(x))\n\nTo extract p-values for each model, we must find where exactly to look.\nLet’s look into the first model:\n\n(ms1 &lt;- summary(mod.xy.massuni$mod1))\n\n\nCall:\nlm(formula = y ~ x[, i])\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-8.5402 -1.4881 -0.0618  1.4968  5.8152 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)  0.61800    0.06878   8.985   &lt;2e-16 ***\nx[, i]       0.08346    0.06634   1.258    0.209    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 2.174 on 998 degrees of freedom\nMultiple R-squared:  0.001584,  Adjusted R-squared:  0.0005831 \nF-statistic: 1.583 on 1 and 998 DF,  p-value: 0.2086\n\nms1$coefficients\n\n              Estimate Std. Error  t value     Pr(&gt;|t|)\n(Intercept) 0.61800326 0.06878142 8.985032 1.266204e-18\nx[, i]      0.08346393 0.06634074 1.258110 2.086464e-01\n\n\nThe p-values for each feature is stored in row 1, column 4 fo the coefficients matrix. Let’s extract all of them:\n\nmod.xy.massuni.pvals &lt;- sapply(mod.xy.massuni, function(i) summary(i)$coefficients[2, 4])\n\nLet’s see which variable are significant at the 0.05:\n\nwhich(mod.xy.massuni.pvals &lt; 0.05)\n\n mod5 mod10 mod12 mod20 mod28 mod30 mod42 mod50 mod61 mod65 mod72 mod82 mod85 \n    5    10    12    20    28    30    42    50    61    65    72    82    85 \nmod91 mod94 mod99 \n   91    94    99 \n\n\n…and which are significant at the 0.01 level:\n\nwhich(mod.xy.massuni.pvals &lt; 0.01)\n\nmod10 mod20 mod28 mod30 mod50 \n   10    20    28    30    50",
    "crumbs": [
      "<span class='chapter-number'>48</span>  <span class='chapter-title'>Introduction to the GLM</span>"
    ]
  },
  {
    "objectID": "GLM.html#correction-for-multiple-comparisons",
    "href": "GLM.html#correction-for-multiple-comparisons",
    "title": "48  Introduction to the GLM",
    "section": "\n48.3 Correction for multiple comparisons",
    "text": "48.3 Correction for multiple comparisons\nWe’ve performed a large number of tests and before reporting the results, we need to control for multiple comparisons.\nTo do that, we use R’s p.adjust() function. It adjusts a vector of p-values to account for multiple comparisons using one of multiple methods. The default, and recommended, is the Holm method. It ensures that FWER &lt; α, i.e. controls the family-wise error rate, a.k.a. the probability of making one or more false discoveries (Type I errors)\n\nmod.xy.massuni.pvals.holm_adjusted &lt;- p.adjust(mod.xy.massuni.pvals)\n\nNow, let’s see which features’ p-values survive the magical 0.05 threshold:\n\nwhich(mod.xy.massuni.pvals.holm_adjusted &lt; 0.05)\n\nmod10 mod20 mod30 mod50 \n   10    20    30    50 \n\n\nThese are indeed the correct features (not surprisingly, still reassuringly).",
    "crumbs": [
      "<span class='chapter-number'>48</span>  <span class='chapter-title'>Introduction to the GLM</span>"
    ]
  },
  {
    "objectID": "GLM.html#glmresources",
    "href": "GLM.html#glmresources",
    "title": "48  Introduction to the GLM",
    "section": "\n48.4 Resources",
    "text": "48.4 Resources\n\nRegression Methods in Biostatistics: Linear, Logistic, Survival, and Repeated Measures Models",
    "crumbs": [
      "<span class='chapter-number'>48</span>  <span class='chapter-title'>Introduction to the GLM</span>"
    ]
  },
  {
    "objectID": "Profiling.html",
    "href": "Profiling.html",
    "title": "49  Benchmarking & Profiling",
    "section": "",
    "text": "49.1 system.time(): Time the execution of an expression\nBenchmarking is the process of timing the execution of code for the purpose of comparison. For example, you can compare the execution time of a program in two different systems, e.g. a laptop and a high performance server. Another common case is to compare the performance of two different programs that produce the same output on the same computer.\nProfiling refers to timing the different steps of a program to identify bottlenecks and potential targets for optimization.\nThe base package’s system.time() function allows you to measure the execution time of an R expression.\nsystem.time(rnorm(9999999))\n\n   user  system elapsed \n  0.305   0.007   0.312\n“elapsed” time is real time in seconds.\n“user” and “system” are time used by the CPU on different types of tasks (see ?proc.time).\nAs always, you can pass any R expression within curly brackets:\nx &lt;- rnorm(9999)\nsystem.time({\n    for (i in 2:9999) {\n      x[i]\n      x[i] &lt;- x[i]^3\n    }\n})\n\n   user  system elapsed \n  0.002   0.000   0.002\nYou can use replicate() to get a measure of time over multiple executions and average it:\nset.seed(2020)\nx &lt;- matrix(rnorm(500000), nrow = 5000)\ny &lt;- 12 + x[, 3] + x[, 5]^2 + x[, 7]^3 + rnorm(5000)\nfit.glm &lt;- function(x, y) glm.fit(x, y)\n    \nfit.glm_time10 &lt;- replicate(10, system.time(fit.glm(x, y))[[1]])\nboxplot(fit.glm_time10)",
    "crumbs": [
      "<span class='chapter-number'>49</span>  <span class='chapter-title'>Benchmarking & Profiling</span>"
    ]
  },
  {
    "objectID": "Profiling.html#compare-execution-times-with-microbenchmarkmicrobenchmark",
    "href": "Profiling.html#compare-execution-times-with-microbenchmarkmicrobenchmark",
    "title": "49  Benchmarking & Profiling",
    "section": "\n49.2 Compare execution times with microbenchmark::microbenchmark()\n",
    "text": "49.2 Compare execution times with microbenchmark::microbenchmark()\n\nThe microbenchmark package’s microbenchmark() function allows you to time the execution of multiple expressions with sub-millisecond accuracy. It will execute each command a number of times as defined by the times argument (default = 100), and output statistics of execution time per expression in nanoseconds. Using plot() on the output produces a boxplot comparing the time distributions.\n\n# install.packages(\"microbenchmark\")\nlibrary(microbenchmark)\n\n\n49.2.1 Example: loop over matrix vs. data.frame\nLet’s create xmat, a 500 by 5 matrix and, xdf a data.frame with the same data.\n\nset.seed(2021)\nxmat &lt;- matrix(rnorm(500 * 5), nrow = 5)\nxdf &lt;- as.data.frame(xmat)\n\nIf you wanted to square either of them, you would just use ^2. Here, we create a function specifically to demonstrate the difference in working on a numeric matrix vs. a data.frame by using a nested loop that replaces each element one at a time.\n\nsilly_square &lt;- function(x) {\n  for (i in seq_len(NROW(x))) {\n    for (j in seq_len(NCOL(x))) {\n      x[i, j] &lt;- x[i, j]^2\n    }\n  }\n}\n\n\nmat_df_sq &lt;- microbenchmark(\n  silly_square_mat = silly_square(xmat),\n   silly_square_df = silly_square(xdf),\n       mat_squared = xmat^2,\n        df_squared = xdf^2\n)\n\nWarning in microbenchmark(silly_square_mat = silly_square(xmat),\nsilly_square_df = silly_square(xdf), : less accurate nanosecond times to avoid\npotential integer overflows\n\nclass(mat_df_sq)\n\n[1] \"microbenchmark\" \"data.frame\"    \n\n\nPrint microbenchmark’s output:\n\nmat_df_sq\n\nUnit: microseconds\n             expr       min         lq        mean    median         uq\n silly_square_mat   107.543   111.7865   135.07614   114.431   117.6905\n  silly_square_df 40335.472 42334.3655 43649.35645 43320.272 44353.2875\n      mat_squared     1.107     1.8655     3.05122     2.911     3.6900\n       df_squared  9875.793 10685.0305 11735.24427 12122.388 12624.4945\n       max neval\n  2190.753   100\n 71158.042   100\n    15.990   100\n 16040.963   100\n\n\nNotice how a) either operation is much faster on a matrix vs. a data.frame and b) vectorized squaring with ^2 is much faster than the nested loop as expected.\nThere is a plot() method for microbenchmark objects:\n\nplot(mat_df_sq)\n\n\n\n\n\n\n\n\n49.2.2 Example: Group means\nLet’s perform a simple mean-by-group operation and compare three different approaches. As an example, we use the flights dataset from the nycflights13 package which includes data on 336,776 flights that departed from NY area airports in 2013. The data comes as a tibble, and we create data.frame and data.table versions.th\n\nlibrary(dplyr)\nlibrary(nycflights13)\nlibrary(data.table)\noptions(datatable.print.class = TRUE)\n\nclass(flights)\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\ndim(flights)\n\n[1] 336776     19\n\nflights_df &lt;- as.data.frame(flights)\nflights_dt &lt;- as.data.table(flights)\n\nCompare performance of the same operation using different functions:\n\nbase R aggregate() with formula input\nbase R aggregate() with list input\nbase R tapply()\n\n\n\nflights_aggregate_formula &lt;- function() {\n  aggregate(arr_delay ~ carrier, \n            data = flights_df,\n            mean, na.rm = TRUE)\n}\n  \nflights_aggregate &lt;- function() {\n  aggregate(flights_df$arr_delay, \n            by = list(flights_df$carrier), \n            mean, na.rm = TRUE)\n}\n\nflights_tapply &lt;- function() {\n  tapply(flights_df$arr_delay, \n         flights_df$carrier, \n         mean, na.rm = TRUE)\n}\n\ngroupmean_3x &lt;- microbenchmark(\n  aggregate_formula = flights_aggregate_formula(),\n          aggregate = flights_aggregate(),\n             tapply = flights_tapply()\n  )\n\n\ngroupmean_3x\n\nUnit: milliseconds\n              expr       min       lq     mean   median       uq      max neval\n aggregate_formula 49.984125 56.19456 59.13615 57.88038 60.38195 97.78959   100\n         aggregate 43.398500 46.89822 49.91139 48.52676 50.61108 86.17450   100\n            tapply  9.478421 10.48790 11.85747 10.71896 11.61592 50.03513   100\n\n\n\nplot(groupmean_3x)",
    "crumbs": [
      "<span class='chapter-number'>49</span>  <span class='chapter-title'>Benchmarking & Profiling</span>"
    ]
  },
  {
    "objectID": "Profiling.html#profile-a-function-with-profvis",
    "href": "Profiling.html#profile-a-function-with-profvis",
    "title": "49  Benchmarking & Profiling",
    "section": "\n49.3 Profile a function with profvis()\n",
    "text": "49.3 Profile a function with profvis()\n\nThe profvis package’s profvis() function provides an interactive output to visualize the time spent in different calls within a program.\n\nlibrary(profvis)\nprofvis({\n  hf &lt;- read.csv(\"https://archive.ics.uci.edu/ml/machine-learning-databases/00519/heart_failure_clinical_records_dataset.csv\")\n  str(hf)\n  lt5 &lt;- which(sapply(hf, \\(i) length(unique(i))) &lt; 5)\n  for (i in lt5) hf[, i] &lt;- factor(hf[, i])\n  index_numeric &lt;- which(sapply(hf, is.numeric))\n  par(mfrow = c(1, length(index_numeric)))\n  for (i in index_numeric) boxplot(hf[, i])\n  par(mfrow = c(1, 1))\n})\n\n'data.frame':   299 obs. of  13 variables:\n $ age                     : num  75 55 65 50 65 90 75 60 65 80 ...\n $ anaemia                 : int  0 0 0 1 1 1 1 1 0 1 ...\n $ creatinine_phosphokinase: int  582 7861 146 111 160 47 246 315 157 123 ...\n $ diabetes                : int  0 0 0 0 1 0 0 1 0 0 ...\n $ ejection_fraction       : int  20 38 20 20 20 40 15 60 65 35 ...\n $ high_blood_pressure     : int  1 0 0 0 0 1 0 0 0 1 ...\n $ platelets               : num  265000 263358 162000 210000 327000 ...\n $ serum_creatinine        : num  1.9 1.1 1.3 1.9 2.7 2.1 1.2 1.1 1.5 9.4 ...\n $ serum_sodium            : int  130 136 129 137 116 132 137 131 138 133 ...\n $ sex                     : int  1 1 1 1 0 1 1 1 0 1 ...\n $ smoking                 : int  0 0 1 0 0 1 0 1 0 1 ...\n $ time                    : int  4 6 7 7 8 8 10 10 10 10 ...\n $ DEATH_EVENT             : int  1 1 1 1 1 1 1 1 1 1 ...",
    "crumbs": [
      "<span class='chapter-number'>49</span>  <span class='chapter-title'>Benchmarking & Profiling</span>"
    ]
  },
  {
    "objectID": "Optimization.html",
    "href": "Optimization.html",
    "title": "50  Optimization",
    "section": "",
    "text": "50.1 Data\nR provides a general purpose optimization tool, optim(). You can use it to estimate parameters that minimize any defined function.\nSupervised and unsupervised learning involves defining a loss function to minimize or an objective function to minimize or maximize.\nTo learn how optim() works, let’s write a simple function that returns linear coefficients by minimizing squared error.\nset.seed(2020)\nx &lt;- sapply(seq(10), function(i) rnorm(500))\ny &lt;- 12 + 1.5 * x[, 3] + 3.2 * x[, 7] + 0.5 * x[, 9] + rnorm(500)",
    "crumbs": [
      "<span class='chapter-number'>50</span>  <span class='chapter-title'>Optimization</span>"
    ]
  },
  {
    "objectID": "Optimization.html#glm-glm-s_glm",
    "href": "Optimization.html#glm-glm-s_glm",
    "title": "50  Optimization",
    "section": "\n50.2 GLM (glm, s_GLM)",
    "text": "50.2 GLM (glm, s_GLM)\n\nyx.glm &lt;- glm(y ~ x)\nsummary(yx.glm)\n\n\nCall:\nglm(formula = y ~ x)\n\nCoefficients:\n             Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) 11.979070   0.043252 276.962   &lt;2e-16 ***\nx1           0.061798   0.040916   1.510   0.1316    \nx2          -0.003873   0.043271  -0.090   0.9287    \nx3           1.488113   0.042476  35.034   &lt;2e-16 ***\nx4           0.031115   0.044015   0.707   0.4800    \nx5           0.034217   0.043664   0.784   0.4336    \nx6           0.034716   0.042189   0.823   0.4110    \nx7           3.183398   0.040605  78.399   &lt;2e-16 ***\nx8          -0.034252   0.043141  -0.794   0.4276    \nx9           0.541219   0.046550  11.627   &lt;2e-16 ***\nx10          0.087120   0.044000   1.980   0.0483 *  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for gaussian family taken to be 0.9207315)\n\n    Null deviance: 7339.42  on 499  degrees of freedom\nResidual deviance:  450.24  on 489  degrees of freedom\nAIC: 1390.5\n\nNumber of Fisher Scoring iterations: 2\n\n\nOr, using rtemis:\n\nmod.glm &lt;- s_GLM(x, y)\n10-03-24 19:02:10 Hello, egenn [s_GLM]\n\n.:Regression Input Summary\nTraining features: 500 x 10 \n Training outcome: 500 x 1 \n Testing features: Not available\n  Testing outcome: Not available\n\n10-03-24 19:02:11 Training GLM... [s_GLM]\n\n.:GLM Regression Training Summary\n    MSE = 0.90\n   RMSE = 0.95\n    MAE = 0.77\n      r = 0.97 (p = 5.3e-304)\n   R sq = 0.94\n10-03-24 19:02:11 Completed in 0.01 minutes (Real: 0.84; User: 0.37; System: 0.03) [s_GLM]\n\n\n\n\nsummary(mod.glm$mod)\n\n\nCall:\nglm(formula = .formula, family = family, data = df.train, weights = .weights, \n    na.action = na.action)\n\nCoefficients:\n             Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) 11.979070   0.043252 276.962   &lt;2e-16 ***\nV1           0.061798   0.040916   1.510   0.1316    \nV2          -0.003873   0.043271  -0.090   0.9287    \nV3           1.488113   0.042476  35.034   &lt;2e-16 ***\nV4           0.031115   0.044015   0.707   0.4800    \nV5           0.034217   0.043664   0.784   0.4336    \nV6           0.034716   0.042189   0.823   0.4110    \nV7           3.183398   0.040605  78.399   &lt;2e-16 ***\nV8          -0.034252   0.043141  -0.794   0.4276    \nV9           0.541219   0.046550  11.627   &lt;2e-16 ***\nV10          0.087120   0.044000   1.980   0.0483 *  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for gaussian family taken to be 0.9207315)\n\n    Null deviance: 7339.42  on 499  degrees of freedom\nResidual deviance:  450.24  on 489  degrees of freedom\nAIC: 1390.5\n\nNumber of Fisher Scoring iterations: 2",
    "crumbs": [
      "<span class='chapter-number'>50</span>  <span class='chapter-title'>Optimization</span>"
    ]
  },
  {
    "objectID": "Optimization.html#optim",
    "href": "Optimization.html#optim",
    "title": "50  Optimization",
    "section": "\n50.3 optim()\n",
    "text": "50.3 optim()\n\nBasic usage of optim to find values of parameters that minimize a function:\n\nDefine a list of initial parameter values\nDefine a loss function whose first argument is the above list of initial parameter values\nPass parameter list and objective function to optim\n\n\nIn the following example, we wrap these three steps in a function called linearcoeffs, which will output the linear coefficients that minimize squared error, given a matrix/data.frame of features x and an outcome y. We also specify the optimization method to be used (See ?base::optim for details):\n\nlinearcoeffs &lt;- function(x, y, method = \"BFGS\") {\n  \n  # 1. List of initial parameter values\n  params &lt;- as.list(c(mean(y), rep(0, NCOL(x))))\n  names(params) &lt;- c(\"Intercept\", paste0(\"Coefficient\", seq(NCOL(x))))\n  \n  # 2. Loss function: first argument is parameter list\n  loss &lt;- function(params, x, y) {\n    estimated &lt;- c(params[[1]] + x %*% unlist(params[-1]))\n    mean((y - estimated)^2)\n  }\n  \n  # 3. optim!\n  coeffs &lt;- optim(params, loss, x = x, y = y, method = method)\n  \n  # The values that minimize the loss function are stored in $par\n  coeffs$par\n}\n\n\ncoeffs.optim &lt;- linearcoeffs(x, y)\nestimated.optim &lt;- cbind(1, x) %*% coeffs.optim\nmplot3_fit(y, estimated.optim)\n\n\n\n\n\n\ncoeffs.glm &lt;- mod.glm$mod$coefficients\nestimated.glm &lt;- cbind(1, x) %*% coeffs.glm\nmplot3_fit(y, estimated.glm)\n\n\n\n\n\n\n\n\nmplot3_fit(coeffs.glm, coeffs.optim)",
    "crumbs": [
      "<span class='chapter-number'>50</span>  <span class='chapter-title'>Optimization</span>"
    ]
  },
  {
    "objectID": "Quarto.html",
    "href": "Quarto.html",
    "title": "51  Quarto",
    "section": "",
    "text": "51.1 IDEs\nQuarto is “an open-source scientific and technical publishing system built on Pandoc”.\nIt is the evolution of Rmarkdown, itself built as an extension of Markdown.\nMarkdown, whose name is a play on markup languages, is a lightweight, markup language meant to be easily human-readable and can produce output in multiple formats, like HTML, PDF and many more.\nRmarkdown added the ability to include executable blocks of R code, which would compile to a Markdown document including both the source code and its output, whether that is console text output, plots, or other elements, e.g. interactive html objects/widgets. This makes it easy to create data-driven reports and presentations within a single document. Output formats include PDF, HTML, Word, ePub, and more.\nQuarto brings the same and more functionality to more languages, including R, Python, Julia, and Observable JS.\nRStudio and VS Code both feature support for authoring and rendering/previewing Quarto documents. RStudio includes built-in support for Quarto and may ask you to install additional packages when rendering a Quarto document for the first time. VS Code requires the installation of the Quarto extension.",
    "crumbs": [
      "<span class='chapter-number'>51</span>  <span class='chapter-title'>Quarto</span>"
    ]
  },
  {
    "objectID": "Quarto.html#resources",
    "href": "Quarto.html#resources",
    "title": "51  Quarto",
    "section": "51.2 Resources",
    "text": "51.2 Resources\nLearn more about Quarto and access its full documentation on the official website: https://quarto.org/.",
    "crumbs": [
      "<span class='chapter-number'>51</span>  <span class='chapter-title'>Quarto</span>"
    ]
  },
  {
    "objectID": "System.html",
    "href": "System.html",
    "title": "System",
    "section": "",
    "text": "Outside of R, it is often important to be able to use the system shell for manipulating files and folders, and being able to use git for versioning.",
    "crumbs": [
      "System"
    ]
  },
  {
    "objectID": "TerminalIntro.html",
    "href": "TerminalIntro.html",
    "title": "52  Introduction to the System Shell",
    "section": "",
    "text": "52.1 Common shell commands\nThis is a very brief introduction to some of the most commonly used shell commands.\nA shell is a command line interface allowing access to an operating system’s services. Multiple different shells exist. The most popular is probably bash, which is the default in most Linux installations. In macOS, the default shell switched form bash to zsh in 2019 with the release of Catalina. In Windows, various shells are available through the Windows Subsystem for Linux.\nThe commands listed here will work similarly in all/most shells.\nThe first thing to look for in a new environment is the help system. In the shell, this is accessed with man:",
    "crumbs": [
      "System",
      "<span class='chapter-number'>52</span>  <span class='chapter-title'>Introduction to the System Shell</span>"
    ]
  },
  {
    "objectID": "TerminalIntro.html#common-shell-commands",
    "href": "TerminalIntro.html#common-shell-commands",
    "title": "52  Introduction to the System Shell",
    "section": "",
    "text": "52.1.1 man: Print the manual pages\nFor example, the following would return the manual pages for the ls command, explained a little later.\n\nman ls\n\n\n52.1.2 pwd: Print working directory (the directory you are currently in)\n\npwd\n\n\n52.1.3 cd: Set working directory to /path/to/dir\n\n\ncd /path/to/dir\n\n\n52.1.4 ls: List directory contents\n\nls\n\nadding the -l argument, prints directory contents as a list\n\nls -l\n\n\n52.1.5 mv: Move file from /current/dir/ to /new/dir\n\n\nmv /current/dir/file /new/dir\n\n\n52.1.6 mv: Rename file to newfilename\n\n\nmv /current/dir/file /current/dir/newfilename\n\n\n52.1.7 cp: Make a copy of file from currentPath into altPath\n\n\ncp /currentPath/file /altPath/file\n\n\n52.1.8 rm: Remove, i.e. delete, file\n\nrm /path/to/file\n\n\n52.1.9 mkdir: Create a new directory named ‘newdir’\n\nmkdir /path/to/newdir\n\n\n52.1.10 rmdir: Remove, i.e. delete, empty directory\n\nrmdir /path/to/somedir\n\nTo remove a non-empty directory and all of its contents, you can use rm -rf: -r is recursive; -f is force.\nNote: Use with care! it will immediately delete all content in the directory without asking for confirmation\n\nrm -rf /path/to/dir\n\n\n52.1.11 cat: Print contents of file to the console\n\ncat /path/to/file\n\n\n52.1.12 uname: Get system information\n-a argument for “all”\n\nuname -a\n\n\n52.1.13 whoami: Print the currently logged in user’s name\n\nwhoami\n\n\n52.1.14 id: Return user identity\nThe id command returns, among other things, the groups a user belong to. This informs you which directories and files a user can read, write, and execute.\n\nid username",
    "crumbs": [
      "System",
      "<span class='chapter-number'>52</span>  <span class='chapter-title'>Introduction to the System Shell</span>"
    ]
  },
  {
    "objectID": "TerminalIntro.html#running-system-commands-within-r",
    "href": "TerminalIntro.html#running-system-commands-within-r",
    "title": "52  Introduction to the System Shell",
    "section": "\n52.2 Running system commands within R",
    "text": "52.2 Running system commands within R\nYou can execute any system command within R using the system() command:\n\nsystem(\"uname -a\")",
    "crumbs": [
      "System",
      "<span class='chapter-number'>52</span>  <span class='chapter-title'>Introduction to the System Shell</span>"
    ]
  },
  {
    "objectID": "TerminalIntro.html#useful-terminal-commands-for-working-with-data",
    "href": "TerminalIntro.html#useful-terminal-commands-for-working-with-data",
    "title": "52  Introduction to the System Shell",
    "section": "\n52.3 Useful terminal commands for working with data",
    "text": "52.3 Useful terminal commands for working with data\nIf you receive a data file, you may want to get an idea of the contents before reading it into R.\n\n52.3.1 head: Print the first few lines of a file\n\nhead iris.csv\n\nSepal.Length,Sepal.Width,Petal.Length,Petal.Width,Species\n5.1,3.5,1.4,0.2,setosa\n4.9,3,1.4,0.2,setosa\n4.7,3.2,1.3,0.2,setosa\n4.6,3.1,1.5,0.2,setosa\n5,3.6,1.4,0.2,setosa\n5.4,3.9,1.7,0.4,setosa\n4.6,3.4,1.4,0.3,setosa\n5,3.4,1.5,0.2,setosa\n4.4,2.9,1.4,0.2,setosa\n\n\nYou can print the first n lines using the syntax head -n /path/to/file.\nFor example, you can print just the first line, which would hold the column names in a CSV file:\n\nhead -1 iris.csv\n\nSepal.Length,Sepal.Width,Petal.Length,Petal.Width,Species\n\n\n\n52.3.2 tail: Print the last few lines of a file\n\ntail iris.csv\n\n6.7,3.1,5.6,2.4,virginica\n6.9,3.1,5.1,2.3,virginica\n5.8,2.7,5.1,1.9,virginica\n6.8,3.2,5.9,2.3,virginica\n6.7,3.3,5.7,2.5,virginica\n6.7,3,5.2,2.3,virginica\n6.3,2.5,5,1.9,virginica\n6.5,3,5.2,2,virginica\n6.2,3.4,5.4,2.3,virginica\n5.9,3,5.1,1.8,virginica\n\n\n\n52.3.3 wc: Word, line, character, and byte count\nwc can print the word or line count of a file, among other things. This can be particularly useful when dealing with large files\n\nwc -l iris.csv\n\n     151 iris.csv\n\n\nThe iris dataset consist of 150 cases plus one line with the column names\n\n52.3.4 du: Display disk usage statistics\ndu can display the size of a file or directory among other things.\nThis can be very important when trying to determine if the contents of a data file will fit in memory.\nDisplay the size of a file in human-readable format (Kilobytes, Megabytes, Gigabytes, etc)\n\ndu -sh iris.csv\n\n4.0K    iris.csv\n\n\nThe same command can be used on an entire current directory:\n\ndu -sh .\n\n874M    .",
    "crumbs": [
      "System",
      "<span class='chapter-number'>52</span>  <span class='chapter-title'>Introduction to the System Shell</span>"
    ]
  },
  {
    "objectID": "TerminalIntro.html#further-resources",
    "href": "TerminalIntro.html#further-resources",
    "title": "52  Introduction to the System Shell",
    "section": "\n52.4 Further Resources",
    "text": "52.4 Further Resources\nBash is the default shell in most Linux distributions.\nZSH replaced Bash as the default shell in macOS with the release of macOS Catalina in 2019 (though Bash currently still comes installed)\n\nBash Documentation\nZSH Documentation\nWindows Subsystem for Linux Documentation\nWindows PowerShell Documentation",
    "crumbs": [
      "System",
      "<span class='chapter-number'>52</span>  <span class='chapter-title'>Introduction to the System Shell</span>"
    ]
  },
  {
    "objectID": "GitHubIntro.html",
    "href": "GitHubIntro.html",
    "title": "53  Git & GitHub: The Basics",
    "section": "",
    "text": "53.1 Installing git\ngit is a distributed version control system. It allows you to track changes to code as well as collaborate with others on code development. Code lives in a repository, which can be hosted on a remote or local server. GitHub is the largest online service for hosting git repositories.\nCheck if you system already includes an installation of git. If not, you can either find install it through your system’s package manager, or you can download it from the official git website.",
    "crumbs": [
      "System",
      "<span class='chapter-number'>53</span>  <span class='chapter-title'>Git & GitHub: The Basics</span>"
    ]
  },
  {
    "objectID": "GitHubIntro.html#basic-git-usage",
    "href": "GitHubIntro.html#basic-git-usage",
    "title": "53  Git & GitHub: The Basics",
    "section": "\n53.2 Basic git usage",
    "text": "53.2 Basic git usage\nIn the system terminal, all git commands begin with git and are followed by a command name.\n\n53.2.1 Cloning (“Downloading”)\nDownload a repository to your computer for the first time using clone. Replace “user” with the username and “repo” with the repository name.\n\ngit clone https://github.com/user/repo.git\n\nThis will clone the remote repository to a folder name ‘repo’. You can optionally provide a different folder name after the URL.\n\n53.2.2 Pulling (“Updating”)\nTo update a previously cloned repository using pull:\n\ngit pull\n\n\n53.2.3 Pushing (“Uploading”)\nGet info on local changes to repository using status:\n\ngit status\n\nWorking locally, stage new or modified files for commit using add:\n\ngit add /path/to/file\n\nStill working locally, commit changes with an informative message using commit:\n\ngit commit -m \"Fixed this or added that\"\n\nNote that the above steps did not require an internet connection, but the following does. Push one or multiple commits to remote repository using push:\n\ngit push\n\n\n53.2.4 Collaborating\nThe main way of contributing to a project is by a) making a new “branch” of the repository, b) making your edits, and c) either merging to master yourself or requesting your edits be merged by the owner/s of the repository. This allows multiple people to work on the codebase without getting in each other’s way.\n\n53.2.5 Branching and merging\nScenario: you are working on your own project, hosted on its own repository. You want to develop a new feature, which may take some time to code and test before you make it part of your official project code.\n\nCreate a new branch, e.g. devel\n\nWork in your new branch until all testing is successful\nMerge back to master branch\n\nAlways from your system terminal, from within a directory in your repository: Create a new branch:\n\ngit branch devel\n\nSwitch to your new branch:\n\ngit checkout devel\n\nWork on your code, using git add/commit/push as per usual.\nWhen you are done testing and are happy to merge back to master:\n\ngit checkout master\ngit merge devel\ngit push\n\nAll the commits performed while you were working in the devel branch will be included in that last git push from master.\n\n53.2.6 Pull request\nScenario: You are contributing to a repository along with other collaborators. You want to suggest a new feature is added to the code:\n\nCreate a new branch, e.g. mynewfeature\n\nWork in new branch until you are ready happy to share and testing is complete\nGo on to the repository website, select your branch and perform a “Pull request” asking that the changes in your mynewfeature branch are merged into master\n\nThe repository owner/s will review the request and can merge",
    "crumbs": [
      "System",
      "<span class='chapter-number'>53</span>  <span class='chapter-title'>Git & GitHub: The Basics</span>"
    ]
  },
  {
    "objectID": "GitHubIntro.html#gists",
    "href": "GitHubIntro.html#gists",
    "title": "53  Git & GitHub: The Basics",
    "section": "\n53.3 Gists",
    "text": "53.3 Gists\nGitHub also offers a very convenient pastebin-like service called Gist, which lets you quickly and easily share code snippets.\nTo share some R code using a gist:\n\nVisit the gist site.\nWrite in/copy-paste some code\nAdd a name including a .R suffix at the top left of the entry box\nCopy-paste the URL to share with others",
    "crumbs": [
      "System",
      "<span class='chapter-number'>53</span>  <span class='chapter-title'>Git & GitHub: The Basics</span>"
    ]
  },
  {
    "objectID": "GitHubIntro.html#git-and-github-for-open-and-reproducible-science",
    "href": "GitHubIntro.html#git-and-github-for-open-and-reproducible-science",
    "title": "53  Git & GitHub: The Basics",
    "section": "\n53.4 Git and GitHub for open and reproducible science",
    "text": "53.4 Git and GitHub for open and reproducible science\nIt is recommended to create a new GitHub repository for each new research project. It may be worthwhile creating a new repository when it’s time to publish a paper, to include all final working code that should accompany the publication (and e.g. exclude all trial-and-error, testing, etc. code). As Always, make sure to follow journal requirements for reporting data deposition (includes code) and accessibility.",
    "crumbs": [
      "System",
      "<span class='chapter-number'>53</span>  <span class='chapter-title'>Git & GitHub: The Basics</span>"
    ]
  },
  {
    "objectID": "GitHubIntro.html#gitresources",
    "href": "GitHubIntro.html#gitresources",
    "title": "53  Git & GitHub: The Basics",
    "section": "\n53.5 Git Resources",
    "text": "53.5 Git Resources\nGit and GitHub are very powerful and flexible, with a great deal of functionality. Some resources to learn (a great deal) more:\n\nGit cheat sheet\n\nGitHub guides # Pro Git Book by Scott Chacon and Ben Straub\n\nSee this “GitHub for beginners” blog post on the GitHub blog.",
    "crumbs": [
      "System",
      "<span class='chapter-number'>53</span>  <span class='chapter-title'>Git & GitHub: The Basics</span>"
    ]
  },
  {
    "objectID": "Advanced.html",
    "href": "Advanced.html",
    "title": "Advanced R",
    "section": "",
    "text": "This is a work-in-progress chapter, including more advanced topics and/or using newer and potentially less stable packages.",
    "crumbs": [
      "Advanced R"
    ]
  },
  {
    "objectID": "ds.html",
    "href": "ds.html",
    "title": "54  Data Queries across implementations",
    "section": "",
    "text": "54.1 Setup\nThis chapter shows how to perform filter, select, and group-by operations using different data frame implementations:\nBase R and dplyr are both slow for large datasets. data.table is very fast and features a very concise and efficient syntax, but is limited to in-memory data. polars is very fast and can handle both in-memory and out-of-memory data, but features a possibly cumbersome syntax. tidypolars allows using dplyr syntax with polars data frames. DuckDB is also very fast and can handle both in-memory and out-of-memory data, but uses SQL syntax, not great for data frame operations. duckplyr uses dplyr syntax with DuckDB data frames.",
    "crumbs": [
      "Advanced R",
      "<span class='chapter-number'>54</span>  <span class='chapter-title'>Data Queries across implementations</span>"
    ]
  },
  {
    "objectID": "ds.html#setup",
    "href": "ds.html#setup",
    "title": "54  Data Queries across implementations",
    "section": "",
    "text": "54.1.1 Load packages\n\n\n\n\n\n\nCaution\n\n\n\nNote the masking of functions that happens when all these packages are loaded together. In practice, you may want/have to stick to using a single approach at a time.\n\n\nFollowing isntructions on the duckplyr docs, we will not load duckplyr directly, but rather use the duckplyr::as_duckplyr_df to convert the iris data frame to to a duckplyr data frame.\n\nlibrary(data.table)\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:data.table':\n\n    between, first, last\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(polars)\nlibrary(tidypolars)\n\n\n54.1.2 DuckDB\nThe following code enables reporting of fallbacks to dplyr when duckplyr fails.\n\nSys.setenv(DUCKPLYR_FALLBACK_VERBOSE = TRUE)\n\n\n54.1.3 Create data frames\nWe will use the iris built-in dataset for this chapter and create a data.table, a tibble, a RPolarsDataFrame, and a duckplyr version of it.\n\n\nBase R\ndata.table\ndplyr\npolars\nDuckDB\n\n\n\n\nhead(iris)\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n\n\n\n\n\niris_dt &lt;- as.data.table(iris)\niris_dt\n\n     Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\n            &lt;num&gt;       &lt;num&gt;        &lt;num&gt;       &lt;num&gt;    &lt;fctr&gt;\n  1:          5.1         3.5          1.4         0.2    setosa\n  2:          4.9         3.0          1.4         0.2    setosa\n  3:          4.7         3.2          1.3         0.2    setosa\n  4:          4.6         3.1          1.5         0.2    setosa\n  5:          5.0         3.6          1.4         0.2    setosa\n ---                                                            \n146:          6.7         3.0          5.2         2.3 virginica\n147:          6.3         2.5          5.0         1.9 virginica\n148:          6.5         3.0          5.2         2.0 virginica\n149:          6.2         3.4          5.4         2.3 virginica\n150:          5.9         3.0          5.1         1.8 virginica\n\n\n\n\n\niris_tbl &lt;- as_tibble(iris)\niris_tbl\n\n# A tibble: 150 × 5\n   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n          &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;  \n 1          5.1         3.5          1.4         0.2 setosa \n 2          4.9         3            1.4         0.2 setosa \n 3          4.7         3.2          1.3         0.2 setosa \n 4          4.6         3.1          1.5         0.2 setosa \n 5          5           3.6          1.4         0.2 setosa \n 6          5.4         3.9          1.7         0.4 setosa \n 7          4.6         3.4          1.4         0.3 setosa \n 8          5           3.4          1.5         0.2 setosa \n 9          4.4         2.9          1.4         0.2 setosa \n10          4.9         3.1          1.5         0.1 setosa \n# ℹ 140 more rows\n\n\n\n\n\niris_pl &lt;- as_polars_df(iris)\niris_pl\n\nshape: (150, 5)\n┌──────────────┬─────────────┬──────────────┬─────────────┬───────────┐\n│ Sepal.Length ┆ Sepal.Width ┆ Petal.Length ┆ Petal.Width ┆ Species   │\n│ ---          ┆ ---         ┆ ---          ┆ ---         ┆ ---       │\n│ f64          ┆ f64         ┆ f64          ┆ f64         ┆ cat       │\n╞══════════════╪═════════════╪══════════════╪═════════════╪═══════════╡\n│ 5.1          ┆ 3.5         ┆ 1.4          ┆ 0.2         ┆ setosa    │\n│ 4.9          ┆ 3.0         ┆ 1.4          ┆ 0.2         ┆ setosa    │\n│ 4.7          ┆ 3.2         ┆ 1.3          ┆ 0.2         ┆ setosa    │\n│ 4.6          ┆ 3.1         ┆ 1.5          ┆ 0.2         ┆ setosa    │\n│ 5.0          ┆ 3.6         ┆ 1.4          ┆ 0.2         ┆ setosa    │\n│ …            ┆ …           ┆ …            ┆ …           ┆ …         │\n│ 6.7          ┆ 3.0         ┆ 5.2          ┆ 2.3         ┆ virginica │\n│ 6.3          ┆ 2.5         ┆ 5.0          ┆ 1.9         ┆ virginica │\n│ 6.5          ┆ 3.0         ┆ 5.2          ┆ 2.0         ┆ virginica │\n│ 6.2          ┆ 3.4         ┆ 5.4          ┆ 2.3         ┆ virginica │\n│ 5.9          ┆ 3.0         ┆ 5.1          ┆ 1.8         ┆ virginica │\n└──────────────┴─────────────┴──────────────┴─────────────┴───────────┘\n\n\n\n\n\niris_db &lt;- duckplyr::as_duckplyr_df(iris)\n\nThe duckplyr package is configured to fall back to dplyr when it encounters an\nincompatibility. Fallback events can be collected and uploaded for analysis to\nguide future development. By default, no data will be collected or uploaded.\n→ Run `duckplyr::fallback_sitrep()` to review the current settings.\n\nhead(iris_db)\n\nThe duckplyr package is configured to fall back to dplyr when it encounters an\nincompatibility. Fallback events can be collected and uploaded for analysis to\nguide future development. By default, no data will be collected or uploaded.\nℹ A fallback situation just occurred. The following information would have been\n  recorded:\n  {\"version\":\"0.4.1\",\"message\":\"Can't convert columns of class &lt;factor&gt; to\n  relational. Affected\n  column:\\n`...5`.\",\"name\":\"head\",\"x\":{\"...1\":\"numeric\",\"...2\":\"numeric\",\"...3\":\"numeric\",\"...4\":\"numeric\",\"...5\":\"factor\"},\"args\":{\"n\":6}}\n→ Run `duckplyr::fallback_sitrep()` to review the current settings.\n→ Run `Sys.setenv(DUCKPLYR_FALLBACK_COLLECT = 1)` to enable fallback logging,\n  and `Sys.setenv(DUCKPLYR_FALLBACK_VERBOSE = TRUE)` in addition to enable\n  printing of fallback situations to the console.\n→ Run `duckplyr::fallback_review()` to review the available reports, and\n  `duckplyr::fallback_upload()` to upload them.\nℹ See `?duckplyr::fallback()` for details.\nℹ This message will be displayed once every eight hours.\n\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa",
    "crumbs": [
      "Advanced R",
      "<span class='chapter-number'>54</span>  <span class='chapter-title'>Data Queries across implementations</span>"
    ]
  },
  {
    "objectID": "ds.html#select",
    "href": "ds.html#select",
    "title": "54  Data Queries across implementations",
    "section": "\n54.2 Select",
    "text": "54.2 Select\nSelect columns Sepal.Length and Species from the iris dataset.\n\n\n\nBase R\ndata.table\ndplyr\npolars\ntidypolars\nduckplyr\n\n\n\n\niris[, c(\"Sepal.Length\", \"Species\")] |&gt; head()\n\n  Sepal.Length Species\n1          5.1  setosa\n2          4.9  setosa\n3          4.7  setosa\n4          4.6  setosa\n5          5.0  setosa\n6          5.4  setosa\n\n\n\n\n\niris_dt[, .(Sepal.Length, Species)]\n\n     Sepal.Length   Species\n            &lt;num&gt;    &lt;fctr&gt;\n  1:          5.1    setosa\n  2:          4.9    setosa\n  3:          4.7    setosa\n  4:          4.6    setosa\n  5:          5.0    setosa\n ---                       \n146:          6.7 virginica\n147:          6.3 virginica\n148:          6.5 virginica\n149:          6.2 virginica\n150:          5.9 virginica\n\n\n\n\n\niris_tbl |&gt; \n  select(Sepal.Length, Species)\n\n# A tibble: 150 × 2\n   Sepal.Length Species\n          &lt;dbl&gt; &lt;fct&gt;  \n 1          5.1 setosa \n 2          4.9 setosa \n 3          4.7 setosa \n 4          4.6 setosa \n 5          5   setosa \n 6          5.4 setosa \n 7          4.6 setosa \n 8          5   setosa \n 9          4.4 setosa \n10          4.9 setosa \n# ℹ 140 more rows\n\n\n\n\n\niris_pl$select(\n  pl$col(c(\"Sepal.Length\", \"Species\"))\n)\n\nshape: (150, 2)\n┌──────────────┬───────────┐\n│ Sepal.Length ┆ Species   │\n│ ---          ┆ ---       │\n│ f64          ┆ cat       │\n╞══════════════╪═══════════╡\n│ 5.1          ┆ setosa    │\n│ 4.9          ┆ setosa    │\n│ 4.7          ┆ setosa    │\n│ 4.6          ┆ setosa    │\n│ 5.0          ┆ setosa    │\n│ …            ┆ …         │\n│ 6.7          ┆ virginica │\n│ 6.3          ┆ virginica │\n│ 6.5          ┆ virginica │\n│ 6.2          ┆ virginica │\n│ 5.9          ┆ virginica │\n└──────────────┴───────────┘\n\n\n\n\n\niris_pl |&gt;\n  select(Sepal.Length, Species)\n\nshape: (150, 2)\n┌──────────────┬───────────┐\n│ Sepal.Length ┆ Species   │\n│ ---          ┆ ---       │\n│ f64          ┆ cat       │\n╞══════════════╪═══════════╡\n│ 5.1          ┆ setosa    │\n│ 4.9          ┆ setosa    │\n│ 4.7          ┆ setosa    │\n│ 4.6          ┆ setosa    │\n│ 5.0          ┆ setosa    │\n│ …            ┆ …         │\n│ 6.7          ┆ virginica │\n│ 6.3          ┆ virginica │\n│ 6.5          ┆ virginica │\n│ 6.2          ┆ virginica │\n│ 5.9          ┆ virginica │\n└──────────────┴───────────┘\n\n\n\n\n\niris_db |&gt; \n  select(Sepal.Length, Species) |&gt; head()\n\n  Sepal.Length Species\n1          5.1  setosa\n2          4.9  setosa\n3          4.7  setosa\n4          4.6  setosa\n5          5.0  setosa\n6          5.4  setosa",
    "crumbs": [
      "Advanced R",
      "<span class='chapter-number'>54</span>  <span class='chapter-title'>Data Queries across implementations</span>"
    ]
  },
  {
    "objectID": "ds.html#filter",
    "href": "ds.html#filter",
    "title": "54  Data Queries across implementations",
    "section": "\n54.3 Filter",
    "text": "54.3 Filter\nWe look at an example combining 2 conditions, one on a numeric and one on a factor column:\nFilter rows where Sepal.Length is less than 5.6 and Species is versicolor or virginica.\n\n\nBase R\ndata.table\ndplyr\npolars\ntidypolars\nduckplyr\n\n\n\n\niris[iris$Sepal.Length &lt; 5.6 & iris$Species %in% c(\"versicolor\", \"virginica\"), ]\n\n    Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\n54           5.5         2.3          4.0         1.3 versicolor\n58           4.9         2.4          3.3         1.0 versicolor\n60           5.2         2.7          3.9         1.4 versicolor\n61           5.0         2.0          3.5         1.0 versicolor\n81           5.5         2.4          3.8         1.1 versicolor\n82           5.5         2.4          3.7         1.0 versicolor\n85           5.4         3.0          4.5         1.5 versicolor\n90           5.5         2.5          4.0         1.3 versicolor\n91           5.5         2.6          4.4         1.2 versicolor\n94           5.0         2.3          3.3         1.0 versicolor\n99           5.1         2.5          3.0         1.1 versicolor\n107          4.9         2.5          4.5         1.7  virginica\n\n\nor\n\nsubset(iris, Sepal.Length &lt; 5.6 & iris$Species %in% c(\"versicolor\", \"virginica\"))\n\n    Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\n54           5.5         2.3          4.0         1.3 versicolor\n58           4.9         2.4          3.3         1.0 versicolor\n60           5.2         2.7          3.9         1.4 versicolor\n61           5.0         2.0          3.5         1.0 versicolor\n81           5.5         2.4          3.8         1.1 versicolor\n82           5.5         2.4          3.7         1.0 versicolor\n85           5.4         3.0          4.5         1.5 versicolor\n90           5.5         2.5          4.0         1.3 versicolor\n91           5.5         2.6          4.4         1.2 versicolor\n94           5.0         2.3          3.3         1.0 versicolor\n99           5.1         2.5          3.0         1.1 versicolor\n107          4.9         2.5          4.5         1.7  virginica\n\n\n\n\n\niris_dt[Sepal.Length &lt; 5.6 & iris$Species %in% c(\"versicolor\", \"virginica\")]\n\n    Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\n           &lt;num&gt;       &lt;num&gt;        &lt;num&gt;       &lt;num&gt;     &lt;fctr&gt;\n 1:          5.5         2.3          4.0         1.3 versicolor\n 2:          4.9         2.4          3.3         1.0 versicolor\n 3:          5.2         2.7          3.9         1.4 versicolor\n 4:          5.0         2.0          3.5         1.0 versicolor\n 5:          5.5         2.4          3.8         1.1 versicolor\n 6:          5.5         2.4          3.7         1.0 versicolor\n 7:          5.4         3.0          4.5         1.5 versicolor\n 8:          5.5         2.5          4.0         1.3 versicolor\n 9:          5.5         2.6          4.4         1.2 versicolor\n10:          5.0         2.3          3.3         1.0 versicolor\n11:          5.1         2.5          3.0         1.1 versicolor\n12:          4.9         2.5          4.5         1.7  virginica\n\n\n\n\n\niris_tbl |&gt;\n  filter(\n    Sepal.Length &lt; 5.6,\n    Species %in% c(\"versicolor\", \"virginica\")\n)\n\n# A tibble: 12 × 5\n   Sepal.Length Sepal.Width Petal.Length Petal.Width Species   \n          &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;     \n 1          5.5         2.3          4           1.3 versicolor\n 2          4.9         2.4          3.3         1   versicolor\n 3          5.2         2.7          3.9         1.4 versicolor\n 4          5           2            3.5         1   versicolor\n 5          5.5         2.4          3.8         1.1 versicolor\n 6          5.5         2.4          3.7         1   versicolor\n 7          5.4         3            4.5         1.5 versicolor\n 8          5.5         2.5          4           1.3 versicolor\n 9          5.5         2.6          4.4         1.2 versicolor\n10          5           2.3          3.3         1   versicolor\n11          5.1         2.5          3           1.1 versicolor\n12          4.9         2.5          4.5         1.7 virginica \n\n\n\n\n\niris_pl$filter(\n  pl$col(\"Sepal.Length\") &lt; 5.6,\n  pl$col(\"Species\")$is_in(c(\"versicolor\", \"virginica\"))\n)\n\nshape: (12, 5)\n┌──────────────┬─────────────┬──────────────┬─────────────┬────────────┐\n│ Sepal.Length ┆ Sepal.Width ┆ Petal.Length ┆ Petal.Width ┆ Species    │\n│ ---          ┆ ---         ┆ ---          ┆ ---         ┆ ---        │\n│ f64          ┆ f64         ┆ f64          ┆ f64         ┆ cat        │\n╞══════════════╪═════════════╪══════════════╪═════════════╪════════════╡\n│ 5.5          ┆ 2.3         ┆ 4.0          ┆ 1.3         ┆ versicolor │\n│ 4.9          ┆ 2.4         ┆ 3.3          ┆ 1.0         ┆ versicolor │\n│ 5.2          ┆ 2.7         ┆ 3.9          ┆ 1.4         ┆ versicolor │\n│ 5.0          ┆ 2.0         ┆ 3.5          ┆ 1.0         ┆ versicolor │\n│ 5.5          ┆ 2.4         ┆ 3.8          ┆ 1.1         ┆ versicolor │\n│ …            ┆ …           ┆ …            ┆ …           ┆ …          │\n│ 5.5          ┆ 2.5         ┆ 4.0          ┆ 1.3         ┆ versicolor │\n│ 5.5          ┆ 2.6         ┆ 4.4          ┆ 1.2         ┆ versicolor │\n│ 5.0          ┆ 2.3         ┆ 3.3          ┆ 1.0         ┆ versicolor │\n│ 5.1          ┆ 2.5         ┆ 3.0          ┆ 1.1         ┆ versicolor │\n│ 4.9          ┆ 2.5         ┆ 4.5          ┆ 1.7         ┆ virginica  │\n└──────────────┴─────────────┴──────────────┴─────────────┴────────────┘\n\n\n\n\n\niris_pl |&gt;\n  filter(\n    Sepal.Length &lt; 5.6,\n    Species %in% c(\"versicolor\", \"virginica\")\n  )\n\nshape: (12, 5)\n┌──────────────┬─────────────┬──────────────┬─────────────┬────────────┐\n│ Sepal.Length ┆ Sepal.Width ┆ Petal.Length ┆ Petal.Width ┆ Species    │\n│ ---          ┆ ---         ┆ ---          ┆ ---         ┆ ---        │\n│ f64          ┆ f64         ┆ f64          ┆ f64         ┆ cat        │\n╞══════════════╪═════════════╪══════════════╪═════════════╪════════════╡\n│ 5.5          ┆ 2.3         ┆ 4.0          ┆ 1.3         ┆ versicolor │\n│ 4.9          ┆ 2.4         ┆ 3.3          ┆ 1.0         ┆ versicolor │\n│ 5.2          ┆ 2.7         ┆ 3.9          ┆ 1.4         ┆ versicolor │\n│ 5.0          ┆ 2.0         ┆ 3.5          ┆ 1.0         ┆ versicolor │\n│ 5.5          ┆ 2.4         ┆ 3.8          ┆ 1.1         ┆ versicolor │\n│ …            ┆ …           ┆ …            ┆ …           ┆ …          │\n│ 5.5          ┆ 2.5         ┆ 4.0          ┆ 1.3         ┆ versicolor │\n│ 5.5          ┆ 2.6         ┆ 4.4          ┆ 1.2         ┆ versicolor │\n│ 5.0          ┆ 2.3         ┆ 3.3          ┆ 1.0         ┆ versicolor │\n│ 5.1          ┆ 2.5         ┆ 3.0          ┆ 1.1         ┆ versicolor │\n│ 4.9          ┆ 2.5         ┆ 4.5          ┆ 1.7         ┆ virginica  │\n└──────────────┴─────────────┴──────────────┴─────────────┴────────────┘\n\n\n\n\n\niris_db |&gt;\n  filter(\n    Sepal.Length &lt; 5.6,\n    Species %in% c(\"versicolor\", \"virginica\")\n  )\n\n   Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\n1           5.5         2.3          4.0         1.3 versicolor\n2           4.9         2.4          3.3         1.0 versicolor\n3           5.2         2.7          3.9         1.4 versicolor\n4           5.0         2.0          3.5         1.0 versicolor\n5           5.5         2.4          3.8         1.1 versicolor\n6           5.5         2.4          3.7         1.0 versicolor\n7           5.4         3.0          4.5         1.5 versicolor\n8           5.5         2.5          4.0         1.3 versicolor\n9           5.5         2.6          4.4         1.2 versicolor\n10          5.0         2.3          3.3         1.0 versicolor\n11          5.1         2.5          3.0         1.1 versicolor\n12          4.9         2.5          4.5         1.7  virginica",
    "crumbs": [
      "Advanced R",
      "<span class='chapter-number'>54</span>  <span class='chapter-title'>Data Queries across implementations</span>"
    ]
  },
  {
    "objectID": "ds.html#group-by",
    "href": "ds.html#group-by",
    "title": "54  Data Queries across implementations",
    "section": "\n54.4 Group-by",
    "text": "54.4 Group-by\nGet the mean of Sepal.Length by Species.\n\n\nBase R\ndata.table\ndplyr\npolars\ntidypolars\nduckplyr\n\n\n\n\naggregate(Sepal.Length ~ Species, iris, mean)\n\n     Species Sepal.Length\n1     setosa        5.006\n2 versicolor        5.936\n3  virginica        6.588\n\n\n\n\n\niris_dt[, .(mean(Sepal.Length)), by = Species]\n\n      Species    V1\n       &lt;fctr&gt; &lt;num&gt;\n1:     setosa 5.006\n2: versicolor 5.936\n3:  virginica 6.588\n\n\n\n\n\niris_tbl |&gt; \n  group_by(Species) |&gt; \n  summarize(mean(Sepal.Length))\n\n# A tibble: 3 × 2\n  Species    `mean(Sepal.Length)`\n  &lt;fct&gt;                     &lt;dbl&gt;\n1 setosa                     5.01\n2 versicolor                 5.94\n3 virginica                  6.59\n\n\n\n\n\niris_pl$group_by(\"Species\")$agg(pl$mean(\"Sepal.Length\"))\n\nshape: (3, 2)\n┌────────────┬──────────────┐\n│ Species    ┆ Sepal.Length │\n│ ---        ┆ ---          │\n│ cat        ┆ f64          │\n╞════════════╪══════════════╡\n│ setosa     ┆ 5.006        │\n│ virginica  ┆ 6.588        │\n│ versicolor ┆ 5.936        │\n└────────────┴──────────────┘\n\n\n\n\nNote that, unlike dplyr, tidypolars requires summarize inputs to be named (at least at the time of writing).\n\niris_pl |&gt;\n  group_by(Species) |&gt;\n  summarize(mean_Sepal.Length = mean(Sepal.Length))\n\nshape: (3, 2)\n┌────────────┬───────────────────┐\n│ Species    ┆ mean_Sepal.Length │\n│ ---        ┆ ---               │\n│ cat        ┆ f64               │\n╞════════════╪═══════════════════╡\n│ virginica  ┆ 6.588             │\n│ versicolor ┆ 5.936             │\n│ setosa     ┆ 5.006             │\n└────────────┴───────────────────┘\nGroups [3]: Species\nMaintain order: FALSE\n\n\n\n\n\niris_db |&gt; \n  group_by(Species) |&gt; \n  summarize(mean(Sepal.Length))\n\n# A tibble: 3 × 2\n  Species    `mean(Sepal.Length)`\n  &lt;fct&gt;                     &lt;dbl&gt;\n1 setosa                     5.01\n2 versicolor                 5.94\n3 virginica                  6.59",
    "crumbs": [
      "Advanced R",
      "<span class='chapter-number'>54</span>  <span class='chapter-title'>Data Queries across implementations</span>"
    ]
  },
  {
    "objectID": "ds.html#references",
    "href": "ds.html#references",
    "title": "54  Data Queries across implementations",
    "section": "\n54.5 References",
    "text": "54.5 References\n\ndata.table\ndplyr\nr-polars\ntidypolars\nduckplyr",
    "crumbs": [
      "Advanced R",
      "<span class='chapter-number'>54</span>  <span class='chapter-title'>Data Queries across implementations</span>"
    ]
  },
  {
    "objectID": "DuckDB.html",
    "href": "DuckDB.html",
    "title": "55  DuckDB",
    "section": "",
    "text": "55.1 Installation\nDuckDB is a popular and powerful “in-process SQL OLAP database management system”\nIt provides APIs in multiple languages, including R, Python, and Julia.  In practical terms, it provides a very efficient way to read, query, and write big data in R, which includes datasets that are bigger than memory.  For example, it allows lazy-reading of large datasets with optional filtering, selecting, and grouping operations before reading into memory. Chapter 54 includes examples using duckplyr\ninstall.packages(\"duckdb\")",
    "crumbs": [
      "Advanced R",
      "<span class='chapter-number'>55</span>  <span class='chapter-title'>DuckDB</span>"
    ]
  },
  {
    "objectID": "DuckDB.html#duckdb-api",
    "href": "DuckDB.html#duckdb-api",
    "title": "55  DuckDB",
    "section": "\n55.2 DuckDB API",
    "text": "55.2 DuckDB API\nDuckDB uses the R Database Interface (DBI). Learn more about using DBI here.",
    "crumbs": [
      "Advanced R",
      "<span class='chapter-number'>55</span>  <span class='chapter-title'>DuckDB</span>"
    ]
  },
  {
    "objectID": "DuckDB.html#setup-connection",
    "href": "DuckDB.html#setup-connection",
    "title": "55  DuckDB",
    "section": "\n55.3 Setup Connection",
    "text": "55.3 Setup Connection\nBy default, duckdb()’s dbdir argument defaults to DBDIR_MEMORY, which creates a non-persistent, in-memory object.\n\ncon &lt;- dbConnect(duckdb::duckdb())",
    "crumbs": [
      "Advanced R",
      "<span class='chapter-number'>55</span>  <span class='chapter-title'>DuckDB</span>"
    ]
  },
  {
    "objectID": "DuckDB.html#settings",
    "href": "DuckDB.html#settings",
    "title": "55  DuckDB",
    "section": "\n55.4 Settings",
    "text": "55.4 Settings\n\ndbExecute(con, \"PRAGMA enable_progress_bar;\")\n\n[1] 0",
    "crumbs": [
      "Advanced R",
      "<span class='chapter-number'>55</span>  <span class='chapter-title'>DuckDB</span>"
    ]
  },
  {
    "objectID": "DuckDB.html#read-csv",
    "href": "DuckDB.html#read-csv",
    "title": "55  DuckDB",
    "section": "\n55.5 Read CSV",
    "text": "55.5 Read CSV\nYou can directly read into data.frame, which may be best for smaller datasets:\n\nir &lt;- dbGetQuery(con, \n    \"SELECT * FROM read_csv_auto('./iris.csv');\"\n)\nhead(ir)\n\n  Sepal_Length Sepal_Width Petal_Length Petal_Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n\n\nFor larger datasets, you can create a DuckDB table that can be queried without loading the dataset into memory:\n\ndbExecute(con,\n    \"CREATE TABLE iris AS SELECT * FROM './iris.csv';\"\n)\n\n[1] 150\n\n\n\n55.5.1 List tables\n\ndbGetQuery(con, \"PRAGMA show_tables;\")\n\n  name\n1 iris\n\n\nUsing the R API:\n\ndbListTables(con)\n\n[1] \"iris\"",
    "crumbs": [
      "Advanced R",
      "<span class='chapter-number'>55</span>  <span class='chapter-title'>DuckDB</span>"
    ]
  },
  {
    "objectID": "DuckDB.html#filter",
    "href": "DuckDB.html#filter",
    "title": "55  DuckDB",
    "section": "\n55.6 Filter",
    "text": "55.6 Filter\n\ndbGetQuery(con,\n    \"SELECT * FROM iris WHERE Species in ('setosa', 'versicolor')\") |&gt; head()\n\n  Sepal_Length Sepal_Width Petal_Length Petal_Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n\n\n\ndbExecute(con,\n    \"\n    CREATE TABLE ir AS SELECT * FROM \n    read_csv_auto('/Users/egenn/icloud/Data/iris.csv', \n    delim=',', header=True);\n    \"\n)\n\n[1] 150\n\n\n\n55.6.1 Fetch data to data.frame\n\nir = dbGetQuery(con, \"SELECT * from iris\")\nhead(ir)\n\n  Sepal_Length Sepal_Width Petal_Length Petal_Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n\n\n\nclass(ir)\n\n[1] \"data.frame\"\n\n\n\n55.6.2 Fetch data to data.table:\n\nir = dbGetQuery(con, \"SELECT * from iris\")\n\n\nclass(ir)\n\n[1] \"data.frame\"\n\nhead(ir)\n\n  Sepal_Length Sepal_Width Petal_Length Petal_Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa",
    "crumbs": [
      "Advanced R",
      "<span class='chapter-number'>55</span>  <span class='chapter-title'>DuckDB</span>"
    ]
  },
  {
    "objectID": "DuckDB.html#close-connection",
    "href": "DuckDB.html#close-connection",
    "title": "55  DuckDB",
    "section": "\n55.7 Close connection",
    "text": "55.7 Close connection\nWhen you are done working with the database, you should close the connection:\n\ndbDisconnect(con)",
    "crumbs": [
      "Advanced R",
      "<span class='chapter-number'>55</span>  <span class='chapter-title'>DuckDB</span>"
    ]
  },
  {
    "objectID": "DuckDB.html#resources",
    "href": "DuckDB.html#resources",
    "title": "55  DuckDB",
    "section": "\n55.8 Resources",
    "text": "55.8 Resources\n\nDuckDB Documentation\nDuckDB CSV",
    "crumbs": [
      "Advanced R",
      "<span class='chapter-number'>55</span>  <span class='chapter-title'>DuckDB</span>"
    ]
  },
  {
    "objectID": "Resources.html",
    "href": "Resources.html",
    "title": "56  Resources",
    "section": "",
    "text": "56.1 R Project\nThe R Manuals include a number of resources, including:",
    "crumbs": [
      "<span class='chapter-number'>56</span>  <span class='chapter-title'>Resources</span>"
    ]
  },
  {
    "objectID": "Resources.html#r-project",
    "href": "Resources.html#r-project",
    "title": "56  Resources",
    "section": "",
    "text": "Introduction to R\nCRAN task views offer curated lists of packages by topic",
    "crumbs": [
      "<span class='chapter-number'>56</span>  <span class='chapter-title'>Resources</span>"
    ]
  },
  {
    "objectID": "Resources.html#r-programming",
    "href": "Resources.html#r-programming",
    "title": "56  Resources",
    "section": "56.2 R programming",
    "text": "56.2 R programming\n\nAdvanced R by Hadley Wickham\nEfficient R Programming by Colin Gillespie & Robin Lovelace\nRcpp: Seamless R and C++ Integration\nParallel and Distributed Processing with future",
    "crumbs": [
      "<span class='chapter-number'>56</span>  <span class='chapter-title'>Resources</span>"
    ]
  },
  {
    "objectID": "Resources.html#r-for-data-science",
    "href": "Resources.html#r-for-data-science",
    "title": "56  Resources",
    "section": "56.3 R for data science",
    "text": "56.3 R for data science\n\nR Programming for Data Science by Roger D. Peng, based mostly on base R, and also covers the basics of dplyr.\nData wrangling, exploration, and analysis with R b y Jenny Bryan\nR for Data Science by Hadley Wickham & Garrett Grolemund",
    "crumbs": [
      "<span class='chapter-number'>56</span>  <span class='chapter-title'>Resources</span>"
    ]
  },
  {
    "objectID": "Resources.html#markdown",
    "href": "Resources.html#markdown",
    "title": "56  Resources",
    "section": "56.4 Markdown",
    "text": "56.4 Markdown\n\nOriginal guide by the author of Markdown\nMarkdown guide by Matt Cone",
    "crumbs": [
      "<span class='chapter-number'>56</span>  <span class='chapter-title'>Resources</span>"
    ]
  },
  {
    "objectID": "Resources.html#r-markdown",
    "href": "Resources.html#r-markdown",
    "title": "56  Resources",
    "section": "56.5 R markdown",
    "text": "56.5 R markdown\nNote: Quarto has superseded R Markdown as the recommended tool for authoring documents in R.\n\nR Markdown: The Definitive Guide by Yihui Xie, J. J. Allaire, Garrett Grolemund\nbookdown: Authoring Books and Technical Documents with R Markdown: how to make websites like this one you are on right now",
    "crumbs": [
      "<span class='chapter-number'>56</span>  <span class='chapter-title'>Resources</span>"
    ]
  },
  {
    "objectID": "Resources.html#quarto",
    "href": "Resources.html#quarto",
    "title": "56  Resources",
    "section": "56.6 Quarto",
    "text": "56.6 Quarto\n\nQuarto home",
    "crumbs": [
      "<span class='chapter-number'>56</span>  <span class='chapter-title'>Resources</span>"
    ]
  },
  {
    "objectID": "Resources.html#writing-r-documentation",
    "href": "Resources.html#writing-r-documentation",
    "title": "56  Resources",
    "section": "56.7 Writing R Documentation",
    "text": "56.7 Writing R Documentation\n\nDocumentation with roxygen2",
    "crumbs": [
      "<span class='chapter-number'>56</span>  <span class='chapter-title'>Resources</span>"
    ]
  },
  {
    "objectID": "Resources.html#graphics",
    "href": "Resources.html#graphics",
    "title": "56  Resources",
    "section": "56.8 Graphics",
    "text": "56.8 Graphics\n\n56.8.1 ggplot2\n\nggplot2\n\n\n\n56.8.2 Plotly\n\nPlotly R API\nInteractive web-based data visualization with R, plotly, and shiny",
    "crumbs": [
      "<span class='chapter-number'>56</span>  <span class='chapter-title'>Resources</span>"
    ]
  },
  {
    "objectID": "Resources.html#git-and-github",
    "href": "Resources.html#git-and-github",
    "title": "56  Resources",
    "section": "56.9 Git and GitHub",
    "text": "56.9 Git and GitHub\n\nGitHub guides\nPro Git Book by Scott Chacon and Ben Straub",
    "crumbs": [
      "<span class='chapter-number'>56</span>  <span class='chapter-title'>Resources</span>"
    ]
  },
  {
    "objectID": "Resources.html#machine-learning",
    "href": "Resources.html#machine-learning",
    "title": "56  Resources",
    "section": "56.10 Machine Learning",
    "text": "56.10 Machine Learning\n\nAn Introduction to Statistical Learning offers an accessible view of core learning algorithms, without being math-heavy.\nElements of Statistical Learning offers a deeper and more extensive view on learning algorithms.\nMachine Learning with rtemis",
    "crumbs": [
      "<span class='chapter-number'>56</span>  <span class='chapter-title'>Resources</span>"
    ]
  },
  {
    "objectID": "Resources.html#datasets",
    "href": "Resources.html#datasets",
    "title": "56  Resources",
    "section": "56.11 Datasets",
    "text": "56.11 Datasets\nA number of online repositories offer free access to datasets suitable for data science / statistics / machine learning. Some of them are: \n\nNIH Data Repositories\nPLOS Recommended Repositories\nOpenML\nUCI Machine Learning Repository\nPenn ML Benchmarks (Essentially a subset of OpenML)\nWikipedia’s List of datasets for machine-learning research\nUCSF Library Resources",
    "crumbs": [
      "<span class='chapter-number'>56</span>  <span class='chapter-title'>Resources</span>"
    ]
  },
  {
    "objectID": "DataPipeline.html",
    "href": "DataPipeline.html",
    "title": "\n57  Data Pipeline Overview\n",
    "section": "",
    "text": "57.1 Get access to Data\nHealth-related data comes from many sources, including:",
    "crumbs": [
      "<span class='chapter-number'>57</span>  <span class='chapter-title'>Data Pipeline Overview</span>"
    ]
  },
  {
    "objectID": "DataPipeline.html#get-access-to-data",
    "href": "DataPipeline.html#get-access-to-data",
    "title": "\n57  Data Pipeline Overview\n",
    "section": "",
    "text": "Electronic Health Records (EPIC)\nLab/Clinical research data\nPublic datasets, e.g. NIH, UK Biobank, etc.",
    "crumbs": [
      "<span class='chapter-number'>57</span>  <span class='chapter-title'>Data Pipeline Overview</span>"
    ]
  },
  {
    "objectID": "DataPipeline.html#handle-and-inspect-data-in-the-command-line",
    "href": "DataPipeline.html#handle-and-inspect-data-in-the-command-line",
    "title": "\n57  Data Pipeline Overview\n",
    "section": "\n57.2 Handle and inspect data in the command line",
    "text": "57.2 Handle and inspect data in the command line\nParticularly useful for data sets of unknown structure (e.g. to find what delimiter is used) and very large data (will it fit into memory?)\n\nIntro to the system shell",
    "crumbs": [
      "<span class='chapter-number'>57</span>  <span class='chapter-title'>Data Pipeline Overview</span>"
    ]
  },
  {
    "objectID": "DataPipeline.html#read-data-into-r",
    "href": "DataPipeline.html#read-data-into-r",
    "title": "\n57  Data Pipeline Overview\n",
    "section": "\n57.3 Read Data into R",
    "text": "57.3 Read Data into R\n\nUsing R’s read.csv(), read.table()\n\nUsing data.table’s fread()\n\nUsing readr’s read_csv()\n\nUsing specialized packages for third-party data formats",
    "crumbs": [
      "<span class='chapter-number'>57</span>  <span class='chapter-title'>Data Pipeline Overview</span>"
    ]
  },
  {
    "objectID": "DataPipeline.html#clean-data-names-values",
    "href": "DataPipeline.html#clean-data-names-values",
    "title": "\n57  Data Pipeline Overview\n",
    "section": "\n57.4 Clean data names & values",
    "text": "57.4 Clean data names & values\n\nUsing string operations\n\nUsing factor() to define factor levels",
    "crumbs": [
      "<span class='chapter-number'>57</span>  <span class='chapter-title'>Data Pipeline Overview</span>"
    ]
  },
  {
    "objectID": "DataPipeline.html#define-data-types",
    "href": "DataPipeline.html#define-data-types",
    "title": "\n57  Data Pipeline Overview\n",
    "section": "\n57.5 Define Data Types",
    "text": "57.5 Define Data Types\n\nUsing the ‘colClasses’ argument in read.csv(), or fread()\n\n\nor\n\nCoercing data types using as.numeric(), as.character(), factor(), as.Date(), as.POSIXct(), etc.",
    "crumbs": [
      "<span class='chapter-number'>57</span>  <span class='chapter-title'>Data Pipeline Overview</span>"
    ]
  },
  {
    "objectID": "DataPipeline.html#reshape",
    "href": "DataPipeline.html#reshape",
    "title": "\n57  Data Pipeline Overview\n",
    "section": "\n57.6 Reshape",
    "text": "57.6 Reshape\nConvert long to wide or vice versa, as needed.\n\nUsing base reshape()\n\nUsing data.table’s dcast() and melt()\n\nUsing tidyr’s pivot_wider() and pivot_longer()",
    "crumbs": [
      "<span class='chapter-number'>57</span>  <span class='chapter-title'>Data Pipeline Overview</span>"
    ]
  },
  {
    "objectID": "DataPipeline.html#join-data-sets",
    "href": "DataPipeline.html#join-data-sets",
    "title": "\n57  Data Pipeline Overview\n",
    "section": "\n57.7 Join data sets",
    "text": "57.7 Join data sets\nIf you have data in multiple files that need to be merged, you can easily joining them:\n\nUsing merge() for data.frames or data.tables",
    "crumbs": [
      "<span class='chapter-number'>57</span>  <span class='chapter-title'>Data Pipeline Overview</span>"
    ]
  },
  {
    "objectID": "DataPipeline.html#transform-data",
    "href": "DataPipeline.html#transform-data",
    "title": "\n57  Data Pipeline Overview\n",
    "section": "\n57.8 Transform data",
    "text": "57.8 Transform data\nData transformations will depend on the analysis or analyses you wish to perform. Note that we often need to perform different data transformation for different statistical tests or machine learning models (supervised, or unsupervised learning).\n\nscale(), log(), cut()\nHandle missing data",
    "crumbs": [
      "<span class='chapter-number'>57</span>  <span class='chapter-title'>Data Pipeline Overview</span>"
    ]
  },
  {
    "objectID": "DataPipeline.html#visualize",
    "href": "DataPipeline.html#visualize",
    "title": "\n57  Data Pipeline Overview\n",
    "section": "\n57.9 Visualize",
    "text": "57.9 Visualize\nVisualization is essential before, during, and data preparation, hypothesis testing, supervised, and unsupervised learning\n\nUsing base graphics: boxplot(), hist(), plot(), barplot(), etc.\n\nUsing ggplot2\n\nUsing plotly interactive plots",
    "crumbs": [
      "<span class='chapter-number'>57</span>  <span class='chapter-title'>Data Pipeline Overview</span>"
    ]
  },
  {
    "objectID": "DataPipeline.html#summarize-aggregate",
    "href": "DataPipeline.html#summarize-aggregate",
    "title": "\n57  Data Pipeline Overview\n",
    "section": "\n57.10 Summarize & Aggregate",
    "text": "57.10 Summarize & Aggregate\n\nSummarize\nAggregate",
    "crumbs": [
      "<span class='chapter-number'>57</span>  <span class='chapter-title'>Data Pipeline Overview</span>"
    ]
  },
  {
    "objectID": "DataPipeline.html#statistical-hypothesis-testing",
    "href": "DataPipeline.html#statistical-hypothesis-testing",
    "title": "\n57  Data Pipeline Overview\n",
    "section": "\n57.11 Statistical Hypothesis Testing",
    "text": "57.11 Statistical Hypothesis Testing\n\nt.test(), wilcox.test(), aov(), kruskal.test()\nGeneralized Linear Models: glm()",
    "crumbs": [
      "<span class='chapter-number'>57</span>  <span class='chapter-title'>Data Pipeline Overview</span>"
    ]
  },
  {
    "objectID": "DataPipeline.html#predictive-modeling",
    "href": "DataPipeline.html#predictive-modeling",
    "title": "\n57  Data Pipeline Overview\n",
    "section": "\n57.12 Predictive Modeling",
    "text": "57.12 Predictive Modeling\nPerform classification, regression, survival analysis\n\nGLMNET, Classification and Regression Trees (CART), Random Forest, Gradient Boosting, etc.",
    "crumbs": [
      "<span class='chapter-number'>57</span>  <span class='chapter-title'>Data Pipeline Overview</span>"
    ]
  },
  {
    "objectID": "DataPipeline.html#decomposition",
    "href": "DataPipeline.html#decomposition",
    "title": "\n57  Data Pipeline Overview\n",
    "section": "\n57.13 Decomposition",
    "text": "57.13 Decomposition\nDo dimensionality reduction / matrix factorization:\n\nPCA, ICA, NMF, UMAP, t-SNE, etc.",
    "crumbs": [
      "<span class='chapter-number'>57</span>  <span class='chapter-title'>Data Pipeline Overview</span>"
    ]
  },
  {
    "objectID": "DataPipeline.html#clustering",
    "href": "DataPipeline.html#clustering",
    "title": "\n57  Data Pipeline Overview\n",
    "section": "\n57.14 Clustering",
    "text": "57.14 Clustering\nGroup cases based on similarity across multiple features:\n\nK-means, Fuzzy C-means, HOPACH, Spectral Clustering, etc.",
    "crumbs": [
      "<span class='chapter-number'>57</span>  <span class='chapter-title'>Data Pipeline Overview</span>"
    ]
  },
  {
    "objectID": "DataPipeline.html#saving-data-to-disk",
    "href": "DataPipeline.html#saving-data-to-disk",
    "title": "\n57  Data Pipeline Overview\n",
    "section": "\n57.15 Saving data to disk",
    "text": "57.15 Saving data to disk\nSave your cleaned dataset to disk:\n\nbase write.csv()\n\ndata.table’s fwrite()\n\nbase saveRDS()",
    "crumbs": [
      "<span class='chapter-number'>57</span>  <span class='chapter-title'>Data Pipeline Overview</span>"
    ]
  },
  {
    "objectID": "DataPipeline.html#program-your-own-functions",
    "href": "DataPipeline.html#program-your-own-functions",
    "title": "\n57  Data Pipeline Overview\n",
    "section": "\n57.16 Program your own functions!",
    "text": "57.16 Program your own functions!\nFor all the above operations, you will often be better off writing your own customized functions using the above base and third-party packages for your specific data needs and analysis goals.\n\nFunctions",
    "crumbs": [
      "<span class='chapter-number'>57</span>  <span class='chapter-title'>Data Pipeline Overview</span>"
    ]
  },
  {
    "objectID": "DataPipeline.html#always-document-your-code",
    "href": "DataPipeline.html#always-document-your-code",
    "title": "\n57  Data Pipeline Overview\n",
    "section": "\n57.17 Always document your code!",
    "text": "57.17 Always document your code!\nAlways remember to add in-line comments (#) to your functions, scripts, Quarto documents for your future self, your collaborators, and the world.",
    "crumbs": [
      "<span class='chapter-number'>57</span>  <span class='chapter-title'>Data Pipeline Overview</span>"
    ]
  },
  {
    "objectID": "DataPipeline.html#share-your-code-on-github",
    "href": "DataPipeline.html#share-your-code-on-github",
    "title": "\n57  Data Pipeline Overview\n",
    "section": "\n57.18 Share your code on GitHub",
    "text": "57.18 Share your code on GitHub\nConsider sharing your code on GitHub to allow review by others. This may be done at any time during your work, you should especially consider to publish code along with published manuscripts.",
    "crumbs": [
      "<span class='chapter-number'>57</span>  <span class='chapter-title'>Data Pipeline Overview</span>"
    ]
  },
  {
    "objectID": "CrashCourse.html",
    "href": "CrashCourse.html",
    "title": "Crash Course",
    "section": "",
    "text": "Introduction & Format\nThis is the online material for the UCSF DCR ‘Intro to R’ selective.\nThis is a brief introduction to the R programming language for health data science. It covers basic commands to allow you to read in data, perform common manipulations, plot data and run common tests. R is a programming language developed specifically for statistical computing and graphics.  It is often mis-characterized as a “statistical package”, similar to SPSS, for example, but as a full programming language it has far more extensive functionality.  For a more thorough coverage of the topic, see the main part of this book.  Links to book chapters will be provided throughout these notes for those interested in reading up further into particular topics.  R can be used to perform most, if not all, operations in statistics, data science, machine learning. This is not a crash course in statistics, data science, or machine learning, but an introduction to the language itself.  If you have any questions, write them down and make sure to ask them during each section’s Q&A.",
    "crumbs": [
      "Crash Course"
    ]
  },
  {
    "objectID": "CrashCourse.html#data-pipelines",
    "href": "CrashCourse.html#data-pipelines",
    "title": "Crash Course",
    "section": "Data pipelines",
    "text": "Data pipelines\nThis is only a generic, high-level example of a data pipeline.\nEach of the nodes in the diagram may contain a number of sub-steps, dependent on the data and the goal(s) of the analysis.\n\n\n\n\n\n\n\nFigure 1: Example high-level data pipeline\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nWithin a single project, you may need to create multiple varations of your data pipeline, since different questions may require different approaches that in turn require different preprocessing.",
    "crumbs": [
      "Crash Course"
    ]
  },
  {
    "objectID": "CrashCourse.html#the-r-language",
    "href": "CrashCourse.html#the-r-language",
    "title": "Crash Course",
    "section": "The R language",
    "text": "The R language\n\nThe S statistical programming language was developed in 1976 at Bell Labs by John Chambers and others “to turn ideas into software, quickly and faithfully”.\nR is an open source implementation of S developed by Ross Ihaka and Robert Gentleman at the University of Auckland, New Zealand; initial version released in 1995.\nSupported by the R Foundation for Statistical Computing, developed by the R Core Team and the contributions of many others.\nOfficial part of the Free Software Foundation’s GNU project available under GNU GPL v2.\nLatest version 4.3.3 released 2024-02-29 (as of writing)",
    "crumbs": [
      "Crash Course"
    ]
  },
  {
    "objectID": "CrashCourse.html#free-open-source-software",
    "href": "CrashCourse.html#free-open-source-software",
    "title": "Crash Course",
    "section": "Free Open Source Software",
    "text": "Free Open Source Software\nFree Open Source Software (FOSS) is software that is “free” and “open source” - what does that really mean?\nWhat is Free Software?\n\n“Free software is software that gives you, the user, the freedom to share, study and modify it. We call this free software because the user is free.”\n\n— Free Software Foundation\n\n\nWhat is Open Source Software\n\n“Open source software is software with source code that anyone can inspect, modify, and enhance.”\n\n— opensource.com\n\n\nWhy is FOSS important?  There are many advantage to FOSS, in general. Some of those, that are highly relevant in biomedical research and clinical applications include the promotion of inclusion, transparency, and trustworthiness.",
    "crumbs": [
      "Crash Course"
    ]
  },
  {
    "objectID": "CrashCourse.html#integrated-development-environments-ides-for-r",
    "href": "CrashCourse.html#integrated-development-environments-ides-for-r",
    "title": "Crash Course",
    "section": "Integrated Development Environments (IDEs) for R",
    "text": "Integrated Development Environments (IDEs) for R\nAn Integrated Development Environment (IDE) is a software application that allows you to write and run code.  Two popular and powerful IDEs for R are:\n\nRStudio\n\nVisual Studio Code with the R Extension",
    "crumbs": [
      "Crash Course"
    ]
  },
  {
    "objectID": "CrashCourse.html#the-r-core-language-package-ecosystem",
    "href": "CrashCourse.html#the-r-core-language-package-ecosystem",
    "title": "Crash Course",
    "section": "The R core language & package ecosystem",
    "text": "The R core language & package ecosystem\nR boasts extensive quantitative and statistical functionality in the base system.\nThis functionality is extended through a vast ecosystem of external packages.\n\n\nCRAN: The Comprehensive R Archive Network (https://cran.r-project.org/): 20510 packages\n\n\nBioconductor: Bioinformatics-related packages and more (https://www.bioconductor.org/): 2266 packages\n\n\nGitHub: The largest source code host (&gt;200M repositories; https://github.com/): Hosts most if not all of the above and a lot more. Also hosts a copy of the entire CRAN.",
    "crumbs": [
      "Crash Course"
    ]
  },
  {
    "objectID": "CrashCourse.html#reading-in-data",
    "href": "CrashCourse.html#reading-in-data",
    "title": "Crash Course",
    "section": "Reading in Data",
    "text": "Reading in Data\nWe shall use a heart failure dataset as an example. It is freely available at the UCI repository:\nHeart Failure Clinical Records Dataset  You can either download it to a local folder or read it directly from the internet. For this exercise, download it to a local folder of your choice.\nCSV\nAssuming you have downloaded the file to your local disk under “/Data/UCI”, you can read it into R using the read.csv() command:\n\ndat &lt;- read.csv(\"/Data/UCI/heart_failure_clinical_records_dataset.csv\")\n\nAn important optional argument of the read.csv() command is na.strings: it lets you define which string(s) should be considered as missing data. Some common strings used to indicated missing data are the empty string \"\" or NA.  The above file does not contain any missing data, so the following is only an example of how you would define the na.strings argument if you wanted to read in a file that includes missing data coded either by an empty string (““) or NA:\n\ndat &lt;- read.csv(\"/Data/UCI/heart_failure_clinical_records_dataset.csv\",\n                na.strings = c(\"\", \"NA\"))\n\nread.csv() can also read files directly from the internet:\n\ndat &lt;- read.csv(\"https://archive.ics.uci.edu/ml/machine-learning-databases/00519/heart_failure_clinical_records_dataset.csv\")\n\n\n\n\n\n\n\nTip\n\n\n\nIf reading directly from the internet, you may get an SSL error (especially on Windows systems). In that case, you can either download the file using a browser and reading it from disk, or you can try installing/updating your OpenSSL library.\n\n\nThe head() function prints the first few lines of an object:\n\nhead(dat)\n\n  age anaemia creatinine_phosphokinase diabetes ejection_fraction\n1  75       0                      582        0                20\n2  55       0                     7861        0                38\n3  65       0                      146        0                20\n4  50       1                      111        0                20\n5  65       1                      160        1                20\n6  90       1                       47        0                40\n  high_blood_pressure platelets serum_creatinine serum_sodium sex smoking time\n1                   1    265000              1.9          130   1       0    4\n2                   0    263358              1.1          136   1       0    6\n3                   0    162000              1.3          129   1       1    7\n4                   0    210000              1.9          137   1       0    7\n5                   0    327000              2.7          116   0       0    8\n6                   1    204000              2.1          132   1       1    8\n  DEATH_EVENT\n1           1\n2           1\n3           1\n4           1\n5           1\n6           1\n\n\nThe read.csv() function read the contents of the CSV file into an R object known as a data.frame. This is essentially a table like a spreadsheet, where each row represents a case (e.g. a subject, patient, etc.) and each column represents a variable (e.g. Patient ID, Age, Sex, Dx, etc.)\nXLSX\nTo read in XLSX files, you need to install an external package. Multiple packages can read such files, including openxlsx and readxl.\nTo install an external package, use the install.packages() command:\n\ninstall.packages('openxlsx')\n\nTo use the package, you need to load it into your R session using the library() command:\n\nlibrary(openxlsx)\n\n\ndat &lt;- read.xlsx(\"/Data/UCI/heart_failure_clinical_records_dataset.xlsx\")\n\nAlternatively, you can use the openxlsx:: prefix to call the function directly, without loading the package into your session:\n\ndat &lt;- openxlsx::read.xlsx(\"/Data/UCI/heart_failure_clinical_records_dataset.xlsx\")\n\n\n\n\n\n\n\nNote\n\n\n\nIf you want to try the above command, open the CSV file using Excel and save it as an XLSX file.\n\n\nRead more about reading in data in 12  Base Data I/O.",
    "crumbs": [
      "Crash Course"
    ]
  },
  {
    "objectID": "CrashCourse.html#inspect-summarize-data",
    "href": "CrashCourse.html#inspect-summarize-data",
    "title": "Crash Course",
    "section": "Inspect & summarize data",
    "text": "Inspect & summarize data\nGet data dimensions:\n\ndim(dat)\n\n[1] 299  13\n\n\nLook at the data structure, including data types:\n\nstr(dat)\n\n'data.frame':   299 obs. of  13 variables:\n $ age                     : num  75 55 65 50 65 90 75 60 65 80 ...\n $ anaemia                 : int  0 0 0 1 1 1 1 1 0 1 ...\n $ creatinine_phosphokinase: int  582 7861 146 111 160 47 246 315 157 123 ...\n $ diabetes                : int  0 0 0 0 1 0 0 1 0 0 ...\n $ ejection_fraction       : int  20 38 20 20 20 40 15 60 65 35 ...\n $ high_blood_pressure     : int  1 0 0 0 0 1 0 0 0 1 ...\n $ platelets               : num  265000 263358 162000 210000 327000 ...\n $ serum_creatinine        : num  1.9 1.1 1.3 1.9 2.7 2.1 1.2 1.1 1.5 9.4 ...\n $ serum_sodium            : int  130 136 129 137 116 132 137 131 138 133 ...\n $ sex                     : int  1 1 1 1 0 1 1 1 0 1 ...\n $ smoking                 : int  0 0 1 0 0 1 0 1 0 1 ...\n $ time                    : int  4 6 7 7 8 8 10 10 10 10 ...\n $ DEATH_EVENT             : int  1 1 1 1 1 1 1 1 1 1 ...\n\n\nGet summary of dataset:\n\nsummary(dat)\n\n      age           anaemia       creatinine_phosphokinase    diabetes     \n Min.   :40.00   Min.   :0.0000   Min.   :  23.0           Min.   :0.0000  \n 1st Qu.:51.00   1st Qu.:0.0000   1st Qu.: 116.5           1st Qu.:0.0000  \n Median :60.00   Median :0.0000   Median : 250.0           Median :0.0000  \n Mean   :60.83   Mean   :0.4314   Mean   : 581.8           Mean   :0.4181  \n 3rd Qu.:70.00   3rd Qu.:1.0000   3rd Qu.: 582.0           3rd Qu.:1.0000  \n Max.   :95.00   Max.   :1.0000   Max.   :7861.0           Max.   :1.0000  \n ejection_fraction high_blood_pressure   platelets      serum_creatinine\n Min.   :14.00     Min.   :0.0000      Min.   : 25100   Min.   :0.500   \n 1st Qu.:30.00     1st Qu.:0.0000      1st Qu.:212500   1st Qu.:0.900   \n Median :38.00     Median :0.0000      Median :262000   Median :1.100   \n Mean   :38.08     Mean   :0.3512      Mean   :263358   Mean   :1.394   \n 3rd Qu.:45.00     3rd Qu.:1.0000      3rd Qu.:303500   3rd Qu.:1.400   \n Max.   :80.00     Max.   :1.0000      Max.   :850000   Max.   :9.400   \n  serum_sodium        sex            smoking            time      \n Min.   :113.0   Min.   :0.0000   Min.   :0.0000   Min.   :  4.0  \n 1st Qu.:134.0   1st Qu.:0.0000   1st Qu.:0.0000   1st Qu.: 73.0  \n Median :137.0   Median :1.0000   Median :0.0000   Median :115.0  \n Mean   :136.6   Mean   :0.6488   Mean   :0.3211   Mean   :130.3  \n 3rd Qu.:140.0   3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.:203.0  \n Max.   :148.0   Max.   :1.0000   Max.   :1.0000   Max.   :285.0  \n  DEATH_EVENT    \n Min.   :0.0000  \n 1st Qu.:0.0000  \n Median :0.0000  \n Mean   :0.3211  \n 3rd Qu.:1.0000  \n Max.   :1.0000",
    "crumbs": [
      "Crash Course"
    ]
  },
  {
    "objectID": "CrashCourse.html#data-types",
    "href": "CrashCourse.html#data-types",
    "title": "Crash Course",
    "section": "Data types",
    "text": "Data types\nA vector in R is a collection of items of the same type (e.g. numbers or characters) of any length, including 1 (i.e. there is no distinction between a scalar and a vector).  Data types in R are essentially different types of vectors.  R includes a number of builtin data types. Some of the most common are:\n\n\nnumeric (e.g. 1.2, 5.9, 11.4)\n\ncharacter (e.g. “SF”, “SD”)\n\nlogical (e.g. “TRUE”, “FALSE”)\n\nTo create a new vector you can use the assignment operator &lt;- or =.\n\na &lt;- 4\n\nYou can print the contents of an object just by typing its name in the console:\n\na\n\n[1] 4\n\n\nis the same as:\n\nprint(a)\n\n[1] 4\n\n\nA comment begins with #. Anything placed after this will not be executed. Use comments to document every step in your code.\nUse c() to combine multiple values:\n\nb &lt;- c(3, 5, 7)\n\n\nb\n\n[1] 3 5 7\n\n\nTo create a character vector, use single or double quotes around each element:\n\ndept &lt;- c(\"ED\", \"Neuro\", \"Peds\")\n\n\ndept\n\n[1] \"ED\"    \"Neuro\" \"Peds\" \n\n\n\n\n\n\n\n\nNote\n\n\n\nLearn more about R data types in 8  Data Types & Vectors.",
    "crumbs": [
      "Crash Course"
    ]
  },
  {
    "objectID": "CrashCourse.html#data-structures",
    "href": "CrashCourse.html#data-structures",
    "title": "Crash Course",
    "section": "Data Structures",
    "text": "Data Structures\nR includes multiple different data structures. Think of a data structure as a container that holds one or more vectors of data.\nThe data.frame is one of the most common data structures for statistics, because it can hold vectors of different kinds, e.g. numeric, categorical, and character.\n\n\n\n\n\n\nNote\n\n\n\nLearn more about R data structures in 9  Data Structures.\n\n\nFactors\nFactors in R are used to store categorical variables and therefore have many important uses in statistics / data science / machine learning.  Let’s convert binary categorical variables in our dataset to factors:\n\ndat$anaemia &lt;- factor(dat$anaemia)\ndat$diabetes &lt;- factor(dat$diabetes)\ndat$high_blood_pressure &lt;- factor(dat$high_blood_pressure)\ndat$sex &lt;- factor(dat$sex)\ndat$smoking &lt;- factor(dat$smoking)\ndat$DEATH_EVENT &lt;- factor(dat$DEATH_EVENT)\n\n(Cross)Tabulate counts of factor levels with table():\n\ntable(dat$anaemia)\n\n\n  0   1 \n170 129 \n\n\n\ntable(dat$anaemia, dat$diabetes)\n\n   \n     0  1\n  0 98 72\n  1 76 53\n\n\n\n\n\n\n\n\nNote\n\n\n\nLearn more about factors in 11  Factors.",
    "crumbs": [
      "Crash Course"
    ]
  },
  {
    "objectID": "CrashCourse.html#working-with-data.frames",
    "href": "CrashCourse.html#working-with-data.frames",
    "title": "Crash Course",
    "section": "Working with data.frames",
    "text": "Working with data.frames\nIndexing\nTo index a data.frame means to select one or more rows and one or more rows. You do this using bracket notation, where the index of rows is followed by the index of columns.\nFor example, to index the first 10 rows and first 3 columns:\n\ndat[1:10, 1:3]\n\n   age anaemia creatinine_phosphokinase\n1   75       0                      582\n2   55       0                     7861\n3   65       0                      146\n4   50       1                      111\n5   65       1                      160\n6   90       1                       47\n7   75       1                      246\n8   60       1                      315\n9   65       0                      157\n10  80       1                      123\n\n\nTo index all rows or all columns, leave the corresponding index empty.\nFor example, index all rows of the first column:\n\ndat[, 1]\n\n  [1] 75.000 55.000 65.000 50.000 65.000 90.000 75.000 60.000 65.000 80.000\n [11] 75.000 62.000 45.000 50.000 49.000 82.000 87.000 45.000 70.000 48.000\n [21] 65.000 65.000 68.000 53.000 75.000 80.000 95.000 70.000 58.000 82.000\n [31] 94.000 85.000 50.000 50.000 65.000 69.000 90.000 82.000 60.000 60.000\n [41] 70.000 50.000 70.000 72.000 60.000 50.000 51.000 60.000 80.000 57.000\n [51] 68.000 53.000 60.000 70.000 60.000 95.000 70.000 60.000 49.000 72.000\n [61] 45.000 50.000 55.000 45.000 45.000 60.000 42.000 72.000 70.000 65.000\n [71] 41.000 58.000 85.000 65.000 69.000 60.000 70.000 42.000 75.000 55.000\n [81] 70.000 67.000 60.000 79.000 59.000 51.000 55.000 65.000 44.000 57.000\n [91] 70.000 60.000 42.000 60.000 58.000 58.000 63.000 70.000 60.000 63.000\n[101] 65.000 75.000 80.000 42.000 60.000 72.000 55.000 45.000 63.000 45.000\n[111] 85.000 55.000 50.000 70.000 60.000 58.000 60.000 85.000 65.000 86.000\n[121] 60.000 66.000 60.000 60.000 60.000 43.000 46.000 58.000 61.000 53.000\n[131] 53.000 60.000 46.000 63.000 81.000 75.000 65.000 68.000 62.000 50.000\n[141] 80.000 46.000 50.000 61.000 72.000 50.000 52.000 64.000 75.000 60.000\n[151] 72.000 62.000 50.000 50.000 65.000 60.000 52.000 50.000 85.000 59.000\n[161] 66.000 45.000 63.000 50.000 45.000 80.000 53.000 59.000 65.000 70.000\n[171] 51.000 52.000 70.000 50.000 65.000 60.000 69.000 49.000 63.000 55.000\n[181] 40.000 59.000 65.000 75.000 58.000 60.667 50.000 60.000 60.667 40.000\n[191] 80.000 64.000 50.000 73.000 45.000 77.000 45.000 65.000 50.000 60.000\n[201] 63.000 45.000 70.000 60.000 78.000 50.000 40.000 85.000 60.000 49.000\n[211] 70.000 50.000 78.000 48.000 65.000 73.000 70.000 54.000 68.000 55.000\n[221] 73.000 65.000 42.000 47.000 58.000 75.000 58.000 55.000 65.000 72.000\n[231] 60.000 70.000 40.000 53.000 53.000 77.000 75.000 70.000 65.000 55.000\n[241] 70.000 65.000 40.000 73.000 54.000 61.000 55.000 64.000 40.000 53.000\n[251] 50.000 55.000 50.000 70.000 53.000 52.000 65.000 58.000 45.000 53.000\n[261] 55.000 62.000 65.000 68.000 61.000 50.000 55.000 56.000 45.000 40.000\n[271] 44.000 51.000 67.000 42.000 60.000 45.000 70.000 70.000 50.000 55.000\n[281] 70.000 70.000 42.000 65.000 50.000 55.000 60.000 45.000 65.000 90.000\n[291] 45.000 60.000 52.000 63.000 62.000 55.000 45.000 45.000 50.000\n\n\nIndex all columns of the 12th row:\n\ndat[12, ]\n\n   age anaemia creatinine_phosphokinase diabetes ejection_fraction\n12  62       0                      231        0                25\n   high_blood_pressure platelets serum_creatinine serum_sodium sex smoking time\n12                   1    253000              0.9          140   1       1   10\n   DEATH_EVENT\n12           1\n\n\nAnother way to select a column of a data.frame is by name.\nNote, we wrap the indexing of the data.frame around head() to avoid printing the entire column.\n\nhead(dat[, \"age\"])\n\n[1] 75 55 65 50 65 90\n\n\nor using the $ notation:\n\nhead(dat$age)\n\n[1] 75 55 65 50 65 90\n\n\n\n\n\n\n\n\nNote\n\n\n\nLearn more about data.frames in 25  Working with Data frames.",
    "crumbs": [
      "Crash Course"
    ]
  },
  {
    "objectID": "CrashCourse.html#functions-in-r",
    "href": "CrashCourse.html#functions-in-r",
    "title": "Crash Course",
    "section": "Functions in R",
    "text": "Functions in R\nR includes a very large number of functions in the base language, which allow you to do a whole lot of data cleaning & manipulation, plotting, and modeling.  A function is called by typing its name, followed by a parenthesis with or without arguments.  For example, to get the mean of the b vector from above:\n\nmean(b)\n\n[1] 5\n\n\n\n\n\n\n\n\nNote\n\n\n\nLearn how to write your own functions in 21  Writing Functions.",
    "crumbs": [
      "Crash Course"
    ]
  },
  {
    "objectID": "CrashCourse.html#summarize-data",
    "href": "CrashCourse.html#summarize-data",
    "title": "Crash Course",
    "section": "Summarize data",
    "text": "Summarize data\nA lot of statistical functionality is built in to the language. You can easily get summary statistics of variables using functions like mean(), median(), range(), max(), min().\nContinuous variables\n\nmean(dat$age)\n\n[1] 60.83389\n\nmedian(dat$age)\n\n[1] 60\n\nmin(dat$age)\n\n[1] 40\n\nmax(dat$age)\n\n[1] 95\n\nsummary(dat$age)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  40.00   51.00   60.00   60.83   70.00   95.00 \n\n\nCategorical variables\nThe table() function gives you the counts for each level/unique value of a variable:\n\ntable(dat$sex)\n\n\n  0   1 \n105 194 \n\ntable(dat$smoking)\n\n\n  0   1 \n203  96",
    "crumbs": [
      "Crash Course"
    ]
  },
  {
    "objectID": "CrashCourse.html#aggregate-data",
    "href": "CrashCourse.html#aggregate-data",
    "title": "Crash Course",
    "section": "Aggregate data",
    "text": "Aggregate data\nR includes a powerful function called aggregate() that allows you to aggregate data based on one or more variables.  As a simple example, let’s calculate the mean age by sex:\n\naggregate(age ~ sex, data = dat, FUN = mean)\n\n  sex      age\n1   0 59.77778\n2   1 61.40550\n\n\n\n\n\n\n\n\nNote\n\n\n\nLearn more about data aggregation in Chapter 20  Aggregate.",
    "crumbs": [
      "Crash Course"
    ]
  },
  {
    "objectID": "CrashCourse.html#plots",
    "href": "CrashCourse.html#plots",
    "title": "Crash Course",
    "section": "Plots",
    "text": "Plots\nR has powerful and extensive support for graphics built in to the core language.\nHere, we look at how to produce some common and important plot types:\nHistogram\nDraw a histogram using hist(x)\n\nhist(dat$age, col = \"lightseagreen\")\n\n\n\n\n\n\n\nBoxplot\nDraw a boxplot using boxplot(x)\n\nboxplot(dat$ejection_fraction, col = \"lightseagreen\")\n\n\n\n\n\n\n\nYou can use a simple formula notation to draw boxplots grouped by a categorical variable using ~ symbol:continuous variable ~ grouping variable\n\nboxplot(dat$serum_sodium ~ dat$smoking, col = \"lightseagreen\")\n\n\n\n\n\n\n\nScatter plot\nDraw a scatter plot using plot(x, y)\n\nplot(dat$age, dat$serum_sodium, col = \"lightseagreen\")\n\n\n\n\n\n\n\n\nplot(dat$age, dat$serum_sodium, col = \"lightseagreen\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nLearn more about plotting in Chapters 43  Base Graphics, 44  Colors, 45  Introduction to ggplot2, and 46  Introduction to plotly.",
    "crumbs": [
      "Crash Course"
    ]
  },
  {
    "objectID": "CrashCourse.html#hypothesis-testing",
    "href": "CrashCourse.html#hypothesis-testing",
    "title": "Crash Course",
    "section": "Hypothesis Testing",
    "text": "Hypothesis Testing\nT-test\nAre the means of two groups significantly different? We use a simple formula notation as with the boxplot above to split values by group:\n\nt.test(dat$serum_sodium ~ dat$sex)\n\n\n    Welch Two Sample t-test\n\ndata:  dat$serum_sodium by dat$sex\nt = 0.45176, df = 184.61, p-value = 0.652\nalternative hypothesis: true difference in means between group 0 and group 1 is not equal to 0\n95 percent confidence interval:\n -0.8565791  1.3653665\nsample estimates:\nmean in group 0 mean in group 1 \n       136.7905        136.5361 \n\n\nChi-squared test\nTest for association between two categorical variables:\n\nchisq.test(dat$smoking, dat$DEATH_EVENT)\n\n\n    Pearson's Chi-squared test with Yates' continuity correction\n\ndata:  dat$smoking and dat$DEATH_EVENT\nX-squared = 0.0073315, df = 1, p-value = 0.9318\n\n\n\nsmoking_sex &lt;- chisq.test(dat$smoking, dat$sex)\nsmoking_sex\n\n\n    Pearson's Chi-squared test with Yates' continuity correction\n\ndata:  dat$smoking and dat$sex\nX-squared = 57.463, df = 1, p-value = 3.444e-14\n\n\nYou can print the observed frequencies:\n\nsmoking_sex$observed\n\n           dat$sex\ndat$smoking   0   1\n          0 101 102\n          1   4  92\n\n\nand the expected frequencies:\n\nsmoking_sex$expected\n\n           dat$sex\ndat$smoking        0         1\n          0 71.28763 131.71237\n          1 33.71237  62.28763",
    "crumbs": [
      "Crash Course"
    ]
  },
  {
    "objectID": "CrashCourse.html#saving-data",
    "href": "CrashCourse.html#saving-data",
    "title": "Crash Course",
    "section": "Saving data",
    "text": "Saving data\nCSV\nYou can write R objects to CSV file using `write.csv()’. These can be read directly into any program or language that can handle data.\n\nwrite.csv(dat, \"~/Data/dat.csv\")\n\nRDS\nYou can also directly save any R object as an “RDS” file. These can be read into R. The advantage is that they are compressed and therefore may take a lot less space, and will maintain any type conversion you have performed.\n\nsaveRDS(dat, \"~/Data/dat.rds\")\n\n\n\n\n\n\n\nNote\n\n\n\nLearn more about data.frames in Chapter 12  Base Data I/O.",
    "crumbs": [
      "Crash Course"
    ]
  },
  {
    "objectID": "CrashCourse.html#builtin-documentation",
    "href": "CrashCourse.html#builtin-documentation",
    "title": "Crash Course",
    "section": "Builtin Documentation",
    "text": "Builtin Documentation\nAfter you’ve successfully installed R and RStudio, one of the first things to know is how to access and search the builtin documentation.\nGet help on a specific item\nIf you know the name of what you’re looking for (an R function most commonly, but possibly also the name of a dataset, or a package itself), just type ? followed by the name of said function, dataset, etc. in the R prompt:\n\n?sample\n\nIn RStudio, the above example will bring up the documentation for the sample function in the dedicated “Help” window, commonly situated at the bottom right (but can be moved by the user freely). If you are running R directly at the system shell, the same information is printed directly at the console.\nTry running the above example on your system.\nSearch the docs\nIf you do not know the name of what you are looking for, you can use double question marks, ??, followed by your query (this is short for the help.search command that provides a number of arguments you can look up using ?help.search):\n\n??bootstrap",
    "crumbs": [
      "Crash Course"
    ]
  },
  {
    "objectID": "CrashCourse.html#introduction-to-programming",
    "href": "CrashCourse.html#introduction-to-programming",
    "title": "Crash Course",
    "section": "Introduction to Programming",
    "text": "Introduction to Programming\nEveryone can code  Everyone can learn how to program. Whether it takes you a minute or a longer to learn how to write the code neessary to perform a certain task, you can master it. Do not compare yourself to others.  As with most things: a) motivation is key and b) you get good with practice.  You are here because, presumably, you have important questions to answer using data.  Knowing how to code even a little can give you the power to work with your own data without depending fully on someone else. At the same time, it makes collaborating with other scientists, clinicians, statisticians, etc. much more effective & efficient.  You don’t learn to code by reading books or slides, you learn to code by doing. Ideally, work on data you are interested in, trying to answer questions you care about.  Learning to code can be exciting and frustrating. It’s similar to learning to play an instrument - like the guitar. At first, it may seem unnatural and annoying, but you can get better at it rather quickly and it’s very rewarding and satisfying.  It is important to be able to read and write code. Coding requires logic & creativity  Programming is based on logic and learning to code helps structure your thoughts, your experiments, your reasoning.  Programming languages are human constructs. They were built to answer important needs. They develop with time, as needs evolve. Many design choices are explained historically, a few may be more arbitrary. Everything is a series of simple, manageable steps  Remember this: the shortest and simplest piece of code up to the longest and most complex is made of a sequence of relatively simple steps.  Always be clear about what you want to achieve first, then break it down step-by-step in code. Each step is relatively easy to figure out and check that it is working as desired. A common mistake is to write multiple steps in one go, and then have a hard time figuring out where an error occurs or why.  To get from A to B using code there are virtually always multiple different paths. That can be confusing or perhaps frustrating, but it is also exciting. Programming to the uninitiated may seem a a rigid exercise but it is highly creative. Remember that there objective and subjective differences to consider when designing a code to take you from A to B. Suppose you have two approaches that have the same input and produce the same output. An objective difference would be how fast each completes the task and how many lines of code or number of function calls it requires. A subjective difference would be the programming style / syntax used / whether the code is “elegant” - a pretty broad topic. Errors happen often but they are not all the same  Errors in code happen all the time, it is part of the process. But, not all errors are the same.  There are errors that: \n\nstop execution of code and produce an error message. This is the best case scenario because it can’t go unnoticed and you are forced to address them.\ndo not stop execution of code but produce a warning. These warnings are very often ignored. They may be serious or trivial, but must be investigated.\ndo not stop execution and produce no warnings. This is the worst kind of error since it is silent. These can be common and the only way to recognize them is to check the output. Always read all error & warning messages. Details matter (a lot)  A lot of mistakes occur, especially in the beginning, because a variable or function name is misspelled. Always check yourself  Remember: the most important thing is to ensure you produce correct results at each step. Don’t place writing smart or elegant code above writing correct code. Spend time reviewing your code. If possible, have one or more other people review your code. Document everything  Make a habit from the very beginning to always use comments in your code to explain what you are trying to achieve and why. You will often need to revisit your code after some time has passed. Life will be very hard if it’s not clear what is happening and why.  Programming is largely a team sport. A lot of code is written collaboratively or is used by people other than the author. Again, comprehensive documentation is super important. Help is at your fingertips  Whether you are just starting out or you are a seasoned programmer, you have many sources of information to help you troubleshoot or learn new skills. \nUse the built-in documentation! Builtin help files, written by the code author, are almost always the best place to start. Their quality will vary, but they are often sufficient to learn how to use a function properly.\nProgramming is largely an online activity. All documentation and source code (of open source projects) is available online. Most errors or difficulties you encounter have been encountered many times before by others. A very large number of Q&A sites, blogs, forums are a web search away. Copy-pasting an error message into a search engine will often result in multiple hits.",
    "crumbs": [
      "Crash Course"
    ]
  },
  {
    "objectID": "References.html",
    "href": "References.html",
    "title": "References",
    "section": "",
    "text": "Chambers, John M. 1998. Programming with Data: A Guide to the s\nLanguage. Springer Science & Business Media.\n\n\nSievert, Carson, Chris Parmer, Toby Hocking, Scott Chamberlain, Karthik\nRam, Marianne Corvellec, and Pedro Despouy. 2017. “Plotly: Create\nInteractive Web Graphics via ‘Plotly. Js’.” R\nPackage Version 4 (1): 110.\n\n\nWickham, Hadley. 2011. “Ggplot2.” Wiley\nInterdisciplinary Reviews: Computational Statistics 3 (2): 180–85.\n\n\nWilkinson, Leland. 2012. “The Grammar of Graphics.” In\nHandbook of Computational Statistics, 375–414. Springer.",
    "crumbs": [
      "References"
    ]
  }
]