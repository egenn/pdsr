{
  "hash": "40c80477a92609303fd64024f8b1955a",
  "result": {
    "engine": "knitr",
    "markdown": "---\nexecute: \n  warning: false\nknitr:\n  opts_knit:\n    global.par: true\n  opts_chunk: \n    comment: ''\n    fig.width: 5\n    fig.height: 5\n---\n\n\n\n# Crash Course {.unnumbered}\n\n\n\n::: {.cell}\n\n:::\n\n\n\nThis is the online material for the UCSF DCR 'Intro to R' selective.\n\n\n\n\n<STYLE type='text/css' scoped>\nPRE.fansi SPAN {padding-top: .25em; padding-bottom: .25em};\n</STYLE>\n\n\n\n\n## Introduction & Format\n\nThis is a brief introduction to the R programming language for health data \nscience.\nIt covers basic commands to allow you to read in data, perform common \nmanipulations, plot data and run common tests.\n<br><br>\n[R](https://en.wikipedia.org/wiki/R_(programming_language)) is a \n[programming language](https://en.wikipedia.org/wiki/Programming_language) \ndeveloped specifically for statistical computing and graphics.\n<br><br>\nIt is often mis-characterized as a \"statistical package\", similar to SPSS, for \nexample, but as a full programming language it has far more extensive \nfunctionality.\n<br><br>\nFor a more thorough coverage of the topic, see the main part of this\n[book](https://class.lambdamd.org/pdsr/).\n<br><br>\nLinks to book chapters will be provided throughout these notes for those \ninterested in reading up further into particular topics.\n<br><br>\nR can be used to perform most, if not all, operations in statistics, data science,\nmachine learning. This is not a crash course in statistics, data science, or \nmachine learning, but an introduction to the language itself.\n<br><br>\nIf you have any questions, write them down and make sure to ask them during \neach section's Q&A.\n\n## Data pipelines\n\nThis is only a generic, high-level example of a data pipeline.\n\nEach of the nodes in the diagram may contain a number of sub-steps, dependent on the\ndata and the goal(s) of the analysis.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Example high-level data pipeline](./assets/DataPipeline.png){#fig-datpipeline fig-align='center' width=66%}\n:::\n:::\n\n\n\n\n::: callout-important\nWithin a single project, you may need to create multiple varations of your data\npipeline, since different questions may require different approaches that in turn\nrequire different preprocessing.\n:::\n\n## The R language\n\n- The **S** statistical programming language was developed in 1976 at Bell Labs by \nJohn Chambers and others \"to turn ideas into software, quickly and faithfully”.\n\n- **R** is an [open source](https://en.wikipedia.org/wiki/Open_source) implementation of \nS developed by Ross Ihaka and Robert Gentleman at the University of Auckland, New Zealand; \ninitial version released in 1995.\n\n- Supported by the \n[R Foundation for Statistical Computing](https://www.r-project.org/foundation/), \ndeveloped by the \n[R Core Team and the contributions of many others](https://www.r-project.org/contributors.html).\n\n- Official part of the [Free Software Foundation’s](https://www.fsf.org) \n[GNU project](https://www.gnu.org/) available under \n[GNU GPL v2](https://www.gnu.org/licenses/old-licenses/gpl-2.0.html).\n\n- Latest version [4.3.3 released 2024-02-29](https://cloud.r-project.org/) (as of writing)\n\n## Free Open Source Software\n\n**[Free Open Source Software (FOSS)](https://en.wikipedia.org/wiki/Free_and_open-source_software)**\nis software that is \"free\" and \"open source\" - what does that really mean?\n\n**[What is Free Software?](https://www.fsf.org/about/what-is-free-software)**\n\n> \"Free software is software that gives you, the user, the freedom to share, \n>  study and modify it. We call this free software because the user is free.\"\n> \n> <footer>--- Free Software Foundation</footer>\n\n**[What is Open Source Software](https://opensource.com/resources/what-open-source)**\n\n> \"Open source software is software with source code that anyone can \n> inspect, modify, and enhance.\"\n>\n> <footer>--- opensource.com</footer>\n\n**Why is FOSS important?**\n<br><br>\nThere are many advantage to FOSS, in general. Some of those, that are highly \nrelevant in biomedical research and clinical applications include the promotion\nof **inclusion**, **transparency**, and **trustworthiness.**\n\n## Integrated Development Environments (IDEs) for R\n\nAn [Integrated Development Environment (IDE)](https://en.wikipedia.org/wiki/Integrated_development_environment)\nis a software application that allows you to write and run code.\n<br><br>\nTwo popular and powerful IDEs for R are:\n\n- [RStudio](https://posit.co/products/open-source/rstudio/)\n- [Visual Studio Code](https://code.visualstudio.com/) with the [R Extension](https://github.com/REditorSupport/vscode-R)\n\n## The R core language & package ecosystem\n\nR boasts extensive quantitative and statistical functionality in the base \nsystem.\n\nThis functionality is extended through a vast ecosystem of external packages.\n\n- **CRAN**: The Comprehensive R Archive Network (https://cran.r-project.org/): \n[20510 packages](https://cran.r-project.org/web/packages/)\n- **Bioconductor**: Bioinformatics-related packages and more \n(https://www.bioconductor.org/): \n[2266 packages](https://bioconductor.org/about/release-announcements/)\n- **GitHub**: The largest source code host (>200M repositories; https://github.com/): \nHosts most if not all of the above and a lot more. Also hosts a copy of the entire CRAN.\n\n## Reading in Data\n\nWe shall use a heart failure dataset as an example. It is freely available at \nthe [UCI repository](https://archive.ics.uci.edu/):\n\n[Heart Failure Clinical Records Dataset](https://archive.ics.uci.edu/ml/machine-learning-databases/00519/heart_failure_clinical_records_dataset.csv)\n<br><br>\nYou can either download it to a local folder or read it directly from the internet. \nFor this exercise, download it to a local folder of your choice.\n\n### CSV\n\nAssuming you have downloaded the file to your local disk under \"/Data/UCI\", you can\nread it into R using the `read.csv()` command:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat <- read.csv(\"/Data/UCI/heart_failure_clinical_records_dataset.csv\")\n```\n:::\n\n\n\n\nAn important optional argument of the `read.csv()` command is `na.strings`: it lets you\ndefine which string(s) should be considered as missing data. Some common strings used to \nindicated missing data are the empty string `\"\"` or `NA`.\n<br><br>\nThe above file does not contain any missing data, so the following is only an example of\nhow you would define the `na.strings` argument if you wanted to read in a file that \nincludes missing data coded either by an empty string (\"\") or `NA`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat <- read.csv(\"/Data/UCI/heart_failure_clinical_records_dataset.csv\",\n                na.strings = c(\"\", \"NA\"))\n```\n:::\n\n\n\n\n`read.csv()` can also read files directly from the internet:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat <- read.csv(\"https://archive.ics.uci.edu/ml/machine-learning-databases/00519/heart_failure_clinical_records_dataset.csv\")\n```\n:::\n\n\n\n\n::: callout-tip\nIf reading directly from the internet, you may get an SSL error (especially on Windows\nsystems). In that case, you can either download the file using a browser and reading it \nfrom disk, or you can try installing/updating your OpenSSL library.\n:::\n\nThe `head()` function prints the first few lines of an object:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(dat)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  age anaemia creatinine_phosphokinase diabetes ejection_fraction\n1  75       0                      582        0                20\n2  55       0                     7861        0                38\n3  65       0                      146        0                20\n4  50       1                      111        0                20\n5  65       1                      160        1                20\n6  90       1                       47        0                40\n  high_blood_pressure platelets serum_creatinine serum_sodium sex smoking time\n1                   1    265000              1.9          130   1       0    4\n2                   0    263358              1.1          136   1       0    6\n3                   0    162000              1.3          129   1       1    7\n4                   0    210000              1.9          137   1       0    7\n5                   0    327000              2.7          116   0       0    8\n6                   1    204000              2.1          132   1       1    8\n  DEATH_EVENT\n1           1\n2           1\n3           1\n4           1\n5           1\n6           1\n```\n\n\n:::\n:::\n\n\n\n\nThe `read.csv()` function read the contents of the CSV file into an R object known\nas a `data.frame`. This is essentially a table like a spreadsheet, where each row\nrepresents a case (e.g. a subject, patient, etc.) and each column represents a\nvariable (e.g. Patient ID, Age, Sex, Dx, etc.)\n\n### XLSX\n\nTo read in XLSX files, you need to install an external package. Multiple packages can\nread such files, including \n[`openxlsx`](https://cran.r-project.org/web/packages/openxlsx/) and \n[`readxl`](https://cran.r-project.org/web/packages/readxl/).\n\nTo install an external package, use the `install.packages()` command:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages('openxlsx')\n```\n:::\n\n\n\n\nTo use the package, you need to load it into your R session using the `library()` command:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(openxlsx)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndat <- read.xlsx(\"/Data/UCI/heart_failure_clinical_records_dataset.xlsx\")\n```\n:::\n\n\n\n\nAlternatively, you can use the `openxlsx::` prefix to call the function directly, without\nloading the package into your session:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat <- openxlsx::read.xlsx(\"/Data/UCI/heart_failure_clinical_records_dataset.xlsx\")\n```\n:::\n\n\n\n\n::: callout-note\nIf you want to try the above command, open the CSV file using Excel and save it as\nan XLSX file.\n:::\n\nRead more about reading in data in @sec-basedataio.\n\n## Inspect & summarize data\n\nGet data dimensions:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(dat)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 299  13\n```\n\n\n:::\n:::\n\n\n\n\nLook at the data structure, including data types:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(dat)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t299 obs. of  13 variables:\n $ age                     : num  75 55 65 50 65 90 75 60 65 80 ...\n $ anaemia                 : int  0 0 0 1 1 1 1 1 0 1 ...\n $ creatinine_phosphokinase: int  582 7861 146 111 160 47 246 315 157 123 ...\n $ diabetes                : int  0 0 0 0 1 0 0 1 0 0 ...\n $ ejection_fraction       : int  20 38 20 20 20 40 15 60 65 35 ...\n $ high_blood_pressure     : int  1 0 0 0 0 1 0 0 0 1 ...\n $ platelets               : num  265000 263358 162000 210000 327000 ...\n $ serum_creatinine        : num  1.9 1.1 1.3 1.9 2.7 2.1 1.2 1.1 1.5 9.4 ...\n $ serum_sodium            : int  130 136 129 137 116 132 137 131 138 133 ...\n $ sex                     : int  1 1 1 1 0 1 1 1 0 1 ...\n $ smoking                 : int  0 0 1 0 0 1 0 1 0 1 ...\n $ time                    : int  4 6 7 7 8 8 10 10 10 10 ...\n $ DEATH_EVENT             : int  1 1 1 1 1 1 1 1 1 1 ...\n```\n\n\n:::\n:::\n\n\n\n\nGet summary of dataset:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(dat)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      age           anaemia       creatinine_phosphokinase    diabetes     \n Min.   :40.00   Min.   :0.0000   Min.   :  23.0           Min.   :0.0000  \n 1st Qu.:51.00   1st Qu.:0.0000   1st Qu.: 116.5           1st Qu.:0.0000  \n Median :60.00   Median :0.0000   Median : 250.0           Median :0.0000  \n Mean   :60.83   Mean   :0.4314   Mean   : 581.8           Mean   :0.4181  \n 3rd Qu.:70.00   3rd Qu.:1.0000   3rd Qu.: 582.0           3rd Qu.:1.0000  \n Max.   :95.00   Max.   :1.0000   Max.   :7861.0           Max.   :1.0000  \n ejection_fraction high_blood_pressure   platelets      serum_creatinine\n Min.   :14.00     Min.   :0.0000      Min.   : 25100   Min.   :0.500   \n 1st Qu.:30.00     1st Qu.:0.0000      1st Qu.:212500   1st Qu.:0.900   \n Median :38.00     Median :0.0000      Median :262000   Median :1.100   \n Mean   :38.08     Mean   :0.3512      Mean   :263358   Mean   :1.394   \n 3rd Qu.:45.00     3rd Qu.:1.0000      3rd Qu.:303500   3rd Qu.:1.400   \n Max.   :80.00     Max.   :1.0000      Max.   :850000   Max.   :9.400   \n  serum_sodium        sex            smoking            time      \n Min.   :113.0   Min.   :0.0000   Min.   :0.0000   Min.   :  4.0  \n 1st Qu.:134.0   1st Qu.:0.0000   1st Qu.:0.0000   1st Qu.: 73.0  \n Median :137.0   Median :1.0000   Median :0.0000   Median :115.0  \n Mean   :136.6   Mean   :0.6488   Mean   :0.3211   Mean   :130.3  \n 3rd Qu.:140.0   3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.:203.0  \n Max.   :148.0   Max.   :1.0000   Max.   :1.0000   Max.   :285.0  \n  DEATH_EVENT    \n Min.   :0.0000  \n 1st Qu.:0.0000  \n Median :0.0000  \n Mean   :0.3211  \n 3rd Qu.:1.0000  \n Max.   :1.0000  \n```\n\n\n:::\n:::\n\n\n\n\n## Data types\n\nA vector in R is a collection of items of the same type (e.g. numbers or characters)\nof any length, including 1 (i.e. there is no distinction between a scalar and a vector).\n<br><br>\nData types in R are essentially different types of vectors.\n<br><br>\nR includes a number of builtin data types. Some of the most common are:\n\n- **numeric** (e.g. 1.2, 5.9, 11.4)\n- **character** (e.g. \"SF\", \"SD\")\n- **logical** (e.g. \"TRUE\", \"FALSE\")\n\nTo create a new vector you can use the assignment operator `<-` or `=`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- 4\n```\n:::\n\n\n\n\nYou can print the contents of an object just by typing its name in the console:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\na\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n:::\n\n\n\n\nis the same as:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n:::\n\n\n\n\nA comment begins with `#`. Anything placed after this will not be executed.\n**Use comments to document every step in your code.**\n\nUse `c()` to combine multiple values:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nb <- c(3, 5, 7)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nb\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3 5 7\n```\n\n\n:::\n:::\n\n\n\n\nTo create a character vector, use single or double quotes around each element:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndept <- c(\"ED\", \"Neuro\", \"Peds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndept\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"ED\"    \"Neuro\" \"Peds\" \n```\n\n\n:::\n:::\n\n\n\n\n::: callout-note\nLearn more about R data types in @sec-datatypes.\n:::\n\n## Data Structures\n\nR includes multiple different data structures. Think of a data structure as a\ncontainer that holds one or more vectors of data.\n\nThe data.frame is one of the most common data structures for statistics, because\nit can hold vectors of different kinds, e.g. numeric, categorical, and character.\n\n::: callout-note\nLearn more about R data structures in @sec-datastructures.\n:::\n\n### Factors\n\nFactors in R are used to store categorical variables and therefore have many \nimportant uses in statistics / data science / machine learning.\n<br><br>\nLet's convert binary categorical variables in our dataset to factors:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat$anaemia <- factor(dat$anaemia)\ndat$diabetes <- factor(dat$diabetes)\ndat$high_blood_pressure <- factor(dat$high_blood_pressure)\ndat$sex <- factor(dat$sex)\ndat$smoking <- factor(dat$smoking)\ndat$DEATH_EVENT <- factor(dat$DEATH_EVENT)\n```\n:::\n\n\n\n\n(Cross)Tabulate counts of factor levels with `table()`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(dat$anaemia)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n  0   1 \n170 129 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(dat$anaemia, dat$diabetes)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   \n     0  1\n  0 98 72\n  1 76 53\n```\n\n\n:::\n:::\n\n\n\n\n::: callout-note\nLearn more about factors in @sec-factors.\n:::\n\n## Working with data.frames\n\n### Indexing\n\nTo index a data.frame means to select one or more rows and one or more rows. You do this\nusing bracket notation, where the index of rows is followed by the index of columns.\n\nFor example, to index the first 10 rows and first 3 columns:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat[1:10, 1:3]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   age anaemia creatinine_phosphokinase\n1   75       0                      582\n2   55       0                     7861\n3   65       0                      146\n4   50       1                      111\n5   65       1                      160\n6   90       1                       47\n7   75       1                      246\n8   60       1                      315\n9   65       0                      157\n10  80       1                      123\n```\n\n\n:::\n:::\n\n\n\n\nTo index all rows or all columns, leave the corresponding index empty.\n\nFor example, index all rows of the first column:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat[, 1]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  [1] 75.000 55.000 65.000 50.000 65.000 90.000 75.000 60.000 65.000 80.000\n [11] 75.000 62.000 45.000 50.000 49.000 82.000 87.000 45.000 70.000 48.000\n [21] 65.000 65.000 68.000 53.000 75.000 80.000 95.000 70.000 58.000 82.000\n [31] 94.000 85.000 50.000 50.000 65.000 69.000 90.000 82.000 60.000 60.000\n [41] 70.000 50.000 70.000 72.000 60.000 50.000 51.000 60.000 80.000 57.000\n [51] 68.000 53.000 60.000 70.000 60.000 95.000 70.000 60.000 49.000 72.000\n [61] 45.000 50.000 55.000 45.000 45.000 60.000 42.000 72.000 70.000 65.000\n [71] 41.000 58.000 85.000 65.000 69.000 60.000 70.000 42.000 75.000 55.000\n [81] 70.000 67.000 60.000 79.000 59.000 51.000 55.000 65.000 44.000 57.000\n [91] 70.000 60.000 42.000 60.000 58.000 58.000 63.000 70.000 60.000 63.000\n[101] 65.000 75.000 80.000 42.000 60.000 72.000 55.000 45.000 63.000 45.000\n[111] 85.000 55.000 50.000 70.000 60.000 58.000 60.000 85.000 65.000 86.000\n[121] 60.000 66.000 60.000 60.000 60.000 43.000 46.000 58.000 61.000 53.000\n[131] 53.000 60.000 46.000 63.000 81.000 75.000 65.000 68.000 62.000 50.000\n[141] 80.000 46.000 50.000 61.000 72.000 50.000 52.000 64.000 75.000 60.000\n[151] 72.000 62.000 50.000 50.000 65.000 60.000 52.000 50.000 85.000 59.000\n[161] 66.000 45.000 63.000 50.000 45.000 80.000 53.000 59.000 65.000 70.000\n[171] 51.000 52.000 70.000 50.000 65.000 60.000 69.000 49.000 63.000 55.000\n[181] 40.000 59.000 65.000 75.000 58.000 60.667 50.000 60.000 60.667 40.000\n[191] 80.000 64.000 50.000 73.000 45.000 77.000 45.000 65.000 50.000 60.000\n[201] 63.000 45.000 70.000 60.000 78.000 50.000 40.000 85.000 60.000 49.000\n[211] 70.000 50.000 78.000 48.000 65.000 73.000 70.000 54.000 68.000 55.000\n[221] 73.000 65.000 42.000 47.000 58.000 75.000 58.000 55.000 65.000 72.000\n[231] 60.000 70.000 40.000 53.000 53.000 77.000 75.000 70.000 65.000 55.000\n[241] 70.000 65.000 40.000 73.000 54.000 61.000 55.000 64.000 40.000 53.000\n[251] 50.000 55.000 50.000 70.000 53.000 52.000 65.000 58.000 45.000 53.000\n[261] 55.000 62.000 65.000 68.000 61.000 50.000 55.000 56.000 45.000 40.000\n[271] 44.000 51.000 67.000 42.000 60.000 45.000 70.000 70.000 50.000 55.000\n[281] 70.000 70.000 42.000 65.000 50.000 55.000 60.000 45.000 65.000 90.000\n[291] 45.000 60.000 52.000 63.000 62.000 55.000 45.000 45.000 50.000\n```\n\n\n:::\n:::\n\n\n\n\nIndex all columns of the 12th row:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat[12, ]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   age anaemia creatinine_phosphokinase diabetes ejection_fraction\n12  62       0                      231        0                25\n   high_blood_pressure platelets serum_creatinine serum_sodium sex smoking time\n12                   1    253000              0.9          140   1       1   10\n   DEATH_EVENT\n12           1\n```\n\n\n:::\n:::\n\n\n\n\nAnother way to select a column of a data.frame is by name.\n\nNote, we wrap the indexing of the data.frame around `head()` to avoid printing the\nentire column.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(dat[, \"age\"])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 75 55 65 50 65 90\n```\n\n\n:::\n:::\n\n\n\n\nor using the `$` notation:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(dat$age)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 75 55 65 50 65 90\n```\n\n\n:::\n:::\n\n\n\n\n::: callout-note\nLearn more about data.frames in @sec-dfbasics.\n:::\n\n## Functions in R\n\nR includes a very large number of functions in the base language, which allow\nyou to do a whole lot of data cleaning & manipulation, plotting, and modeling.\n<br><br>\nA function is called by typing its name, followed by a parenthesis with or without\narguments.\n<br><br>\nFor example, to get the mean of the `b` vector from above:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(b)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5\n```\n\n\n:::\n:::\n\n\n\n\n::: callout-note\nLearn how to write your own functions in @sec-functions.\n:::\n\n## Summarize data\n\nA lot of statistical functionality is built in to the language. You can easily get\nsummary statistics of variables using functions like `mean()`, `median()`, `range()`,\n`max()`, `min()`.\n\n### Continuous variables\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(dat$age)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 60.83389\n```\n\n\n:::\n\n```{.r .cell-code}\nmedian(dat$age)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 60\n```\n\n\n:::\n\n```{.r .cell-code}\nmin(dat$age)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 40\n```\n\n\n:::\n\n```{.r .cell-code}\nmax(dat$age)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 95\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(dat$age)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  40.00   51.00   60.00   60.83   70.00   95.00 \n```\n\n\n:::\n:::\n\n\n\n\n### Categorical variables\n\nThe `table()` function gives you the counts for each level/unique value of a variable:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(dat$sex)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n  0   1 \n105 194 \n```\n\n\n:::\n\n```{.r .cell-code}\ntable(dat$smoking)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n  0   1 \n203  96 \n```\n\n\n:::\n:::\n\n\n\n\n## Aggregate data\n\nR includes a powerful function called `aggregate()` that allows you to aggregate\ndata based on one or more variables.\n<br><br>\nAs a simple example, let's calculate the mean age by sex:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\naggregate(age ~ sex, data = dat, FUN = mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  sex      age\n1   0 59.77778\n2   1 61.40550\n```\n\n\n:::\n:::\n\n\n\n\n::: callout-note\nLearn more about data aggregation in Chapter @sec-aggregate.\n:::\n\n## Plots\n\nR has powerful and extensive support for graphics built in to the core language.\n\nHere, we look at how to produce some common and important plot types:\n\n### Histogram\n\nDraw a histogram using `hist(x)`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(dat$age, col = \"lightseagreen\")\n```\n\n::: {.cell-output-display}\n![](CrashCourse_files/figure-html/unnamed-chunk-33-1.png){width=480}\n:::\n:::\n\n\n\n\n### Boxplot\n\nDraw a boxplot using `boxplot(x)`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboxplot(dat$ejection_fraction, col = \"lightseagreen\")\n```\n\n::: {.cell-output-display}\n![](CrashCourse_files/figure-html/unnamed-chunk-34-1.png){width=480}\n:::\n:::\n\n\n\n\nYou can use a simple formula notation to draw boxplots grouped by a categorical\nvariable using `~` symbol:`continuous variable ~ grouping variable`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboxplot(dat$serum_sodium ~ dat$smoking, col = \"lightseagreen\")\n```\n\n::: {.cell-output-display}\n![](CrashCourse_files/figure-html/unnamed-chunk-35-1.png){width=480}\n:::\n:::\n\n\n\n\n### Scatter plot\n\nDraw a scatter plot using `plot(x, y)`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(dat$age, dat$serum_sodium, col = \"lightseagreen\")\n```\n\n::: {.cell-output-display}\n![](CrashCourse_files/figure-html/unnamed-chunk-36-1.png){width=480}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(dat$age, dat$serum_sodium, col = \"lightseagreen\")\n```\n\n::: {.cell-output-display}\n![](CrashCourse_files/figure-html/unnamed-chunk-37-1.png){width=480}\n:::\n:::\n\n\n\n\n::: callout-note\nLearn more about plotting in Chapters @sec-basegraphics, @sec-colors, @sec-ggplot2, and\n@sec-plotly.\n:::\n\n## Hypothesis Testing\n\n### T-test\n\nAre the means of two groups significantly different?\nWe use a simple formula notation as with the boxplot above to split values by group:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nt.test(dat$serum_sodium ~ dat$sex)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tWelch Two Sample t-test\n\ndata:  dat$serum_sodium by dat$sex\nt = 0.45176, df = 184.61, p-value = 0.652\nalternative hypothesis: true difference in means between group 0 and group 1 is not equal to 0\n95 percent confidence interval:\n -0.8565791  1.3653665\nsample estimates:\nmean in group 0 mean in group 1 \n       136.7905        136.5361 \n```\n\n\n:::\n:::\n\n\n\n\n\n### Chi-squared test\n\nTest for association between two categorical variables:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchisq.test(dat$smoking, dat$DEATH_EVENT)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tPearson's Chi-squared test with Yates' continuity correction\n\ndata:  dat$smoking and dat$DEATH_EVENT\nX-squared = 0.0073315, df = 1, p-value = 0.9318\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsmoking_sex <- chisq.test(dat$smoking, dat$sex)\nsmoking_sex\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tPearson's Chi-squared test with Yates' continuity correction\n\ndata:  dat$smoking and dat$sex\nX-squared = 57.463, df = 1, p-value = 3.444e-14\n```\n\n\n:::\n:::\n\n\n\n\nYou can print the observed frequencies:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsmoking_sex$observed\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           dat$sex\ndat$smoking   0   1\n          0 101 102\n          1   4  92\n```\n\n\n:::\n:::\n\n\n\n\nand the expected frequencies:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsmoking_sex$expected\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           dat$sex\ndat$smoking        0         1\n          0 71.28763 131.71237\n          1 33.71237  62.28763\n```\n\n\n:::\n:::\n\n\n\n\n## Saving data\n\n### CSV\n\nYou can write R objects to CSV file using `write.csv()'. These can be read \ndirectly into any program or language that can handle data.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite.csv(dat, \"~/Data/dat.csv\")\n```\n:::\n\n\n\n\n### RDS\n\nYou can also directly save any R object as an \"RDS\" file. These can be read into\nR. The advantage is that they are compressed and therefore may take a lot less space,\nand will maintain any type conversion you have performed. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsaveRDS(dat, \"~/Data/dat.rds\")\n```\n:::\n\n\n\n\n::: callout-note\nLearn more about data.frames in Chapter @sec-basedataio.\n:::\n\n## Builtin Documentation\n\nAfter you've successfully installed R and RStudio, one of the first things to know is \nhow to access and search the builtin documentation.  \n\n### Get help on a specific item\n\nIf you know the name of what you're looking for (an R function most commonly, but \npossibly also the name of a dataset, or a package itself), just type `?` followed by \nthe name of said function, dataset, etc. in the R prompt:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?sample\n```\n:::\n\n\n\n\nIn RStudio, the above example will bring up the documentation for the `sample` function \nin the dedicated \"Help\" window, commonly situated at the bottom right (but can be moved \nby the user freely). If you are running R directly at the system shell, the same \ninformation is printed directly at the console.  \nTry running the above example on your system.\n\n### Search the docs\n\nIf you do not know the name of what you are looking for, you can use double question \nmarks, `??`, followed by your query (this is short for the `help.search` command that \nprovides a number of arguments you can look up using `?help.search`):\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n??bootstrap\n```\n:::\n\n\n\n\n## Introduction to Programming\n\n**Everyone can code**\n<br><br>\nEveryone can learn how to program.\nWhether it takes you a minute or a longer to learn how to write the code\nneessary to perform a certain task, you *can* master it. Do not compare \nyourself to others.\n<br><br>\nAs with most things: a) motivation is key and b) you get good with practice.\n<br><br>\nYou are here because, presumably, you have important questions to answer using data.\n<br><br>\nKnowing how to code even a little can give you the power to work with your own data \nwithout depending fully on someone else. At the same time, it makes collaborating with\nother scientists, clinicians, statisticians, etc. much more effective & efficient.\n<br><br>\nYou don't learn to code by reading books or slides, you learn to code by doing.\nIdeally, work on data you are interested in, trying to answer questions you care\nabout.\n<br><br>\nLearning to code can be exciting and frustrating. It's similar to learning to\nplay an instrument - like the guitar. At first, it may seem unnatural and\nannoying, but you can get better at it rather quickly and it's very rewarding \nand satisfying.\n<br><br>\nIt is important to be able to **read** ***and*** **write** code.\n<br><br>\n**Coding requires logic & creativity**\n<br><br>\nProgramming is based on logic and learning to code helps structure your thoughts,\nyour experiments, your reasoning.\n<br><br>\nProgramming languages are human constructs. They were built to answer important needs.\nThey develop with time, as needs evolve. Many design choices are explained historically,\na few may be more arbitrary.\n<br><br>\n**Everything is a series of simple, manageable steps**\n<br><br>\nRemember this: the shortest and simplest piece of code up to the longest and most complex\nis made of a sequence of relatively simple steps.\n<br><br>\nAlways be clear about what you want to achieve first, then break it down step-by-step\nin code. Each step is relatively easy to figure out and **check** that it is working\nas desired. A common mistake is to write multiple steps in one go, and then have \na hard time figuring out where an error occurs or why.\n<br><br>\nTo get from A to B using code there are virtually always multiple different paths.\nThat can be confusing or perhaps frustrating, but it is also exciting.\nProgramming to the uninitiated may seem a a rigid exercise but it is highly creative.\nRemember that there objective and subjective differences to consider when designing\na code to take you from A to B. Suppose you have two approaches that have the same input \nand produce the same output. An objective difference would be how fast each completes the\ntask and how many lines of code or number of function calls it requires. A subjective\ndifference would be the programming style / syntax used / whether the code is \n\"elegant\" - a pretty broad topic.\n<br><br>\n**Errors happen often but they are not all the same**\n<br><br>\nErrors in code happen all the time, it is part of the process. But, not all errors\nare the same.\n<br>\nThere are errors that:\n<br><br>\n\n- **stop execution** of code and **produce an error message**. This is the best case \nscenario because it can't go unnoticed and you are forced to address them.\n- **do not stop execution** of code but **produce a warning**. These warnings are very\n often ignored. They may be serious or trivial, but must be investigated.\n- **do not stop execution** and **produce no warnings**. This is the worst kind of error\nsince it is silent. These can be common and the only way to recognize them is\nto check the output. \n<br>\n*Always read all error & warning messages.*\n<br><br>\n**Details matter (a lot)**\n<br><br>\nA lot of mistakes occur, especially in the beginning, because a variable or function name \nis misspelled.\n<br><br>\n**Always check yourself**\n<br><br>\nRemember: the most important thing is to ensure you produce correct results at \neach step. Don't place writing smart or elegant code above writing correct code. \nSpend time reviewing your code. If possible, have one or more other people review your \ncode.\n<br><br>\n**Document everything**\n<br><br>\nMake a habit from the very beginning to always use comments in your code to \nexplain what you are trying to achieve and why. You will often need to revisit \nyour code after some time has passed. Life will be very hard if it's not clear \nwhat is happening and why. \n<br><br>\nProgramming is largely a team sport. A lot of code is written collaboratively\nor is used by people other than the author. Again, comprehensive documentation \nis super important.\n<br><br>\n**Help is at your fingertips**\n<br><br>\nWhether you are just starting out or you are a seasoned programmer, you have\nmany sources of information to help you troubleshoot or learn new skills.\n<br><br>\n\n- Use the built-in documentation! Builtin help files, written by the code author,\nare almost always the best place to start. Their quality will vary, but they\nare often sufficient to learn how to use a function properly.\n- Programming is largely an online activity. All documentation and source code\n(of open source projects) is available online. Most errors or difficulties you \nencounter have been encountered many times before by others. A very large number\nof Q&A sites, blogs, forums are a web search away. Copy-pasting an error message \ninto a search engine will often result in multiple hits.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}