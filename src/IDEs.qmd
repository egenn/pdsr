---
execute:
  cache: true
knitr:
  opts_chunk: 
    comment: ''
---
# IDEs

An [Integrated Development Environment 
(IDE)](https://en.wikipedia.org/wiki/Integrated_development_environment) 
is a software application that offers extensive functionality for programmers, 
including ability to read, write, and execute code, develop and test software 
packages, etc.  

IDEs that support R usually also allow viewing plots or launching web 
applications within the same environment. An IDE can make working in R easier, 
more productive, and, importantly, more fun.

::: {.callout-tip}
## TL;DR

- Beginners: Use Positron.
- VS Code users or experienced programmers: Use either Positron or VS Code.
- People who love Jupyter: Give Positron and/or VS Code a try (they support Jupyter notebooks as well as being full-featured IDEs).
- People who love RStudio: Switch to Positron.
:::

## Positron by Posit

[Positron](https://github.com/posit-dev/positron) is "a next-generation data science IDE" built by Posit. First public [release](https://github.com/posit-dev/positron/releases) was made available on June 24 2024 and as stated in the GitHub repo "is an early stage project under active development". This is a new IDE by the developers of RStudio built on top of [VS Code open source ("Code OSS")](https://github.com/microsoft/vscode). Positron comes with "batteries included" and is the recommended IDE for beginners.

## VS Code {#vscode}

Visual Studio Code, a.k.a. [VS Code](https://code.visualstudio.com/){target="_blank"},
is a [source code editor](https://en.wikipedia.org/wiki/Source-code_editor){target="_blank"} 
and one of the 
[most popular IDEs](https://insights.stackoverflow.com/survey/2021#most-popular-technologies-new-collab-tools){target="_blank"}
across different languages. The 
[VS Code Extension Marketplace](https://code.visualstudio.com/docs/editor/extension-marketplace){target="_blank"} 
includes a very large number of extensions.

The ['vscode-R' extension](https://github.com/REditorSupport/vscode-R){target="_blank"} allows
using VS Code as an R IDE. To use it, you need to install the 
[`languageserver`](https://github.com/REditorSupport/languageserver){target="_blank"} 
and [`rlang`](https://cran.r-project.org/web/packages/rlang/index.html){target="_blank"} 
packages:

```{r}
#| eval: false
install.packages(c("languageserver", "rlang"))
```

The [`httpgd`](https://github.com/nx10/httpgd){target="_blank"} graphics 
device is recommended.

Install it using:

```{r}
#| eval: false
install.packages("httpgd")
```

and enable it in the extension settings ("Plot: Use httpgd").

::: {.callout-warning}
The httpgd package was [removed from CRAN on 2025-04-23](https://cran.r-project.org/web/packages/httpgd/index.html), for failing to correct outstanding issues. It will likely be reinstated when 
those are resolved. In the meantime, you can install it from GitHub using `pak` (recommended) or `remotes`:

```{r}
#| eval: false
pak::install_github("nx10/httpgd")
```

:::

The ['Remote - SSH' extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-ssh-edit){target="_blank"} 
allows using a local VS Code installation (e.g. on your laptop) and executing 
code (R, Python, etc.) on a remote server on which you have 
[SSH](https://en.wikipedia.org/wiki/Secure_Shell){target="_blank"} access.
<br>

VS Code's ['Jupyter' extension](https://marketplace.visualstudio.com/items?itemName=ms-toolsai.jupyter) 
allows you to open and run [jupyter notebooks](#jupyter).
<br>

Read more about R support in VS Code [here](https://code.visualstudio.com/docs/languages/r){target="_blank"}

## Jupyter / Jupyter Lab {#jupyter}

[Jupyter](https://jupyter.org/){target="_blank"} is a popular 
[notebook interface](https://en.wikipedia.org/wiki/Notebook_interface){target="_blank"},
which supports multiple programming languages, including R.

[JupyterLab](https://jupyterlab.readthedocs.io/en/stable/){target="_blank"} is 
the "next-generation web-based user interface for Project Jupyter".

Jupyter and JupyterLab are installed using Python, but can be used to work with multiple languages,
including R.
<br>
Python environments are a way to isolate your project's dependencies from the 
rest of your system. This is useful when you have multiple projects with
different dependencies, or when you want to avoid conflicts between packages.
There are different approaches to installing Python packages & managing environments.
Our current recommendation is to use virtual environments and handle dependencies using `uv`, which
is a much faster alternative to the classic `pip`. The alternative is to use `conda` or 

### Using `uv` & `pip` (recommended)

Create a new virtual environment named, for example, `myenv`:

```{sh}
#| eval: false
python3 -m venv myenv
```

Activate your new virtual environment:

```{sh}
#| eval: false
source myenv/bin/activate
```

Install `uv`, a faster alternative to `pip`:

```{sh}
#| eval: false
pip install uv
```

Install jupyterlab:

```{sh}
#| eval: false
uv pip install jupyterlab
```
