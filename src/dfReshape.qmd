---
knitr:
  opts_chunk:
    comment: ""
---
# Reshaping {#sec-dfreshape}

Tabular data can be stored in different formats. Two of the most common ones are 
**wide** and **long**. 

::: callout-note
A **wide** dataset contains a single row per case (e.g. patient), while a 
**long ** dataset can contain multiple rows per case (e.g. for multiple 
variables or timepoints).
:::

We want to be able to **reshape** from one form to the other because different 
programs (e.g. statistical models, plotting functions) expect data in one or the 
other format for different applications (e.g. longitudinal modeling or grouped 
visualizations).
<br>

```{r}
#| label: fig-widevslong
#| echo: false
#| out-width: 100%
#| fig-align: center
#| fig-cap: "Wide and Long data format example. Notice how the wide table on
#| the left with 3 cases (3 unique IDs) and 3 variables can be represented as a 3 x 4
#| table in wide format or a 9 x 3 table in long format. The values (outlined 
#| in magenta) are present once in each table: on the wide table they form an 
#| **ID x Variable** matrix, while on the long they are stacked on a 
#| **single column**. The IDs have to be repeated on the long table, once for 
#| each variable and there is a new 'Variable' column to provide the 
#| information present in the wide table's column names."
knitr::include_graphics("assets/wide_long.png", dpi = NA)
```

R's `reshape()` function is very powerful, but can seem intimidating at first,
because its documentation is not very clear, especially if you're not familiar
with the jargon.
<br><br>
This chapter includes detailed diagrams and step-by-step instructions to 
explain how to build calls for long-to-wide and wide-to-long reshaping.

## Long to Wide

### Key-value pairs

It is very common to receive data in long format. For example, many tables with 
electronic health records are stored in long format.
<br><br>
Let's start with a small synthetic dataset:

```{r}
dat_long <- data.frame(
    Account_ID = c(8001, 8002, 8003, 8004, 8001, 8002, 8003, 8004, 
            8001, 8002, 8003, 8004, 8001, 8002, 8003, 8004), 
    Age = c(67.8017038366664, 42.9198507293701, 46.2301756642422, 
            39.665983196671, 67.8017038366664, 42.9198507293701, 
            46.2301756642422, 39.665983196671, 67.8017038366664, 
            42.9198507293701, 46.2301756642422, 39.665983196671, 
            67.8017038366664, 42.9198507293701, 46.2301756642422, 
            39.665983196671), 
    Admission = c("ED", "Planned", "Planned", "ED", "ED", "Planned", 
            "Planned", "ED", "ED", "Planned", "Planned", "ED", "ED", "Planned", 
            "Planned", "ED"), 
    Lab_key = c("RBC", "RBC", "RBC", "RBC", "WBC", "WBC", "WBC", "WBC", 
            "Hematocrit", "Hematocrit", "Hematocrit", "Hematocrit", 
            "Hemoglobin", "Hemoglobin", "Hemoglobin", "Hemoglobin"), 
    Lab_value = c(4.63449321082268, 3.34968550627897, 4.27037213597765, 
            4.93897736897793, 8374.22887757195, 7612.37380499927, 
            8759.27855519425, 6972.28096216548, 36.272693147236, 
            40.5716317809522, 39.9888624177955, 39.8786884058422, 
            12.6188444991545, 12.1739747363806, 15.1293426442183, 
            14.8885696185238)
)
dat_long <- dat_long[order(dat_long$Account_ID), ]
dat_long
```

The dataset consists of an `Account_ID`, denoting a unique patient identifier,
`Age`, `Admission`, and a pair of `Lab_key` and a `Lab_value` columns. The lab
data contains information on four lab results: RBC, WBC, Hematocrit, and
Hemoglobin.
<br><br>
Use the following figure to understand `reshape()`'s long-to-wide syntax. You 
can use it as a reference when building a call to `reshape()` by following 
steps 1 through 3.

```{r}
#| label: fig-reshape_long2wide
#| echo: false
#| out-width: 100%
#| fig-align: center
#| fig-cap: "`reshape()` syntax for Long to Wide transformation."
knitr::include_graphics("assets/R_reshape_long2wide.png", dpi = NA)
```

```{r}
dat_wide <- reshape(
    dat_long,
    idvar = "Account_ID",
    timevar = "Lab_key",
    v.names = "Lab_value",
    direction = "wide")
dat_wide
```

You can optionally clean up column names using [`gsub()`](Strings.qmd#gsub), e.g.

```{r}
colnames(dat_wide) <- gsub("Lab_value.", "", colnames(dat_wide))
dat_wide
```

### Incomplete data

It is very common that not all cases have entries for all variables.
We can simulate this by removing a few lines from the data frame above.


```{r}
dat_long <- dat_long[-4, ]
dat_long <- dat_long[-6, ]
dat_long <- dat_long[-13, ]
dat_long
```

In such cases, long to wide conversion will include `NA` values where no data is
available:

```{r}
dat_wide <- reshape(dat_long,
    idvar = "Account_ID",
    timevar = "Lab_key",
    v.names = "Lab_value",
    direction = "wide"
)
dat_wide
```

### Longitudinal data

```{r}
dat2 <- data.frame(
    pat_enc_csn_id = rep(c(14568:14571), each = 5),
    result_date = rep(c(
        seq(as.Date("2019-08-01"),
            as.Date("2019-08-05"),
            length.out = 5
        )), 4
    ),
    order_description = rep("WBC", 20),
    result_component_value = c(
        rnorm(5, mean = 6800, sd = 3840),
        rnorm(5, mean = 7900, sd = 3100),
        rnorm(5, mean = 8100, sd = 4030),
        rnorm(5, mean = 3200, sd = 1100)
    ))

dat2
```

In this example, we have four unique patient IDs, with five measurements taken
on different days.
<br><br>
Following the same recipe as above, we convert to wide format:

```{r}
dat2_wide <- reshape(dat2,
    idvar = "pat_enc_csn_id",
    timevar = "result_date",
    v.names = "result_component_value",
    direction = "wide"
)
dat2_wide
```

## Wide to Long

Synthetic data:

```{r}
set.seed(2022)
dat_wide <- data.frame(
    Account_ID = c(8001, 8002, 8003, 8004),
    Age = rnorm(4, mean = 57, sd = 12),
    RBC = rnorm(4, mean = 4.8, sd = 0.5),
    WBC = rnorm(4, mean = 7250, sd = 1500),
    Hematocrit = rnorm(4, mean = 40.2, sd = 4),
    Hemoglobin = rnorm(4, mean = 13.6, sd = 1.5),
    Admission = sample(c("ED", "Planned"), size = 4, replace = TRUE)
)
dat_wide
```

Use the following figure to understand `reshape()`'s wide-to-long syntax.
Use it as a reference when building a call to `reshape()` by following 
steps 1 through 5. It's important to note which arguments refer to the input vs. 
the output data frames.

```{r}
#| label: fig-reshape_wide2long
#| echo: false
#| out-width: 100%
#| fig-align: center
#| fig-cap: "`reshape()` syntax for Wide to Long transformation."
knitr::include_graphics("assets/R_reshape_wide2long.png", dpi = NA)
```

```{r}
dat_wide2long <- reshape(# Data in wide format
                         data = dat_wide,
                         # The column name that defines case IDs
                         idvar = "Account_ID",
                         # The columns whose values we want to keep
                         varying = list(3:6),
                         # The name of the new column which will contain all 
                         # the values from the columns above
                         v.names = "Lab value",
                         # The values/names, of length = (N columns in "varying"), 
                         # that will be recycled to indicate which column from the 
                         # wide dataset each row corresponds to
                         times = c(colnames(dat_wide)[3:6]),
                         # The name of the new column created to hold the values 
                         # defined by "times"
                         timevar = "Lab key",                  
                         direction = "long")
dat_wide2long
```

You can also define `varying` with a character vector:

`varying = list(c("RBC", "WBC", "Hematocrit", "Hemoglobin")`  

Explore the resulting data frame's attributes:

```{r}
attributes(dat_wide2long)
```

These attributes are present if and only if a long data.frame was created from 
a wide data.frame as above. In this case, reshaping back to wide format is as 
easy as calling `reshape()` on the previously converted data.frame with no 
arguments:

```{r}
dat_wideagain <- reshape(dat_wide2long)
dat_wideagain
```

Note that the reverse does not work, you need to specify the wide to long 
reshaping normally.

## See also

- [data.table reshape](#sec-dtreshape)
- [tidyr reshape](#sec-tidyrreshape)
